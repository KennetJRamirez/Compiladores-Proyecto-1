// Generated from C:/Users/Joab Ramirez/Desktop/Project-01/src/antlrarchivos/PlSql.g4 by ANTLR 4.13.1
package antlrarchivos;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class PlSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, PP_IF=2, PP_THEN=3, PP_ELSE=4, PP_ELSIF=5, PP_END=6, PP_ERROR=7, 
		A_LETTER=8, ADD=9, AFTER=10, AGENT=11, AGGREGATE=12, ALL=13, ALTER=14, 
		ANALYZE=15, AND=16, ANY=17, ARRAY=18, AS=19, ASC=20, ASSOCIATE=21, ASSOCIATION_OPERATOR=22, 
		AT=23, ATTRIBUTE=24, AUDIT=25, AUTHID=26, AUTO=27, AUTOMATIC=28, AUTONOMOUS_TRANSACTION=29, 
		BATCH=30, BEFORE=31, BEGIN=32, BETWEEN=33, BFILE=34, BINARY_DOUBLE=35, 
		BINARY_FLOAT=36, BINARY_INTEGER=37, BLOB=38, BLOCK=39, BODY=40, BOOLEAN=41, 
		BOTH=42, BREADTH=43, BULK=44, BY=45, BYTE=46, C_LETTER=47, CACHE=48, CALL=49, 
		CANONICAL=50, CASCADE=51, CASE=52, CAST=53, CHAR=54, CHAR_CS=55, CHARACTER=56, 
		CHECK=57, CHR=58, CLOB=59, CLOSE=60, CLUSTER=61, COLLECT=62, COLUMNS=63, 
		COMMENT=64, COMMIT=65, COMMITTED=66, COMPATIBILITY=67, COMPILE=68, COMPOUND=69, 
		CONNECT=70, CONNECT_BY_ROOT=71, CONSTANT=72, CONSTRAINT=73, CONSTRAINTS=74, 
		CONSTRUCTOR=75, CONTENT=76, CONTEXT=77, CONTINUE=78, CONVERT=79, CORRUPT_XID=80, 
		CORRUPT_XID_ALL=81, COST=82, COUNT=83, CREATE=84, CROSS=85, CUBE=86, CURRENT=87, 
		CURRENT_USER=88, CURSOR=89, CUSTOMDATUM=90, CYCLE=91, DATA=92, DATABASE=93, 
		DATE=94, DAY=95, DB_ROLE_CHANGE=96, DBTIMEZONE=97, DDL=98, DEBUG=99, DEC=100, 
		DECIMAL=101, DECLARE=102, DECOMPOSE=103, DECREMENT=104, DEFAULT=105, DEFAULTS=106, 
		DEFERRED=107, DEFINER=108, DELETE=109, DEPTH=110, DESC=111, DETERMINISTIC=112, 
		DIMENSION=113, DISABLE=114, DISASSOCIATE=115, DISTINCT=116, DOCUMENT=117, 
		DOUBLE=118, DROP=119, DSINTERVAL_UNCONSTRAINED=120, EACH=121, ELEMENT=122, 
		ELSE=123, ELSIF=124, EMPTY=125, ENABLE=126, ENCODING=127, END=128, ENTITYESCAPING=129, 
		ERRORS=130, ESCAPE=131, EXCEPT=132, EVALNAME=133, EXCEPTION=134, EXCEPTION_INIT=135, 
		EXCEPTIONS=136, EXCLUDE=137, EXCLUSIVE=138, EXECUTE=139, EXISTS=140, EXIT=141, 
		EXPLAIN=142, EXTERNAL=143, EXTEND=144, EXTRACT=145, FAILURE=146, FALSE=147, 
		FETCH=148, FINAL=149, FIRST=150, FIRST_VALUE=151, FLOAT=152, FOLLOWING=153, 
		FOLLOWS=154, FOR=155, FORALL=156, FORCE=157, FROM=158, FULL=159, FUNCTION=160, 
		GOTO=161, GRANT=162, GROUP=163, GROUPING=164, HASH=165, HAVING=166, HIDE=167, 
		HOUR=168, IF=169, IGNORE=170, IMMEDIATE=171, IN=172, INCLUDE=173, INCLUDING=174, 
		INCREMENT=175, INDENT=176, INDEX=177, INDEXED=178, INDICATOR=179, INDICES=180, 
		INFINITE=181, INLINE=182, INNER=183, INOUT=184, INSERT=185, INSTANTIABLE=186, 
		INSTEAD=187, INT=188, INTEGER=189, INTERSECT=190, INTERVAL=191, INTO=192, 
		INVALIDATE=193, IS=194, ISOLATION=195, ITERATE=196, JAVA=197, JOIN=198, 
		KEEP=199, LANGUAGE=200, LAST=201, LAST_VALUE=202, LEADING=203, LEFT=204, 
		LEVEL=205, LIBRARY=206, LIKE=207, LIKE2=208, LIKE4=209, LIKEC=210, LIMIT=211, 
		LOCAL=212, LOCK=213, LOCKED=214, LOG=215, LOGOFF=216, LOGON=217, LONG=218, 
		LOOP=219, MAIN=220, MAP=221, MATCHED=222, MAXVALUE=223, MEASURES=224, 
		MEMBER=225, MERGE=226, MINUS=227, MINUTE=228, MINVALUE=229, MLSLABEL=230, 
		MOD=231, MODE=232, MODEL=233, MODIFY=234, MONTH=235, MULTISET=236, NAME=237, 
		NAN=238, NATURAL=239, NATURALN=240, NAV=241, NCHAR=242, NCHAR_CS=243, 
		NCLOB=244, NESTED=245, NEW=246, NEXT=247, NO=248, NOAUDIT=249, NOCACHE=250, 
		NOCOPY=251, NOCYCLE=252, NOENTITYESCAPING=253, NOMAXVALUE=254, NOMINVALUE=255, 
		NONE=256, NOORDER=257, NOSCHEMACHECK=258, NOT=259, NOWAIT=260, NULL=261, 
		NULLS=262, NUMBER=263, NUMERIC=264, NVARCHAR2=265, OBJECT=266, OF=267, 
		OFF=268, OID=269, OLD=270, ON=271, ONLY=272, OPEN=273, OPTION=274, OR=275, 
		ORADATA=276, ORDER=277, ORDINALITY=278, OSERROR=279, OUT=280, OUTER=281, 
		OVER=282, OVERRIDING=283, PACKAGE=284, PARALLEL_ENABLE=285, PARAMETERS=286, 
		PARENT=287, PARTITION=288, PASSING=289, PATH=290, PERCENT_ISOPEN=291, 
		PERCENT_ROWTYPE=292, PERCENT_TYPE=293, PERCENT_FOUND=294, PERCENT_NOTFOUND=295, 
		PERCENT_ROWCOUNT=296, PIPELINED=297, PIPE=298, PIVOT=299, PLAN=300, PLS_INTEGER=301, 
		POSITIVE=302, POSITIVEN=303, PRAGMA=304, PRECEDING=305, PRECISION=306, 
		PRESENT=307, PRIOR=308, PROCEDURE=309, RAISE=310, RANGE=311, RAW=312, 
		READ=313, REAL=314, RECORD=315, REF=316, REFERENCE=317, REFERENCING=318, 
		REJECT=319, RELIES_ON=320, RENAME=321, REPLACE=322, RESPECT=323, RESTRICT_REFERENCES=324, 
		RESULT=325, RESULT_CACHE=326, RETURN=327, RETURNING=328, REUSE=329, REVERSE=330, 
		REVOKE=331, RIGHT=332, ROLLBACK=333, ROLLUP=334, ROW=335, ROWID=336, ROWS=337, 
		RULES=338, SAMPLE=339, SAVE=340, SAVEPOINT=341, SCHEMA=342, SCHEMACHECK=343, 
		SCN=344, SEARCH=345, SECOND=346, SEED=347, SEGMENT=348, SELECT=349, SELF=350, 
		SEQUENCE=351, SEQUENTIAL=352, SERIALIZABLE=353, SERIALLY_REUSABLE=354, 
		SERVERERROR=355, SESSIONTIMEZONE=356, SET=357, SETS=358, SETTINGS=359, 
		SHARE=360, SHOW=361, SHUTDOWN=362, SIBLINGS=363, SIGNTYPE=364, SIMPLE_INTEGER=365, 
		SINGLE=366, SIZE=367, SKIP_=368, SMALLINT=369, SNAPSHOT=370, SOME=371, 
		SPECIFICATION=372, SQLDATA=373, SQLERROR=374, SQL_PERCENT_ROWCOUNT=375, 
		STANDALONE=376, START=377, STARTUP=378, STATEMENT=379, STATEMENT_ID=380, 
		STATIC=381, STATISTICS=382, STRING=383, SUBMULTISET=384, SUBPARTITION=385, 
		SUBSTITUTABLE=386, SUBTYPE=387, SUCCESS=388, SUSPEND=389, TABLE=390, THE=391, 
		THEN=392, TIME=393, TIMESTAMP=394, TIMESTAMP_LTZ_UNCONSTRAINED=395, TIMESTAMP_TZ_UNCONSTRAINED=396, 
		TIMESTAMP_UNCONSTRAINED=397, TIMEZONE_ABBR=398, TIMEZONE_HOUR=399, TIMEZONE_MINUTE=400, 
		TIMEZONE_REGION=401, TO=402, TO_CHAR=403, TO_NUMBER=404, TRAILING=405, 
		TRANSACTION=406, TRANSLATE=407, TREAT=408, TRIGGER=409, TRIM=410, TRUE=411, 
		TRUNCATE=412, TYPE=413, UNBOUNDED=414, UNDER=415, UNION=416, UNIQUE=417, 
		UNLIMITED=418, UNPIVOT=419, UNTIL=420, UPDATE=421, UPDATED=422, UPSERT=423, 
		UROWID=424, USE=425, USING=426, VALIDATE=427, VALUE=428, VALUES=429, VARCHAR=430, 
		VARCHAR2=431, VARIABLE=432, VARRAY=433, VARYING=434, VERSION=435, VERSIONS=436, 
		WAIT=437, WARNING=438, WELLFORMED=439, WHEN=440, WHENEVER=441, WHERE=442, 
		WHILE=443, WITH=444, WITHIN=445, WORK=446, WRITE=447, XML=448, XMLAGG=449, 
		XMLATTRIBUTES=450, XMLCAST=451, XMLCOLATTVAL=452, XMLELEMENT=453, XMLEXISTS=454, 
		XMLFOREST=455, XMLNAMESPACES=456, XMLPARSE=457, XMLPI=458, XMLQUERY=459, 
		XMLROOT=460, XMLSERIALIZE=461, XMLTABLE=462, YEAR=463, YES=464, YMINTERVAL_UNCONSTRAINED=465, 
		ZONE=466, PREDICTION=467, PREDICTION_BOUNDS=468, PREDICTION_COST=469, 
		PREDICTION_DETAILS=470, PREDICTION_PROBABILITY=471, PREDICTION_SET=472, 
		CUME_DIST=473, DENSE_RANK=474, LISTAGG=475, PERCENT_RANK=476, PERCENTILE_CONT=477, 
		PERCENTILE_DISC=478, RANK=479, AVG=480, CORR=481, LAG=482, LEAD=483, MAX=484, 
		MEDIAN=485, MIN=486, NTILE=487, RATIO_TO_REPORT=488, ROW_NUMBER=489, SUM=490, 
		VARIANCE=491, REGR_=492, STDDEV=493, VAR_=494, COVAR_=495, PROMPT=496, 
		NATIONAL_CHAR_STRING_LIT=497, BIT_STRING_LIT=498, HEX_STRING_LIT=499, 
		DOUBLE_PERIOD=500, PERIOD=501, UNSIGNED_INTEGER=502, APPROXIMATE_NUM_LIT=503, 
		CHAR_STRING=504, DELIMITED_ID=505, PERCENT=506, AMPERSAND=507, LEFT_PAREN=508, 
		RIGHT_PAREN=509, DOUBLE_ASTERISK=510, ASTERISK=511, PLUS_SIGN=512, MINUS_SIGN=513, 
		COMMA=514, SOLIDUS=515, AT_SIGN=516, ASSIGN_OP=517, BINDVAR=518, COLON=519, 
		SEMICOLON=520, LESS_THAN_OR_EQUALS_OP=521, LESS_THAN_OP=522, GREATER_THAN_OR_EQUALS_OP=523, 
		NOT_EQUAL_OP=524, CARRET_OPERATOR_PART=525, TILDE_OPERATOR_PART=526, EXCLAMATION_OPERATOR_PART=527, 
		GREATER_THAN_OP=528, CONCATENATION_OP=529, VERTICAL_BAR=530, EQUALS_OP=531, 
		LEFT_BRACKET=532, RIGHT_BRACKET=533, INTRODUCER=534, SPACES=535, SINGLE_LINE_COMMENT=536, 
		MULTI_LINE_COMMENT=537, SQL92_RESERVED_ALL=538, SQL92_RESERVED_ALTER=539, 
		SQL92_RESERVED_AND=540, SQL92_RESERVED_ANY=541, SQL92_RESERVED_AS=542, 
		SQL92_RESERVED_ASC=543, SQL92_RESERVED_BEGIN=544, SQL92_RESERVED_BETWEEN=545, 
		SQL92_RESERVED_BY=546, SQL92_RESERVED_CASE=547, SQL92_RESERVED_CHECK=548, 
		PLSQL_RESERVED_CLUSTERS=549, PLSQL_RESERVED_COLAUTH=550, PLSQL_RESERVED_COMPRESS=551, 
		SQL92_RESERVED_CONNECT=552, PLSQL_NON_RESERVED_CONNECT_BY_ROOT=553, PLSQL_RESERVED_CRASH=554, 
		SQL92_RESERVED_CREATE=555, SQL92_RESERVED_CURRENT=556, SQL92_RESERVED_CURSOR=557, 
		SQL92_RESERVED_DATE=558, SQL92_RESERVED_DECLARE=559, SQL92_RESERVED_DEFAULT=560, 
		SQL92_RESERVED_DELETE=561, SQL92_RESERVED_DESC=562, SQL92_RESERVED_DISTINCT=563, 
		SQL92_RESERVED_DROP=564, SQL92_RESERVED_ELSE=565, SQL92_RESERVED_END=566, 
		SQL92_RESERVED_EXCEPTION=567, PLSQL_RESERVED_EXCLUSIVE=568, SQL92_RESERVED_EXISTS=569, 
		SQL92_RESERVED_FALSE=570, SQL92_RESERVED_FETCH=571, SQL92_RESERVED_FOR=572, 
		SQL92_RESERVED_FROM=573, SQL92_RESERVED_GOTO=574, SQL92_RESERVED_GRANT=575, 
		SQL92_RESERVED_GROUP=576, SQL92_RESERVED_HAVING=577, PLSQL_RESERVED_IDENTIFIED=578, 
		PLSQL_RESERVED_IF=579, SQL92_RESERVED_IN=580, PLSQL_RESERVED_INDEX=581, 
		PLSQL_RESERVED_INDEXES=582, SQL92_RESERVED_INSERT=583, SQL92_RESERVED_INTERSECT=584, 
		SQL92_RESERVED_INTO=585, SQL92_RESERVED_IS=586, SQL92_RESERVED_LIKE=587, 
		PLSQL_RESERVED_LOCK=588, PLSQL_RESERVED_MINUS=589, PLSQL_RESERVED_MODE=590, 
		PLSQL_RESERVED_NOCOMPRESS=591, SQL92_RESERVED_NOT=592, PLSQL_RESERVED_NOWAIT=593, 
		SQL92_RESERVED_NULL=594, SQL92_RESERVED_OF=595, SQL92_RESERVED_ON=596, 
		SQL92_RESERVED_OPTION=597, SQL92_RESERVED_OR=598, SQL92_RESERVED_ORDER=599, 
		SQL92_RESERVED_OVERLAPS=600, SQL92_RESERVED_PRIOR=601, SQL92_RESERVED_PROCEDURE=602, 
		SQL92_RESERVED_PUBLIC=603, PLSQL_RESERVED_RESOURCE=604, SQL92_RESERVED_REVOKE=605, 
		SQL92_RESERVED_SELECT=606, PLSQL_RESERVED_SHARE=607, SQL92_RESERVED_SIZE=608, 
		PLSQL_RESERVED_START=609, PLSQL_RESERVED_TABAUTH=610, SQL92_RESERVED_TABLE=611, 
		SQL92_RESERVED_THE=612, SQL92_RESERVED_THEN=613, SQL92_RESERVED_TO=614, 
		SQL92_RESERVED_TRUE=615, SQL92_RESERVED_UNION=616, SQL92_RESERVED_UNIQUE=617, 
		SQL92_RESERVED_UPDATE=618, SQL92_RESERVED_VALUES=619, SQL92_RESERVED_VIEW=620, 
		PLSQL_RESERVED_VIEWS=621, SQL92_RESERVED_WHEN=622, SQL92_RESERVED_WHERE=623, 
		SQL92_RESERVED_WITH=624, PLSQL_NON_RESERVED_USING=625, PLSQL_NON_RESERVED_MODEL=626, 
		PLSQL_NON_RESERVED_ELSIF=627, PLSQL_NON_RESERVED_PIVOT=628, PLSQL_NON_RESERVED_UNPIVOT=629, 
		REGULAR_ID=630, ZV=631;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_declare_wrapper = 4, RULE_is_or_as = 5, 
		RULE_drop_function = 6, RULE_alter_function = 7, RULE_create_function_body = 8, 
		RULE_function_spec = 9, RULE_parallel_enable_clause = 10, RULE_partition_by_clause = 11, 
		RULE_result_cache_clause = 12, RULE_relies_on_part = 13, RULE_streaming_clause = 14, 
		RULE_drop_package = 15, RULE_alter_package = 16, RULE_create_package = 17, 
		RULE_package_body = 18, RULE_package_spec = 19, RULE_package_obj_spec = 20, 
		RULE_package_obj_body = 21, RULE_drop_procedure = 22, RULE_alter_procedure = 23, 
		RULE_create_procedure_body = 24, RULE_procedure_spec = 25, RULE_drop_trigger = 26, 
		RULE_alter_trigger = 27, RULE_create_trigger = 28, RULE_trigger_follows_clause = 29, 
		RULE_trigger_when_clause = 30, RULE_simple_dml_trigger = 31, RULE_for_each_row = 32, 
		RULE_compound_dml_trigger = 33, RULE_non_dml_trigger = 34, RULE_trigger_body = 35, 
		RULE_routine_clause = 36, RULE_compound_trigger_block = 37, RULE_timing_point_section = 38, 
		RULE_non_dml_event = 39, RULE_dml_event_clause = 40, RULE_dml_event_element = 41, 
		RULE_dml_event_nested_clause = 42, RULE_referencing_clause = 43, RULE_referencing_element = 44, 
		RULE_drop_type = 45, RULE_alter_type = 46, RULE_compile_type_clause = 47, 
		RULE_replace_type_clause = 48, RULE_alter_method_spec = 49, RULE_alter_method_element = 50, 
		RULE_alter_attribute_definition = 51, RULE_attribute_definition = 52, 
		RULE_alter_collection_clauses = 53, RULE_dependent_handling_clause = 54, 
		RULE_dependent_exceptions_part = 55, RULE_create_type = 56, RULE_type_definition = 57, 
		RULE_object_type_def = 58, RULE_object_as_part = 59, RULE_object_under_part = 60, 
		RULE_nested_table_type_def = 61, RULE_sqlj_object_type = 62, RULE_type_body = 63, 
		RULE_type_body_elements = 64, RULE_map_order_func_declaration = 65, RULE_subprog_decl_in_type = 66, 
		RULE_proc_decl_in_type = 67, RULE_func_decl_in_type = 68, RULE_constructor_declaration = 69, 
		RULE_modifier_clause = 70, RULE_object_member_spec = 71, RULE_sqlj_object_type_attr = 72, 
		RULE_element_spec = 73, RULE_element_spec_options = 74, RULE_subprogram_spec = 75, 
		RULE_type_procedure_spec = 76, RULE_type_function_spec = 77, RULE_constructor_spec = 78, 
		RULE_map_order_function_spec = 79, RULE_pragma_clause = 80, RULE_pragma_elements = 81, 
		RULE_type_elements_parameter = 82, RULE_drop_sequence = 83, RULE_alter_sequence = 84, 
		RULE_create_sequence = 85, RULE_sequence_spec = 86, RULE_sequence_start_clause = 87, 
		RULE_invoker_rights_clause = 88, RULE_compiler_parameters_clause = 89, 
		RULE_call_spec = 90, RULE_java_spec = 91, RULE_c_spec = 92, RULE_c_agent_in_clause = 93, 
		RULE_c_parameters_clause = 94, RULE_parameter = 95, RULE_default_value_part = 96, 
		RULE_declare_spec = 97, RULE_variable_declaration = 98, RULE_subtype_declaration = 99, 
		RULE_cursor_declaration = 100, RULE_parameter_spec = 101, RULE_exception_declaration = 102, 
		RULE_pragma_declaration = 103, RULE_record_declaration = 104, RULE_record_type_dec = 105, 
		RULE_field_spec = 106, RULE_record_var_dec = 107, RULE_table_declaration = 108, 
		RULE_table_type_dec = 109, RULE_table_indexed_by_part = 110, RULE_varray_type_def = 111, 
		RULE_table_var_dec = 112, RULE_seq_of_statements = 113, RULE_label_declaration = 114, 
		RULE_statement = 115, RULE_assignment_statement = 116, RULE_continue_statement = 117, 
		RULE_exit_statement = 118, RULE_goto_statement = 119, RULE_if_statement = 120, 
		RULE_elsif_part = 121, RULE_else_part = 122, RULE_loop_statement = 123, 
		RULE_cursor_loop_param = 124, RULE_forall_statement = 125, RULE_bounds_clause = 126, 
		RULE_between_bound = 127, RULE_lower_bound = 128, RULE_upper_bound = 129, 
		RULE_null_statement = 130, RULE_raise_statement = 131, RULE_return_statement = 132, 
		RULE_function_call = 133, RULE_body = 134, RULE_collection_statement = 135, 
		RULE_pipe_row = 136, RULE_exception_clause = 137, RULE_exception_handler = 138, 
		RULE_trigger_block = 139, RULE_block = 140, RULE_sql_statement = 141, 
		RULE_execute_immediate = 142, RULE_dynamic_returning_clause = 143, RULE_data_manipulation_language_statements = 144, 
		RULE_cursor_manipulation_statements = 145, RULE_close_statement = 146, 
		RULE_open_statement = 147, RULE_fetch_statement = 148, RULE_open_for_statement = 149, 
		RULE_transaction_control_statements = 150, RULE_set_transaction_command = 151, 
		RULE_set_constraint_command = 152, RULE_commit_statement = 153, RULE_write_clause = 154, 
		RULE_rollback_statement = 155, RULE_savepoint_statement = 156, RULE_explain_statement = 157, 
		RULE_select_statement = 158, RULE_subquery_factoring_clause = 159, RULE_factoring_element = 160, 
		RULE_search_clause = 161, RULE_cycle_clause = 162, RULE_subquery = 163, 
		RULE_subquery_operation_part = 164, RULE_subquery_basic_elements = 165, 
		RULE_query_block = 166, RULE_selected_element = 167, RULE_from_clause = 168, 
		RULE_select_list_elements = 169, RULE_table_ref_list = 170, RULE_table_ref = 171, 
		RULE_table_ref_aux = 172, RULE_join_clause = 173, RULE_join_on_part = 174, 
		RULE_join_using_part = 175, RULE_outer_join_type = 176, RULE_query_partition_clause = 177, 
		RULE_flashback_query_clause = 178, RULE_pivot_clause = 179, RULE_pivot_element = 180, 
		RULE_pivot_for_clause = 181, RULE_pivot_in_clause = 182, RULE_pivot_in_clause_element = 183, 
		RULE_pivot_in_clause_elements = 184, RULE_unpivot_clause = 185, RULE_unpivot_in_clause = 186, 
		RULE_unpivot_in_elements = 187, RULE_hierarchical_query_clause = 188, 
		RULE_start_part = 189, RULE_group_by_clause = 190, RULE_group_by_elements = 191, 
		RULE_rollup_cube_clause = 192, RULE_grouping_sets_clause = 193, RULE_grouping_sets_elements = 194, 
		RULE_having_clause = 195, RULE_model_clause = 196, RULE_cell_reference_options = 197, 
		RULE_return_rows_clause = 198, RULE_reference_model = 199, RULE_main_model = 200, 
		RULE_model_column_clauses = 201, RULE_model_column_partition_part = 202, 
		RULE_model_column_list = 203, RULE_model_column = 204, RULE_model_rules_clause = 205, 
		RULE_model_rules_part = 206, RULE_model_rules_element = 207, RULE_cell_assignment = 208, 
		RULE_model_iterate_clause = 209, RULE_until_part = 210, RULE_order_by_clause = 211, 
		RULE_order_by_elements = 212, RULE_for_update_clause = 213, RULE_for_update_of_part = 214, 
		RULE_for_update_options = 215, RULE_update_statement = 216, RULE_update_set_clause = 217, 
		RULE_column_based_update_set_clause = 218, RULE_delete_statement = 219, 
		RULE_insert_statement = 220, RULE_single_table_insert = 221, RULE_multi_table_insert = 222, 
		RULE_multi_table_element = 223, RULE_conditional_insert_clause = 224, 
		RULE_conditional_insert_when_part = 225, RULE_conditional_insert_else_part = 226, 
		RULE_insert_into_clause = 227, RULE_values_clause = 228, RULE_merge_statement = 229, 
		RULE_merge_update_clause = 230, RULE_merge_element = 231, RULE_merge_update_delete_part = 232, 
		RULE_merge_insert_clause = 233, RULE_selected_tableview = 234, RULE_lock_table_statement = 235, 
		RULE_wait_nowait_part = 236, RULE_lock_table_element = 237, RULE_lock_mode = 238, 
		RULE_general_table_ref = 239, RULE_static_returning_clause = 240, RULE_error_logging_clause = 241, 
		RULE_error_logging_into_part = 242, RULE_error_logging_reject_part = 243, 
		RULE_dml_table_expression_clause = 244, RULE_table_collection_expression = 245, 
		RULE_subquery_restriction_clause = 246, RULE_sample_clause = 247, RULE_seed_part = 248, 
		RULE_cursor_expression = 249, RULE_sql_cursor_expression = 250, RULE_collection_assoc_expression = 251, 
		RULE_collection_type_expression = 252, RULE_expression_list = 253, RULE_condition = 254, 
		RULE_condition_wrapper = 255, RULE_expression = 256, RULE_expression_wrapper = 257, 
		RULE_logical_and_expression = 258, RULE_negated_expression = 259, RULE_equality_expression = 260, 
		RULE_multiset_part = 261, RULE_multiset_expression = 262, RULE_multiset_type = 263, 
		RULE_relational_expression = 264, RULE_compound_expression = 265, RULE_like_type = 266, 
		RULE_like_escape_part = 267, RULE_in_elements = 268, RULE_between_elements = 269, 
		RULE_concatenation = 270, RULE_concatenation_wrapper = 271, RULE_additive_expression = 272, 
		RULE_multiply_expression = 273, RULE_datetime_expression = 274, RULE_interval_expression = 275, 
		RULE_model_expression = 276, RULE_model_expression_element = 277, RULE_single_column_for_loop = 278, 
		RULE_for_like_part = 279, RULE_for_increment_decrement_type = 280, RULE_multi_column_for_loop = 281, 
		RULE_unary_expression = 282, RULE_case_statement = 283, RULE_simple_case_statement = 284, 
		RULE_simple_case_when_part = 285, RULE_searched_case_statement = 286, 
		RULE_searched_case_when_part = 287, RULE_case_else_part = 288, RULE_atom = 289, 
		RULE_expression_or_vector = 290, RULE_vector_expr = 291, RULE_quantified_expression = 292, 
		RULE_plsql_type_conversion = 293, RULE_sql_type_conversion = 294, RULE_xml_table_columns = 295, 
		RULE_xml_table = 296, RULE_standard_function = 297, RULE_over_clause_keyword = 298, 
		RULE_within_or_over_clause_keyword = 299, RULE_standard_prediction_function_keyword = 300, 
		RULE_over_clause = 301, RULE_windowing_clause = 302, RULE_windowing_type = 303, 
		RULE_windowing_elements = 304, RULE_using_clause = 305, RULE_using_element = 306, 
		RULE_collect_order_by_part = 307, RULE_within_or_over_part = 308, RULE_cost_matrix_clause = 309, 
		RULE_xml_passing_clause = 310, RULE_xml_attributes_clause = 311, RULE_xml_namespaces_clause = 312, 
		RULE_xml_table_column = 313, RULE_xml_general_default_part = 314, RULE_xml_multiuse_expression_element = 315, 
		RULE_xmlroot_param_version_part = 316, RULE_xmlroot_param_standalone_part = 317, 
		RULE_xmlserialize_param_enconding_part = 318, RULE_xmlserialize_param_version_part = 319, 
		RULE_xmlserialize_param_ident_part = 320, RULE_boolean_static_expression = 321, 
		RULE_preprocessor_internal_statement = 322, RULE_preprocessor_statement = 323, 
		RULE_partition_extension_clause = 324, RULE_column_alias = 325, RULE_table_alias = 326, 
		RULE_alias_quoted_string = 327, RULE_where_clause = 328, RULE_current_of_clause = 329, 
		RULE_into_clause_variable = 330, RULE_into_clause = 331, RULE_xml_column_name = 332, 
		RULE_cost_class_name = 333, RULE_attribute_name = 334, RULE_savepoint_name = 335, 
		RULE_rollback_segment_name = 336, RULE_table_var_name = 337, RULE_schema_name = 338, 
		RULE_routine_name = 339, RULE_package_name = 340, RULE_implementation_type_name = 341, 
		RULE_parameter_name = 342, RULE_reference_model_name = 343, RULE_main_model_name = 344, 
		RULE_aggregate_function_name = 345, RULE_query_name = 346, RULE_constraint_name = 347, 
		RULE_label_name = 348, RULE_type_name = 349, RULE_sequence_name = 350, 
		RULE_exception_name = 351, RULE_function_name = 352, RULE_procedure_name = 353, 
		RULE_trigger_name = 354, RULE_variable_name = 355, RULE_index_name = 356, 
		RULE_cursor_name = 357, RULE_record_name = 358, RULE_collection_name = 359, 
		RULE_link_name = 360, RULE_column_name = 361, RULE_tableview_name = 362, 
		RULE_char_set_name = 363, RULE_keep_clause = 364, RULE_function_argument = 365, 
		RULE_function_argument_analytic = 366, RULE_function_argument_modeling = 367, 
		RULE_respect_or_ignore_nulls = 368, RULE_argument = 369, RULE_type_spec = 370, 
		RULE_datatype = 371, RULE_precision_part = 372, RULE_native_datatype_element = 373, 
		RULE_bind_variable = 374, RULE_general_element = 375, RULE_general_element_part = 376, 
		RULE_table_element = 377, RULE_constant = 378, RULE_numeric = 379, RULE_quoted_string = 380, 
		RULE_id = 381, RULE_id_expression = 382, RULE_not_equal_op = 383, RULE_greater_than_or_equals_op = 384, 
		RULE_less_than_or_equals_op = 385, RULE_concatenation_op = 386, RULE_outer_join_sign = 387, 
		RULE_regular_id = 388;
	private static String[] makeRuleNames() {
		return new String[] {
			"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
			"declare_wrapper", "is_or_as", "drop_function", "alter_function", "create_function_body", 
			"function_spec", "parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
			"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
			"create_package", "package_body", "package_spec", "package_obj_spec", 
			"package_obj_body", "drop_procedure", "alter_procedure", "create_procedure_body", 
			"procedure_spec", "drop_trigger", "alter_trigger", "create_trigger", 
			"trigger_follows_clause", "trigger_when_clause", "simple_dml_trigger", 
			"for_each_row", "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
			"routine_clause", "compound_trigger_block", "timing_point_section", "non_dml_event", 
			"dml_event_clause", "dml_event_element", "dml_event_nested_clause", "referencing_clause", 
			"referencing_element", "drop_type", "alter_type", "compile_type_clause", 
			"replace_type_clause", "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
			"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
			"dependent_exceptions_part", "create_type", "type_definition", "object_type_def", 
			"object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type", 
			"type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
			"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
			"modifier_clause", "object_member_spec", "sqlj_object_type_attr", "element_spec", 
			"element_spec_options", "subprogram_spec", "type_procedure_spec", "type_function_spec", 
			"constructor_spec", "map_order_function_spec", "pragma_clause", "pragma_elements", 
			"type_elements_parameter", "drop_sequence", "alter_sequence", "create_sequence", 
			"sequence_spec", "sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause", 
			"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
			"parameter", "default_value_part", "declare_spec", "variable_declaration", 
			"subtype_declaration", "cursor_declaration", "parameter_spec", "exception_declaration", 
			"pragma_declaration", "record_declaration", "record_type_dec", "field_spec", 
			"record_var_dec", "table_declaration", "table_type_dec", "table_indexed_by_part", 
			"varray_type_def", "table_var_dec", "seq_of_statements", "label_declaration", 
			"statement", "assignment_statement", "continue_statement", "exit_statement", 
			"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
			"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
			"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
			"function_call", "body", "collection_statement", "pipe_row", "exception_clause", 
			"exception_handler", "trigger_block", "block", "sql_statement", "execute_immediate", 
			"dynamic_returning_clause", "data_manipulation_language_statements", 
			"cursor_manipulation_statements", "close_statement", "open_statement", 
			"fetch_statement", "open_for_statement", "transaction_control_statements", 
			"set_transaction_command", "set_constraint_command", "commit_statement", 
			"write_clause", "rollback_statement", "savepoint_statement", "explain_statement", 
			"select_statement", "subquery_factoring_clause", "factoring_element", 
			"search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
			"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
			"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
			"join_clause", "join_on_part", "join_using_part", "outer_join_type", 
			"query_partition_clause", "flashback_query_clause", "pivot_clause", "pivot_element", 
			"pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
			"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
			"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
			"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
			"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
			"model_column_clauses", "model_column_partition_part", "model_column_list", 
			"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
			"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
			"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
			"update_statement", "update_set_clause", "column_based_update_set_clause", 
			"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
			"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
			"conditional_insert_else_part", "insert_into_clause", "values_clause", 
			"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
			"merge_insert_clause", "selected_tableview", "lock_table_statement", 
			"wait_nowait_part", "lock_table_element", "lock_mode", "general_table_ref", 
			"static_returning_clause", "error_logging_clause", "error_logging_into_part", 
			"error_logging_reject_part", "dml_table_expression_clause", "table_collection_expression", 
			"subquery_restriction_clause", "sample_clause", "seed_part", "cursor_expression", 
			"sql_cursor_expression", "collection_assoc_expression", "collection_type_expression", 
			"expression_list", "condition", "condition_wrapper", "expression", "expression_wrapper", 
			"logical_and_expression", "negated_expression", "equality_expression", 
			"multiset_part", "multiset_expression", "multiset_type", "relational_expression", 
			"compound_expression", "like_type", "like_escape_part", "in_elements", 
			"between_elements", "concatenation", "concatenation_wrapper", "additive_expression", 
			"multiply_expression", "datetime_expression", "interval_expression", 
			"model_expression", "model_expression_element", "single_column_for_loop", 
			"for_like_part", "for_increment_decrement_type", "multi_column_for_loop", 
			"unary_expression", "case_statement", "simple_case_statement", "simple_case_when_part", 
			"searched_case_statement", "searched_case_when_part", "case_else_part", 
			"atom", "expression_or_vector", "vector_expr", "quantified_expression", 
			"plsql_type_conversion", "sql_type_conversion", "xml_table_columns", 
			"xml_table", "standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
			"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
			"windowing_type", "windowing_elements", "using_clause", "using_element", 
			"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
			"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
			"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
			"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
			"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "boolean_static_expression", 
			"preprocessor_internal_statement", "preprocessor_statement", "partition_extension_clause", 
			"column_alias", "table_alias", "alias_quoted_string", "where_clause", 
			"current_of_clause", "into_clause_variable", "into_clause", "xml_column_name", 
			"cost_class_name", "attribute_name", "savepoint_name", "rollback_segment_name", 
			"table_var_name", "schema_name", "routine_name", "package_name", "implementation_type_name", 
			"parameter_name", "reference_model_name", "main_model_name", "aggregate_function_name", 
			"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
			"exception_name", "function_name", "procedure_name", "trigger_name", 
			"variable_name", "index_name", "cursor_name", "record_name", "collection_name", 
			"link_name", "column_name", "tableview_name", "char_set_name", "keep_clause", 
			"function_argument", "function_argument_analytic", "function_argument_modeling", 
			"respect_or_ignore_nulls", "argument", "type_spec", "datatype", "precision_part", 
			"native_datatype_element", "bind_variable", "general_element", "general_element_part", 
			"table_element", "constant", "numeric", "quoted_string", "id", "id_expression", 
			"not_equal_op", "greater_than_or_equals_op", "less_than_or_equals_op", 
			"concatenation_op", "outer_join_sign", "regular_id"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'..'", null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, "'=>'", null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "'.'", null, null, 
			null, null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", 
			"','", "'/'", "'@'", "':='", null, "':'", "';'", "'<='", "'<'", "'>='", 
			null, "'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", "']'", 
			"'_'", null, null, null, "'all'", "'alter'", "'and'", "'any'", "'as'", 
			"'asc'", "'begin'", "'between'", "'by'", "'case'", "'check'", "'clusters'", 
			"'colauth'", "'compress'", "'connect'", "'connect_by_root'", "'crash'", 
			"'create'", "'current'", "'cursor'", "'date'", "'declare'", "'default'", 
			"'delete'", "'desc'", "'distinct'", "'drop'", "'else'", "'end'", "'exception'", 
			"'exclusive'", "'exists'", "'false'", "'fetch'", "'for'", "'from'", "'goto'", 
			"'grant'", "'group'", "'having'", "'identified'", "'if'", "'in'", "'index'", 
			"'indexes'", "'insert'", "'intersect'", "'into'", "'is'", "'like'", "'lock'", 
			"'minus'", "'mode'", "'nocompress'", "'not'", "'nowait'", "'null'", "'of'", 
			"'on'", "'option'", "'or'", "'order'", "'overlaps'", "'prior'", "'procedure'", 
			"'public'", "'resource'", "'revoke'", "'select'", "'share'", "'size'", 
			"'start'", "'tabauth'", "'table'", "'the'", "'then'", "'to'", "'true'", 
			"'union'", "'unique'", "'update'", "'values'", "'view'", "'views'", "'when'", 
			"'where'", "'with'", "'using'", "'model'", "'elsif'", "'pivot'", "'unpivot'", 
			null, "'@!'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, "PP_IF", "PP_THEN", "PP_ELSE", "PP_ELSIF", "PP_END", "PP_ERROR", 
			"A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", "ALL", "ALTER", "ANALYZE", 
			"AND", "ANY", "ARRAY", "AS", "ASC", "ASSOCIATE", "ASSOCIATION_OPERATOR", 
			"AT", "ATTRIBUTE", "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
			"BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT", 
			"BINARY_INTEGER", "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", 
			"BULK", "BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", 
			"CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB", 
			"CLOSE", "CLUSTER", "COLLECT", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
			"COMPATIBILITY", "COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", 
			"CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT", 
			"CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", "COST", "COUNT", 
			"CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
			"CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE", 
			"DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT", 
			"DEFAULT", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DEPTH", "DESC", 
			"DETERMINISTIC", "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
			"DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "ELEMENT", 
			"ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", "ENTITYESCAPING", 
			"ERRORS", "ESCAPE", "EXCEPT", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
			"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
			"EXTERNAL", "EXTEND", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FINAL", 
			"FIRST", "FIRST_VALUE", "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", 
			"FORCE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPING", 
			"HASH", "HAVING", "HIDE", "HOUR", "IF", "IGNORE", "IMMEDIATE", "IN", 
			"INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", 
			"INDICES", "INFINITE", "INLINE", "INNER", "INOUT", "INSERT", "INSTANTIABLE", 
			"INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", 
			"IS", "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", "LAST", 
			"LAST_VALUE", "LEADING", "LEFT", "LEVEL", "LIBRARY", "LIKE", "LIKE2", 
			"LIKE4", "LIKEC", "LIMIT", "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", 
			"LOGON", "LONG", "LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", "MEASURES", 
			"MEMBER", "MERGE", "MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MOD", 
			"MODE", "MODEL", "MODIFY", "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", 
			"NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEW", "NEXT", 
			"NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
			"NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", "NOT", 
			"NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", 
			"OF", "OFF", "OID", "OLD", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", 
			"ORDER", "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
			"PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING", 
			"PATH", "PERCENT_ISOPEN", "PERCENT_ROWTYPE", "PERCENT_TYPE", "PERCENT_FOUND", 
			"PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PIPELINED", "PIPE", "PIVOT", 
			"PLAN", "PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", 
			"PRECISION", "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", "RAW", 
			"READ", "REAL", "RECORD", "REF", "REFERENCE", "REFERENCING", "REJECT", 
			"RELIES_ON", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT", 
			"RESULT_CACHE", "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", 
			"RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", 
			"SAVE", "SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", 
			"SEED", "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", 
			"SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", 
			"SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
			"SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SPECIFICATION", 
			"SQLDATA", "SQLERROR", "SQL_PERCENT_ROWCOUNT", "STANDALONE", "START", 
			"STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", "STRING", 
			"SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", 
			"SUSPEND", "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
			"TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", 
			"TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TO", "TO_CHAR", 
			"TO_NUMBER", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", 
			"TRIM", "TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", 
			"UNLIMITED", "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", "UROWID", 
			"USE", "USING", "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", 
			"VARIABLE", "VARRAY", "VARYING", "VERSION", "VERSIONS", "WAIT", "WARNING", 
			"WELLFORMED", "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", 
			"WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
			"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", 
			"XMLPI", "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", 
			"YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
			"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
			"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "RANK", "AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", 
			"MIN", "NTILE", "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", "REGR_", 
			"STDDEV", "VAR_", "COVAR_", "PROMPT", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", 
			"HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
			"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", 
			"RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", 
			"COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", 
			"LESS_THAN_OR_EQUALS_OP", "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", 
			"NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
			"GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
			"SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", 
			"SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
			"SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "PLSQL_RESERVED_CLUSTERS", 
			"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT", 
			"PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_RESERVED_CRASH", "SQL92_RESERVED_CREATE", 
			"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
			"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
			"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
			"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
			"PLSQL_RESERVED_EXCLUSIVE", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", 
			"SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", 
			"SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", 
			"SQL92_RESERVED_HAVING", "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", 
			"SQL92_RESERVED_IN", "PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", 
			"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
			"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
			"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT", 
			"PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", 
			"SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", 
			"SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", 
			"SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", "SQL92_RESERVED_REVOKE", 
			"SQL92_RESERVED_SELECT", "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE", 
			"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE", 
			"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
			"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
			"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS", 
			"SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", 
			"PLSQL_NON_RESERVED_USING", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF", 
			"PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "REGULAR_ID", 
			"ZV"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PlSql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSwallow_to_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(779); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(778);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(781); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -1L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -1L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -257L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & 72057594037927935L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompilation_unit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || _la==BEGIN || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 288230410545266689L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 9007199288295425L) != 0) || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(783);
				unit_statement();
				}
				}
				setState(788);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(789);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_scriptContext extends ParserRuleContext {
		public List<Preprocessor_statementContext> preprocessor_statement() {
			return getRuleContexts(Preprocessor_statementContext.class);
		}
		public Preprocessor_statementContext preprocessor_statement(int i) {
			return getRuleContext(Preprocessor_statementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public TerminalNode SPACES() { return getToken(PlSqlParser.SPACES, 0); }
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294983684L) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 288230410545266689L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 9007199288295425L) != 0) || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				setState(803);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALTER:
				case BEGIN:
				case CREATE:
				case DECLARE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case FUNCTION:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					{
					setState(791);
					unit_statement();
					setState(796);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(792);
							match(SEMICOLON);
							setState(793);
							unit_statement();
							}
							} 
						}
						setState(798);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
					}
					setState(800);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						setState(799);
						match(SEMICOLON);
						}
						break;
					}
					}
					}
					break;
				case PP_IF:
					{
					setState(802);
					preprocessor_statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EOF || _la==SEMICOLON || _la==SPACES) {
				{
				setState(808);
				_la = _input.LA(1);
				if ( !(_la==EOF || _la==SEMICOLON || _la==SPACES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode SOLIDUS() { return getToken(PlSqlParser.SOLIDUS, 0); }
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(811);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(812);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(813);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(814);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(815);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(816);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(817);
				create_function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(818);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(819);
				create_package();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(820);
				create_sequence();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(821);
				create_trigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(822);
				create_type();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(823);
				drop_function();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(824);
				drop_package();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(825);
				drop_procedure();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(826);
				drop_sequence();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(827);
				drop_trigger();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(828);
				drop_type();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(829);
				data_manipulation_language_statements();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(830);
				block();
				setState(831);
				match(SEMICOLON);
				setState(832);
				match(SOLIDUS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Declare_wrapperContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Declare_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDeclare_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDeclare_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDeclare_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_wrapperContext declare_wrapper() throws RecognitionException {
		Declare_wrapperContext _localctx = new Declare_wrapperContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_declare_wrapper);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(836);
			match(DECLARE);
			setState(840);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(837);
					declare_spec();
					}
					} 
				}
				setState(842);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Is_or_asContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Is_or_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_or_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIs_or_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIs_or_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIs_or_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Is_or_asContext is_or_as() throws RecognitionException {
		Is_or_asContext _localctx = new Is_or_asContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_is_or_as);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(843);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(845);
			match(DROP);
			setState(846);
			match(FUNCTION);
			setState(847);
			function_name();
			setState(848);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(850);
			match(ALTER);
			setState(851);
			match(FUNCTION);
			setState(852);
			function_name();
			setState(853);
			match(COMPILE);
			setState(855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(854);
				match(DEBUG);
				}
				break;
			}
			setState(860);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(857);
					compiler_parameters_clause();
					}
					} 
				}
				setState(862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,10,_ctx);
			}
			setState(865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(863);
				match(REUSE);
				setState(864);
				match(SETTINGS);
				}
			}

			setState(867);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_function_bodyContext extends ParserRuleContext {
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(869);
				match(CREATE);
				setState(872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(870);
					match(OR);
					setState(871);
					match(REPLACE);
					}
				}

				}
			}

			setState(876);
			function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public List<TerminalNode> PIPELINED() { return getTokens(PlSqlParser.PIPELINED); }
		public TerminalNode PIPELINED(int i) {
			return getToken(PlSqlParser.PIPELINED, i);
		}
		public List<TerminalNode> AGGREGATE() { return getTokens(PlSqlParser.AGGREGATE); }
		public TerminalNode AGGREGATE(int i) {
			return getToken(PlSqlParser.AGGREGATE, i);
		}
		public List<TerminalNode> USING() { return getTokens(PlSqlParser.USING); }
		public TerminalNode USING(int i) {
			return getToken(PlSqlParser.USING, i);
		}
		public List<Implementation_type_nameContext> implementation_type_name() {
			return getRuleContexts(Implementation_type_nameContext.class);
		}
		public Implementation_type_nameContext implementation_type_name(int i) {
			return getRuleContext(Implementation_type_nameContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_function_spec);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(878);
			match(FUNCTION);
			setState(879);
			function_name();
			setState(891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(880);
				match(LEFT_PAREN);
				setState(881);
				parameter();
				setState(886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(882);
					match(COMMA);
					setState(883);
					parameter();
					}
					}
					setState(888);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(889);
				match(RIGHT_PAREN);
				}
			}

			setState(893);
			match(RETURN);
			setState(894);
			type_spec();
			setState(905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AGGREGATE || _la==AUTHID || _la==DETERMINISTIC || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & 2199023259649L) != 0)) {
				{
				setState(903);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(895);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(896);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(897);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(898);
					match(DETERMINISTIC);
					}
					break;
				case PIPELINED:
					{
					setState(899);
					match(PIPELINED);
					}
					break;
				case AGGREGATE:
					{
					setState(900);
					match(AGGREGATE);
					setState(901);
					match(USING);
					setState(902);
					implementation_type_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(907);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(908);
				is_or_as();
				setState(917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					setState(912);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(909);
							declare_spec();
							}
							} 
						}
						setState(914);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
					}
					setState(915);
					body();
					}
					break;
				case 2:
					{
					setState(916);
					call_spec();
					}
					break;
				}
				}
			}

			setState(921);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParallel_enable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParallel_enable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(923);
			match(PARALLEL_ENABLE);
			setState(925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(924);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_by_clauseContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPartition_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPartition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(927);
			match(LEFT_PAREN);
			setState(928);
			match(PARTITION);
			setState(929);
			expression();
			setState(930);
			match(BY);
			setState(944);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(931);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(932);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(933);
				match(LEFT_PAREN);
				setState(934);
				column_name();
				setState(939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(935);
					match(COMMA);
					setState(936);
					column_name();
					}
					}
					setState(941);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(942);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(946);
				streaming_clause();
				}
			}

			setState(949);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitResult_cache_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitResult_cache_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(951);
			match(RESULT_CACHE);
			setState(953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(952);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRelies_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRelies_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(955);
			match(RELIES_ON);
			setState(956);
			match(LEFT_PAREN);
			setState(957);
			tableview_name();
			setState(962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(958);
				match(COMMA);
				setState(959);
				tableview_name();
				}
				}
				setState(964);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(965);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStreaming_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStreaming_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(967);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(968);
			expression();
			setState(969);
			match(BY);
			setState(970);
			match(LEFT_PAREN);
			setState(971);
			column_name();
			setState(976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(972);
				match(COMMA);
				setState(973);
				column_name();
				}
				}
				setState(978);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(979);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(981);
			match(DROP);
			setState(982);
			match(PACKAGE);
			setState(984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(983);
				match(BODY);
				}
				break;
			}
			setState(986);
			package_name();
			setState(987);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(PlSqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(PlSqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(989);
			match(ALTER);
			setState(990);
			match(PACKAGE);
			setState(991);
			package_name();
			setState(992);
			match(COMPILE);
			setState(994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(993);
				match(DEBUG);
				}
				break;
			}
			setState(997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(996);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1002);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(999);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1004);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			}
			setState(1007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1005);
				match(REUSE);
				setState(1006);
				match(SETTINGS);
				}
			}

			setState(1009);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode SOLIDUS() { return getToken(PlSqlParser.SOLIDUS, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1011);
			match(CREATE);
			setState(1014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1012);
				match(OR);
				setState(1013);
				match(REPLACE);
				}
			}

			setState(1016);
			match(PACKAGE);
			setState(1019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				setState(1017);
				package_spec();
				}
				break;
			case 2:
				{
				setState(1018);
				package_body();
				}
				break;
			}
			setState(1021);
			match(SEMICOLON);
			setState(1022);
			match(SOLIDUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_package_body);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1024);
			match(BODY);
			setState(1025);
			package_name();
			setState(1026);
			is_or_as();
			setState(1030);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1027);
					package_obj_body();
					}
					} 
				}
				setState(1032);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,35,_ctx);
			}
			setState(1035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BEGIN) {
				{
				setState(1033);
				match(BEGIN);
				setState(1034);
				seq_of_statements();
				}
			}

			setState(1038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(1037);
				exception_clause();
				}
			}

			setState(1040);
			match(END);
			setState(1042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 144396663052566527L) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1041);
				package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_package_spec);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1044);
			package_name();
			setState(1046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1045);
				invoker_rights_clause();
				}
			}

			setState(1048);
			is_or_as();
			setState(1052);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1049);
					package_obj_spec();
					}
					} 
				}
				setState(1054);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			setState(1055);
			match(END);
			setState(1057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 144396663052566527L) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1056);
				package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_obj_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_obj_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_package_obj_spec);
		try {
			setState(1069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1059);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1060);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1061);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1062);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1063);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1064);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1065);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1066);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1067);
				function_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1068);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_obj_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_obj_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_package_obj_body);
		try {
			setState(1081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1071);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1072);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1073);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1074);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1075);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1076);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1077);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1078);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1079);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1080);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1083);
			match(DROP);
			setState(1084);
			match(PROCEDURE);
			setState(1085);
			procedure_name();
			setState(1086);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1088);
			match(ALTER);
			setState(1089);
			match(PROCEDURE);
			setState(1090);
			procedure_name();
			setState(1091);
			match(COMPILE);
			setState(1093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				setState(1092);
				match(DEBUG);
				}
				break;
			}
			setState(1098);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,45,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1095);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1100);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,45,_ctx);
			}
			setState(1103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1101);
				match(REUSE);
				setState(1102);
				match(SETTINGS);
				}
			}

			setState(1105);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1107);
				match(CREATE);
				setState(1110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1108);
					match(OR);
					setState(1109);
					match(REPLACE);
					}
				}

				}
			}

			setState(1114);
			procedure_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProcedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProcedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_procedure_spec);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1116);
			match(PROCEDURE);
			setState(1117);
			procedure_name();
			setState(1129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1118);
				match(LEFT_PAREN);
				setState(1119);
				parameter();
				setState(1124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1120);
					match(COMMA);
					setState(1121);
					parameter();
					}
					}
					setState(1126);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1127);
				match(RIGHT_PAREN);
				}
			}

			setState(1146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS) {
				{
				setState(1132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHID) {
					{
					setState(1131);
					invoker_rights_clause();
					}
				}

				setState(1134);
				is_or_as();
				setState(1144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					setState(1138);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1135);
							declare_spec();
							}
							} 
						}
						setState(1140);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
					}
					setState(1141);
					body();
					}
					break;
				case 2:
					{
					setState(1142);
					call_spec();
					}
					break;
				case 3:
					{
					setState(1143);
					match(EXTERNAL);
					}
					break;
				}
				}
			}

			setState(1148);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1150);
			match(DROP);
			setState(1151);
			match(TRIGGER);
			setState(1152);
			trigger_name();
			setState(1153);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1155);
			match(ALTER);
			setState(1156);
			match(TRIGGER);
			setState(1157);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1176);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1158);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1159);
				match(RENAME);
				setState(1160);
				match(TO);
				setState(1161);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1162);
				match(COMPILE);
				setState(1164);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1163);
					match(DEBUG);
					}
					break;
				}
				setState(1169);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1166);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1171);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
				}
				setState(1174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1172);
					match(REUSE);
					setState(1173);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1178);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1180);
			match(CREATE);
			setState(1183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1181);
				match(OR);
				setState(1182);
				match(REPLACE);
				}
			}

			setState(1185);
			match(TRIGGER);
			setState(1186);
			trigger_name();
			setState(1190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1187);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1188);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1189);
				non_dml_trigger();
				}
				break;
			}
			setState(1193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOLLOWS) {
				{
				setState(1192);
				trigger_follows_clause();
				}
			}

			setState(1196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1195);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1198);
				trigger_when_clause();
				}
			}

			setState(1201);
			trigger_body();
			setState(1202);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_follows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_follows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1204);
			match(FOLLOWS);
			setState(1205);
			trigger_name();
			setState(1210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1206);
				match(COMMA);
				setState(1207);
				trigger_name();
				}
				}
				setState(1212);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1213);
			match(WHEN);
			setState(1214);
			match(LEFT_PAREN);
			setState(1215);
			condition();
			setState(1216);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1222);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1218);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1219);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1220);
				match(INSTEAD);
				setState(1221);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1224);
			dml_event_clause();
			setState(1226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REFERENCING) {
				{
				setState(1225);
				referencing_clause();
				}
			}

			setState(1229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1228);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_each_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1231);
			match(FOR);
			setState(1232);
			match(EACH);
			setState(1233);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_compound_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1235);
			match(FOR);
			setState(1236);
			dml_event_clause();
			setState(1238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REFERENCING) {
				{
				setState(1237);
				referencing_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNon_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNon_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1240);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1241);
			non_dml_event();
			setState(1246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1242);
				match(OR);
				setState(1243);
				non_dml_event();
				}
				}
				setState(1248);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1249);
			match(ON);
			setState(1257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(1250);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					setState(1251);
					schema_name();
					setState(1252);
					match(PERIOD);
					}
					break;
				}
				setState(1256);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_trigger_body);
		try {
			setState(1264);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPOUND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1259);
				match(COMPOUND);
				setState(1260);
				match(TRIGGER);
				}
				break;
			case CALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1261);
				match(CALL);
				setState(1262);
				id();
				}
				break;
			case BEGIN:
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1263);
				trigger_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRoutine_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRoutine_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1266);
			routine_name();
			setState(1268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1267);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_trigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_trigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1270);
			match(COMPOUND);
			setState(1271);
			match(TRIGGER);
			setState(1275);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1272);
					declare_spec();
					}
					} 
				}
				setState(1277);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			setState(1279); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1278);
				timing_point_section();
				}
				}
				setState(1281); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1283);
			match(END);
			setState(1284);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(PlSqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(PlSqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(PlSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(PlSqlParser.BEFORE, i);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public List<TerminalNode> EACH() { return getTokens(PlSqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(PlSqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(PlSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PlSqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(PlSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(PlSqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTiming_point_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTiming_point_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_timing_point_section);
		try {
			setState(1322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1286);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1287);
				match(STATEMENT);
				setState(1288);
				match(IS);
				setState(1289);
				trigger_block();
				setState(1290);
				match(BEFORE);
				setState(1291);
				match(STATEMENT);
				setState(1292);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1294);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1295);
				match(EACH);
				setState(1296);
				match(ROW);
				setState(1297);
				match(IS);
				setState(1298);
				trigger_block();
				setState(1299);
				match(BEFORE);
				setState(1300);
				match(EACH);
				setState(1301);
				match(ROW);
				setState(1302);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1304);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1305);
				match(STATEMENT);
				setState(1306);
				match(IS);
				setState(1307);
				trigger_block();
				setState(1308);
				match(AFTER);
				setState(1309);
				match(STATEMENT);
				setState(1310);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1312);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1313);
				match(EACH);
				setState(1314);
				match(ROW);
				setState(1315);
				match(IS);
				setState(1316);
				trigger_block();
				setState(1317);
				match(AFTER);
				setState(1318);
				match(EACH);
				setState(1319);
				match(ROW);
				setState(1320);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNon_dml_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNon_dml_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_non_dml_event);
		try {
			setState(1350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1324);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1325);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1326);
				match(ASSOCIATE);
				setState(1327);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1328);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1329);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1330);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1331);
				match(DISASSOCIATE);
				setState(1332);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1333);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1334);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1335);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1336);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1337);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1338);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1339);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1340);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1341);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1342);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1343);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1344);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1345);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1346);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1347);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1348);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1349);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1352);
			dml_event_element();
			setState(1357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1353);
				match(OR);
				setState(1354);
				dml_event_element();
				}
				}
				setState(1359);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1360);
			match(ON);
			setState(1362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(1361);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1364);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1366);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1367);
				match(OF);
				setState(1368);
				column_name();
				setState(1373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1369);
					match(COMMA);
					setState(1370);
					column_name();
					}
					}
					setState(1375);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_nested_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_nested_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1378);
			match(NESTED);
			setState(1379);
			match(TABLE);
			setState(1380);
			tableview_name();
			setState(1381);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReferencing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReferencing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referencing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1383);
			match(REFERENCING);
			setState(1385); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1384);
				referencing_element();
				}
				}
				setState(1387); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & 2199040032769L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReferencing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReferencing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1389);
			_la = _input.LA(1);
			if ( !(((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & 2199040032769L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1390);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1392);
			match(DROP);
			setState(1393);
			match(TYPE);
			setState(1395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1394);
				match(BODY);
				}
				break;
			}
			setState(1397);
			type_name();
			setState(1399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1398);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1401);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1403);
			match(ALTER);
			setState(1404);
			match(TYPE);
			setState(1405);
			type_name();
			setState(1411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1406);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1407);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1408);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1409);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1410);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1413);
				dependent_handling_clause();
				}
			}

			setState(1416);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompile_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompile_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1418);
			match(COMPILE);
			setState(1420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1419);
				match(DEBUG);
				}
				break;
			}
			setState(1423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1422);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1428);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1425);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1430);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
			}
			setState(1433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1431);
				match(REUSE);
				setState(1432);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReplace_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReplace_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			match(REPLACE);
			setState(1437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1436);
				invoker_rights_clause();
				}
			}

			setState(1439);
			match(AS);
			setState(1440);
			match(OBJECT);
			setState(1441);
			match(LEFT_PAREN);
			setState(1442);
			object_member_spec();
			setState(1447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1443);
				match(COMMA);
				setState(1444);
				object_member_spec();
				}
				}
				setState(1449);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1450);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_method_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_method_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1452);
			alter_method_element();
			setState(1457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1453);
				match(COMMA);
				setState(1454);
				alter_method_element();
				}
				}
				setState(1459);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_method_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_method_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1460);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1463);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1461);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1462);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_attribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1465);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1466);
			match(ATTRIBUTE);
			setState(1479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1467);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1468);
				match(LEFT_PAREN);
				setState(1469);
				attribute_definition();
				setState(1474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1470);
					match(COMMA);
					setState(1471);
					attribute_definition();
					}
					}
					setState(1476);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1477);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAttribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1481);
			attribute_name();
			setState(1483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 144396663052566527L) != 0) || _la==REGULAR_ID) {
				{
				setState(1482);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_collection_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1485);
			match(MODIFY);
			setState(1491);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1486);
				match(LIMIT);
				setState(1487);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1488);
				match(ELEMENT);
				setState(1489);
				match(TYPE);
				setState(1490);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDependent_handling_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1493);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1494);
				match(CASCADE);
				setState(1504);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1495);
					match(CONVERT);
					setState(1496);
					match(TO);
					setState(1497);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1499);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1498);
						match(NOT);
						}
					}

					setState(1501);
					match(INCLUDING);
					setState(1502);
					match(TABLE);
					setState(1503);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				setState(1507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1506);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDependent_exceptions_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1511);
				match(FORCE);
				}
			}

			setState(1514);
			match(EXCEPTIONS);
			setState(1515);
			match(INTO);
			setState(1516);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1518);
			match(CREATE);
			setState(1521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1519);
				match(OR);
				setState(1520);
				match(REPLACE);
				}
			}

			setState(1523);
			match(TYPE);
			setState(1526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1524);
				type_definition();
				}
				break;
			case 2:
				{
				setState(1525);
				type_body();
				}
				break;
			}
			setState(1528);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1530);
			type_name();
			setState(1533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1531);
				match(OID);
				setState(1532);
				match(CHAR_STRING);
				}
			}

			setState(1536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1535);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1538);
				invoker_rights_clause();
				}
			}

			setState(1543);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1541);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1542);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1545);
				sqlj_object_type();
				}
			}

			setState(1559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1548);
				match(LEFT_PAREN);
				setState(1549);
				object_member_spec();
				setState(1554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1550);
					match(COMMA);
					setState(1551);
					object_member_spec();
					}
					}
					setState(1556);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1557);
				match(RIGHT_PAREN);
				}
			}

			setState(1564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1561);
				modifier_clause();
				}
				}
				setState(1566);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_as_partContext extends ParserRuleContext {
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_as_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_object_as_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567);
			is_or_as();
			setState(1571);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1568);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1569);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1570);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_under_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1573);
			match(UNDER);
			setState(1574);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNested_table_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1576);
			match(TABLE);
			setState(1577);
			match(OF);
			setState(1578);
			type_spec();
			setState(1581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(1579);
				match(NOT);
				setState(1580);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSqlj_object_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1583);
			match(EXTERNAL);
			setState(1584);
			match(NAME);
			setState(1585);
			expression();
			setState(1586);
			match(LANGUAGE);
			setState(1587);
			match(JAVA);
			setState(1588);
			match(USING);
			setState(1589);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1591);
			match(BODY);
			setState(1592);
			type_name();
			setState(1593);
			is_or_as();
			setState(1595); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1594);
				type_body_elements();
				}
				}
				setState(1597); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & 72057594037927953L) != 0) || _la==STATIC );
			setState(1599);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_body_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_type_body_elements);
		try {
			setState(1603);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1601);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1602);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMap_order_func_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1605);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1606);
			match(MEMBER);
			setState(1607);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubprog_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1609);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1613);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1610);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1611);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1612);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_proc_decl_in_type);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1615);
			match(PROCEDURE);
			setState(1616);
			procedure_name();
			setState(1617);
			match(LEFT_PAREN);
			setState(1618);
			type_elements_parameter();
			setState(1623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1619);
				match(COMMA);
				setState(1620);
				type_elements_parameter();
				}
				}
				setState(1625);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1626);
			match(RIGHT_PAREN);
			setState(1627);
			is_or_as();
			setState(1638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(1628);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1632);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1629);
						declare_spec();
						}
						} 
					}
					setState(1634);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
				}
				setState(1635);
				body();
				setState(1636);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_func_decl_in_type);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1640);
			match(FUNCTION);
			setState(1641);
			function_name();
			setState(1653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1642);
				match(LEFT_PAREN);
				setState(1643);
				type_elements_parameter();
				setState(1648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1644);
					match(COMMA);
					setState(1645);
					type_elements_parameter();
					}
					}
					setState(1650);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1651);
				match(RIGHT_PAREN);
				}
			}

			setState(1655);
			match(RETURN);
			setState(1656);
			type_spec();
			setState(1657);
			is_or_as();
			setState(1668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(1658);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1662);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,124,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1659);
						declare_spec();
						}
						} 
					}
					setState(1664);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,124,_ctx);
				}
				setState(1665);
				body();
				setState(1666);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_constructor_declaration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1670);
				match(FINAL);
				}
			}

			setState(1674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1673);
				match(INSTANTIABLE);
				}
			}

			setState(1676);
			match(CONSTRUCTOR);
			setState(1677);
			match(FUNCTION);
			setState(1678);
			type_spec();
			setState(1696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1679);
				match(LEFT_PAREN);
				{
				setState(1680);
				match(SELF);
				setState(1681);
				match(IN);
				setState(1682);
				match(OUT);
				setState(1683);
				type_spec();
				setState(1684);
				match(COMMA);
				}
				setState(1686);
				type_elements_parameter();
				setState(1691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1687);
					match(COMMA);
					setState(1688);
					type_elements_parameter();
					}
					}
					setState(1693);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1694);
				match(RIGHT_PAREN);
				}
			}

			setState(1698);
			match(RETURN);
			setState(1699);
			match(SELF);
			setState(1700);
			match(AS);
			setState(1701);
			match(RESULT);
			setState(1702);
			is_or_as();
			setState(1713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1703);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1707);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1704);
						declare_spec();
						}
						} 
					}
					setState(1709);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
				}
				setState(1710);
				body();
				setState(1711);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModifier_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1715);
				match(NOT);
				}
			}

			setState(1718);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_member_specContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_member_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_object_member_spec);
		int _la;
		try {
			setState(1726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1720);
				id();
				setState(1721);
				type_spec();
				setState(1723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1722);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1725);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSqlj_object_type_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1728);
			match(EXTERNAL);
			setState(1729);
			match(NAME);
			setState(1730);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElement_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(1732);
				modifier_clause();
				}
				break;
			}
			setState(1736); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1735);
				element_spec_options();
				}
				}
				setState(1738); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & 72057594037927953L) != 0) || _la==STATIC );
			setState(1742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1740);
				match(COMMA);
				setState(1741);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElement_spec_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_element_spec_options);
		try {
			setState(1747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1744);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1745);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1746);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubprogram_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1749);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1750);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1751);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_procedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			match(PROCEDURE);
			setState(1755);
			procedure_name();
			setState(1756);
			match(LEFT_PAREN);
			setState(1757);
			type_elements_parameter();
			setState(1762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1758);
				match(COMMA);
				setState(1759);
				type_elements_parameter();
				}
				}
				setState(1764);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1765);
			match(RIGHT_PAREN);
			setState(1769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1766);
				is_or_as();
				setState(1767);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1771);
			match(FUNCTION);
			setState(1772);
			function_name();
			setState(1784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1773);
				match(LEFT_PAREN);
				setState(1774);
				type_elements_parameter();
				setState(1779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1775);
					match(COMMA);
					setState(1776);
					type_elements_parameter();
					}
					}
					setState(1781);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1782);
				match(RIGHT_PAREN);
				}
			}

			setState(1786);
			match(RETURN);
			setState(1791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(1787);
				type_spec();
				}
				break;
			case 2:
				{
				setState(1788);
				match(SELF);
				setState(1789);
				match(AS);
				setState(1790);
				match(RESULT);
				}
				break;
			}
			setState(1802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1793);
				is_or_as();
				setState(1794);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(1796);
				match(EXTERNAL);
				setState(1798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(1797);
					match(VARIABLE);
					}
				}

				setState(1800);
				match(NAME);
				setState(1801);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstructor_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1804);
				match(FINAL);
				}
			}

			setState(1808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1807);
				match(INSTANTIABLE);
				}
			}

			setState(1810);
			match(CONSTRUCTOR);
			setState(1811);
			match(FUNCTION);
			setState(1812);
			type_spec();
			setState(1830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1813);
				match(LEFT_PAREN);
				{
				setState(1814);
				match(SELF);
				setState(1815);
				match(IN);
				setState(1816);
				match(OUT);
				setState(1817);
				type_spec();
				setState(1818);
				match(COMMA);
				}
				setState(1820);
				type_elements_parameter();
				setState(1825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1821);
					match(COMMA);
					setState(1822);
					type_elements_parameter();
					}
					}
					setState(1827);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1828);
				match(RIGHT_PAREN);
				}
			}

			setState(1832);
			match(RETURN);
			setState(1833);
			match(SELF);
			setState(1834);
			match(AS);
			setState(1835);
			match(RESULT);
			setState(1839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1836);
				is_or_as();
				setState(1837);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMap_order_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1841);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1842);
			match(MEMBER);
			setState(1843);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1845);
			match(PRAGMA);
			setState(1846);
			match(RESTRICT_REFERENCES);
			setState(1847);
			match(LEFT_PAREN);
			setState(1848);
			pragma_elements();
			setState(1853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1849);
				match(COMMA);
				setState(1850);
				pragma_elements();
				}
				}
				setState(1855);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1856);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_pragma_elements);
		try {
			setState(1860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1858);
				id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1859);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_elements_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_elements_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			parameter_name();
			setState(1863);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1865);
			match(DROP);
			setState(1866);
			match(SEQUENCE);
			setState(1867);
			sequence_name();
			setState(1868);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			match(ALTER);
			setState(1871);
			match(SEQUENCE);
			setState(1872);
			sequence_name();
			setState(1874); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1873);
				sequence_spec();
				}
				}
				setState(1876); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || ((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & 18295873486192641L) != 0) || ((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & 134217909L) != 0) );
			setState(1878);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1880);
			match(CREATE);
			setState(1881);
			match(SEQUENCE);
			setState(1882);
			sequence_name();
			setState(1887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & 18295873486192641L) != 0) || ((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & 134217909L) != 0) || _la==START) {
				{
				setState(1885);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(1883);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(1884);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1889);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1890);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_sequence_spec);
		try {
			setState(1908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1892);
				match(INCREMENT);
				setState(1893);
				match(BY);
				setState(1894);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1895);
				match(MAXVALUE);
				setState(1896);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1897);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1898);
				match(MINVALUE);
				setState(1899);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1900);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1901);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1902);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1903);
				match(CACHE);
				setState(1904);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(1905);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(1906);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(1907);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_start_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1910);
			match(START);
			setState(1911);
			match(WITH);
			setState(1912);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInvoker_rights_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1914);
			match(AUTHID);
			setState(1915);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompiler_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1917);
			id();
			setState(1918);
			match(EQUALS_OP);
			setState(1919);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCall_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1921);
			match(LANGUAGE);
			setState(1924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(1922);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(1923);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJava_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1926);
			match(JAVA);
			setState(1927);
			match(NAME);
			setState(1928);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1930);
			match(C_LETTER);
			setState(1933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(1931);
				match(NAME);
				setState(1932);
				match(CHAR_STRING);
				}
			}

			setState(1935);
			match(LIBRARY);
			setState(1936);
			id();
			setState(1938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(1937);
				c_agent_in_clause();
				}
			}

			setState(1942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1940);
				match(WITH);
				setState(1941);
				match(CONTEXT);
				}
			}

			setState(1945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(1944);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_agent_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1947);
			match(AGENT);
			setState(1948);
			match(IN);
			setState(1949);
			match(LEFT_PAREN);
			setState(1950);
			expression();
			setState(1955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1951);
				match(COMMA);
				setState(1952);
				expression();
				}
				}
				setState(1957);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1958);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1960);
			match(PARAMETERS);
			setState(1961);
			match(LEFT_PAREN);
			setState(1973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1962);
				expression();
				setState(1967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1963);
					match(COMMA);
					setState(1964);
					expression();
					}
					}
					setState(1969);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(1970);
				match(PERIOD);
				setState(1971);
				match(PERIOD);
				setState(1972);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1975);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PlSqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(PlSqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(PlSqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(PlSqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(PlSqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(PlSqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(PlSqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1977);
			parameter_name();
			setState(1981);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1978);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(1983);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			}
			setState(1985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(1984);
				type_spec();
				}
				break;
			}
			setState(1988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(1987);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1990);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1991);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_declare_spec);
		try {
			setState(2003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1993);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1994);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1995);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1996);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1997);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1998);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1999);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2000);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2001);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2002);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2005);
			variable_name();
			setState(2007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2006);
				match(CONSTANT);
				}
				break;
			}
			setState(2009);
			type_spec();
			setState(2012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2010);
				match(NOT);
				setState(2011);
				match(NULL);
				}
			}

			setState(2015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2014);
				default_value_part();
				}
			}

			setState(2017);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubtype_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2019);
			match(SUBTYPE);
			setState(2020);
			type_name();
			setState(2021);
			match(IS);
			setState(2022);
			type_spec();
			setState(2028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2023);
				match(RANGE);
				setState(2024);
				expression();
				setState(2025);
				match(T__0);
				setState(2026);
				expression();
				}
			}

			setState(2032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2030);
				match(NOT);
				setState(2031);
				match(NULL);
				}
			}

			setState(2034);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2036);
			match(CURSOR);
			setState(2037);
			cursor_name();
			setState(2049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2038);
				match(LEFT_PAREN);
				setState(2039);
				parameter_spec();
				setState(2044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2040);
					match(COMMA);
					setState(2041);
					parameter_spec();
					}
					}
					setState(2046);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2047);
				match(RIGHT_PAREN);
				}
			}

			setState(2053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2051);
				match(RETURN);
				setState(2052);
				type_spec();
				}
			}

			setState(2057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2055);
				match(IS);
				setState(2056);
				select_statement();
				}
			}

			setState(2059);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2061);
			parameter_name();
			setState(2066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2063);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					setState(2062);
					match(IN);
					}
					break;
				}
				setState(2065);
				type_spec();
				}
				break;
			}
			setState(2069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2068);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2071);
			exception_name();
			setState(2072);
			match(EXCEPTION);
			setState(2073);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdContext id1;
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2075);
			match(PRAGMA);
			setState(2109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2076);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2077);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2078);
				match(EXCEPTION_INIT);
				setState(2079);
				match(LEFT_PAREN);
				setState(2080);
				exception_name();
				setState(2081);
				match(COMMA);
				setState(2083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS_SIGN) {
					{
					setState(2082);
					match(MINUS_SIGN);
					}
				}

				setState(2085);
				numeric();
				setState(2086);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2088);
				match(INLINE);
				setState(2089);
				match(LEFT_PAREN);
				setState(2090);
				((Pragma_declarationContext)_localctx).id1 = id();
				setState(2091);
				match(COMMA);
				setState(2092);
				expression();
				setState(2093);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2095);
				match(RESTRICT_REFERENCES);
				setState(2096);
				match(LEFT_PAREN);
				setState(2099);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					setState(2097);
					id();
					}
					break;
				case 2:
					{
					setState(2098);
					match(DEFAULT);
					}
					break;
				}
				setState(2103); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2101);
					match(COMMA);
					setState(2102);
					id();
					}
					}
					setState(2105); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2107);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2111);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_record_declaration);
		try {
			setState(2115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2113);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2114);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2117);
			match(TYPE);
			setState(2118);
			type_name();
			setState(2119);
			match(IS);
			setState(2138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2120);
				match(RECORD);
				setState(2121);
				match(LEFT_PAREN);
				setState(2122);
				field_spec();
				setState(2127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2123);
					match(COMMA);
					setState(2124);
					field_spec();
					}
					}
					setState(2129);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2130);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2132);
				match(REF);
				setState(2133);
				match(CURSOR);
				setState(2136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2134);
					match(RETURN);
					setState(2135);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2140);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitField_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2142);
			column_name();
			setState(2144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2143);
				type_spec();
				}
				break;
			}
			setState(2148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2146);
				match(NOT);
				setState(2147);
				match(NULL);
				}
			}

			setState(2151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2150);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2153);
			record_name();
			setState(2154);
			type_name();
			setState(2157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(2155);
				match(AT_SIGN);
				setState(2156);
				link_name();
				}
			}

			setState(2164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERCENT_ROWTYPE:
				{
				setState(2159);
				match(PERCENT_ROWTYPE);
				}
				break;
			case PERCENT_TYPE:
				{
				setState(2160);
				match(PERCENT_TYPE);
				setState(2162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==ASSIGN_OP) {
					{
					setState(2161);
					default_value_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2166);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_declarationContext extends ParserRuleContext {
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2168);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(2169);
				table_var_dec();
				}
				break;
			}
			setState(2172);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174);
			match(TYPE);
			setState(2175);
			type_name();
			setState(2176);
			match(IS);
			setState(2188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2177);
				match(TABLE);
				setState(2178);
				match(OF);
				setState(2179);
				type_spec();
				setState(2181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2180);
					table_indexed_by_part();
					}
				}

				setState(2185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2183);
					match(NOT);
					setState(2184);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2187);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_indexed_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2192);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2190);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2191);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2194);
			match(BY);
			setState(2195);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Varray_type_defContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVarray_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2200);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2197);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2198);
				match(VARYING);
				setState(2199);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2202);
			match(LEFT_PAREN);
			setState(2203);
			expression();
			setState(2204);
			match(RIGHT_PAREN);
			setState(2205);
			match(OF);
			setState(2206);
			type_spec();
			setState(2209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2207);
				match(NOT);
				setState(2208);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211);
			table_var_name();
			setState(2212);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<Preprocessor_statementContext> preprocessor_statement() {
			return getRuleContexts(Preprocessor_statementContext.class);
		}
		public Preprocessor_statementContext preprocessor_statement(int i) {
			return getRuleContext(Preprocessor_statementContext.class,i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_seq_of_statements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2219); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2219);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case A_LETTER:
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case ALL:
					case ALTER:
					case ANALYZE:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BREADTH:
					case BULK:
					case BY:
					case BYTE:
					case C_LETTER:
					case CACHE:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CASE:
					case CAST:
					case CHAR:
					case CHAR_CS:
					case CHARACTER:
					case CHECK:
					case CHR:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPOUND:
					case CONNECT:
					case CONNECT_BY_ROOT:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID:
					case CORRUPT_XID_ALL:
					case COST:
					case COUNT:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DEPTH:
					case DESC:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DISTINCT:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case ELEMENT:
					case ELSE:
					case ELSIF:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case END:
					case ENTITYESCAPING:
					case ERRORS:
					case ESCAPE:
					case EXCEPT:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXCLUSIVE:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FALSE:
					case FETCH:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FOR:
					case FORALL:
					case FORCE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GOTO:
					case GRANT:
					case GROUP:
					case GROUPING:
					case HASH:
					case HAVING:
					case HIDE:
					case HOUR:
					case IF:
					case IGNORE:
					case IMMEDIATE:
					case IN:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEX:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSERT:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERSECT:
					case INTERVAL:
					case INTO:
					case INVALIDATE:
					case IS:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LOCAL:
					case LOCK:
					case LOCKED:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUS:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODE:
					case MODEL:
					case MODIFY:
					case MONTH:
					case MULTISET:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR:
					case NCHAR_CS:
					case NCLOB:
					case NESTED:
					case NEW:
					case NO:
					case NOAUDIT:
					case NOCACHE:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NOMAXVALUE:
					case NOMINVALUE:
					case NONE:
					case NOORDER:
					case NOSCHEMACHECK:
					case NOT:
					case NOWAIT:
					case NULL:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case OBJECT:
					case OF:
					case OFF:
					case OID:
					case OLD:
					case ON:
					case ONLY:
					case OPEN:
					case OPTION:
					case OR:
					case ORADATA:
					case ORDER:
					case ORDINALITY:
					case OSERROR:
					case OUT:
					case OUTER:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PIPE:
					case PIVOT:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVE:
					case POSITIVEN:
					case PRAGMA:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case PRIOR:
					case PROCEDURE:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REF:
					case REFERENCE:
					case REFERENCING:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT:
					case RESULT_CACHE:
					case RETURN:
					case RETURNING:
					case REUSE:
					case REVERSE:
					case REVOKE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWID:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMACHECK:
					case SCN:
					case SEARCH:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELECT:
					case SELF:
					case SEQUENCE:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHARE:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SIZE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case SQL_PERCENT_ROWCOUNT:
					case STANDALONE:
					case START:
					case STARTUP:
					case STATEMENT:
					case STATEMENT_ID:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case TABLE:
					case THE:
					case THEN:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TO:
					case TO_CHAR:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRIM:
					case TRUE:
					case TRUNCATE:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNION:
					case UNIQUE:
					case UNLIMITED:
					case UNPIVOT:
					case UNTIL:
					case UPDATE:
					case UPDATED:
					case UPSERT:
					case UROWID:
					case USE:
					case USING:
					case VALIDATE:
					case VALUE:
					case VALUES:
					case VARCHAR:
					case VARCHAR2:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERSION:
					case VERSIONS:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case XML:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case ROW_NUMBER:
					case SUM:
					case VARIANCE:
					case REGR_:
					case STDDEV:
					case VAR_:
					case COVAR_:
					case DELIMITED_ID:
					case LEFT_PAREN:
					case BINDVAR:
					case COLON:
					case INTRODUCER:
					case REGULAR_ID:
						{
						setState(2214);
						statement();
						setState(2215);
						match(SEMICOLON);
						}
						break;
					case LESS_THAN_OP:
						{
						setState(2217);
						label_declaration();
						}
						break;
					case PP_IF:
						{
						setState(2218);
						preprocessor_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2221); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,204,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public List<TerminalNode> LESS_THAN_OP() { return getTokens(PlSqlParser.LESS_THAN_OP); }
		public TerminalNode LESS_THAN_OP(int i) {
			return getToken(PlSqlParser.LESS_THAN_OP, i);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<TerminalNode> GREATER_THAN_OP() { return getTokens(PlSqlParser.GREATER_THAN_OP); }
		public TerminalNode GREATER_THAN_OP(int i) {
			return getToken(PlSqlParser.GREATER_THAN_OP, i);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLabel_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2223);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2224);
			match(LESS_THAN_OP);
			setState(2225);
			label_name();
			setState(2226);
			match(GREATER_THAN_OP);
			setState(2227);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Pipe_rowContext pipe_row() {
			return getRuleContext(Pipe_rowContext.class,0);
		}
		public Collection_statementContext collection_statement() {
			return getRuleContext(Collection_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_statement);
		try {
			setState(2256);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2229);
				match(CREATE);
				setState(2230);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2231);
				match(ALTER);
				setState(2232);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2233);
				match(GRANT);
				setState(2234);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2235);
				match(TRUNCATE);
				setState(2236);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2237);
				match(PRAGMA);
				setState(2238);
				swallow_to_semi();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2239);
				body();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2240);
				block();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2241);
				assignment_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2242);
				continue_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2243);
				exit_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2244);
				goto_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2245);
				if_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2246);
				loop_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2247);
				forall_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2248);
				null_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2249);
				raise_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2250);
				return_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2251);
				case_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2252);
				sql_statement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2253);
				function_call();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2254);
				pipe_row();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2255);
				collection_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				setState(2258);
				collection_assoc_expression();
				}
				break;
			case 2:
				{
				setState(2259);
				general_element();
				}
				break;
			case 3:
				{
				setState(2260);
				bind_variable();
				}
				break;
			}
			setState(2263);
			match(ASSIGN_OP);
			setState(2264);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2266);
			match(CONTINUE);
			setState(2268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2267);
				label_name();
				}
				break;
			}
			setState(2272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2270);
				match(WHEN);
				setState(2271);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2274);
			match(EXIT);
			setState(2276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(2275);
				label_name();
				}
				break;
			}
			setState(2280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2278);
				match(WHEN);
				setState(2279);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2282);
			match(GOTO);
			setState(2283);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PlSqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2285);
			match(IF);
			setState(2286);
			condition();
			setState(2287);
			match(THEN);
			setState(2288);
			seq_of_statements();
			setState(2292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2289);
				elsif_part();
				}
				}
				setState(2294);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2295);
				else_part();
				}
			}

			setState(2298);
			match(END);
			setState(2299);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2301);
			match(ELSIF);
			setState(2302);
			condition();
			setState(2303);
			match(THEN);
			setState(2304);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2306);
			match(ELSE);
			setState(2307);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PlSqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2309);
				label_name();
				}
				break;
			}
			setState(2316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2312);
				match(WHILE);
				setState(2313);
				condition();
				}
				break;
			case FOR:
				{
				setState(2314);
				match(FOR);
				setState(2315);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(2318);
			match(LOOP);
			setState(2319);
			seq_of_statements();
			setState(2320);
			match(END);
			setState(2321);
			match(LOOP);
			setState(2323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 144396663052566527L) != 0) || _la==REGULAR_ID) {
				{
				setState(2322);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2325);
				index_name();
				setState(2326);
				match(IN);
				setState(2328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(2327);
					match(REVERSE);
					}
					break;
				}
				setState(2330);
				lower_bound();
				setState(2331);
				match(T__0);
				setState(2332);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2334);
				record_name();
				setState(2335);
				match(IN);
				setState(2344);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREADTH:
				case BULK:
				case BY:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHECK:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DEPTH:
				case DESC:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case ELSE:
				case ELSIF:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case END:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EXCEPT:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXCLUSIVE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUP:
				case GROUPING:
				case HASH:
				case HAVING:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case IN:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEX:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECT:
				case INTERVAL:
				case INTO:
				case INVALIDATE:
				case IS:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUS:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NONE:
				case NOORDER:
				case NOSCHEMACHECK:
				case NOT:
				case NOWAIT:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OF:
				case OFF:
				case OID:
				case OLD:
				case ON:
				case ONLY:
				case OPEN:
				case OPTION:
				case OR:
				case ORADATA:
				case ORDER:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PIVOT:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SEARCH:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENCE:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHARE:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case START:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLE:
				case THE:
				case THEN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO:
				case TO_CHAR:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNION:
				case UNIQUE:
				case UNLIMITED:
				case UNPIVOT:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case USING:
				case VALIDATE:
				case VALUE:
				case VALUES:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2336);
					cursor_name();
					setState(2338);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2337);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2340);
					match(LEFT_PAREN);
					setState(2341);
					select_statement();
					setState(2342);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitForall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2348);
			match(FORALL);
			setState(2349);
			index_name();
			setState(2350);
			match(IN);
			setState(2351);
			bounds_clause();
			setState(2352);
			sql_statement();
			setState(2355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2353);
				match(SAVE);
				setState(2354);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBounds_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_bounds_clause);
		int _la;
		try {
			setState(2370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2357);
				lower_bound();
				setState(2358);
				match(T__0);
				setState(2359);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2361);
				match(INDICES);
				setState(2362);
				match(OF);
				setState(2363);
				collection_name();
				setState(2365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2364);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2367);
				match(VALUES);
				setState(2368);
				match(OF);
				setState(2369);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBetween_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			match(BETWEEN);
			setState(2373);
			lower_bound();
			setState(2374);
			match(AND);
			setState(2375);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2377);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2379);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNull_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2381);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2383);
			match(RAISE);
			setState(2385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 144396663052566527L) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2384);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Return_statementContext extends ParserRuleContext {
		public ConditionContext cn1;
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2387);
			match(RETURN);
			setState(2389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36028797018963969L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 1423981907179208703L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 4194499L) != 0) || _la==REGULAR_ID) {
				{
				setState(2388);
				((Return_statementContext)_localctx).cn1 = condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_function_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2391);
				match(CALL);
				}
				break;
			}
			setState(2394);
			routine_name();
			setState(2396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2395);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2398);
			match(BEGIN);
			setState(2399);
			seq_of_statements();
			setState(2401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2400);
				exception_clause();
				}
			}

			setState(2403);
			match(END);
			setState(2405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2404);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collection_statementContext extends ParserRuleContext {
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public TerminalNode EXTEND() { return getToken(PlSqlParser.EXTEND, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public Collection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_statementContext collection_statement() throws RecognitionException {
		Collection_statementContext _localctx = new Collection_statementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_collection_statement);
		int _la;
		try {
			setState(2445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2407);
				collection_assoc_expression();
				setState(2408);
				match(PERIOD);
				setState(2409);
				match(DELETE);
				setState(2419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2410);
					match(LEFT_PAREN);
					setState(2416);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36028797018963969L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 1423981907179208703L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 4194499L) != 0) || _la==REGULAR_ID) {
						{
						setState(2411);
						expression();
						setState(2414);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2412);
							match(COMMA);
							setState(2413);
							expression();
							}
						}

						}
					}

					setState(2418);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2421);
				collection_assoc_expression();
				setState(2422);
				match(PERIOD);
				setState(2423);
				match(EXTEND);
				setState(2433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2424);
					match(LEFT_PAREN);
					setState(2430);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36028797018963969L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 1423981907179208703L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 4194499L) != 0) || _la==REGULAR_ID) {
						{
						setState(2425);
						expression();
						setState(2428);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2426);
							match(COMMA);
							setState(2427);
							expression();
							}
						}

						}
					}

					setState(2432);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2435);
				collection_assoc_expression();
				setState(2436);
				match(PERIOD);
				setState(2437);
				match(TRIM);
				setState(2443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2438);
					match(LEFT_PAREN);
					setState(2440);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36028797018963969L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 1423981907179208703L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 4194499L) != 0) || _la==REGULAR_ID) {
						{
						setState(2439);
						expression();
						}
					}

					setState(2442);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pipe_rowContext extends ParserRuleContext {
		public TerminalNode PIPE() { return getToken(PlSqlParser.PIPE, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Pipe_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pipe_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPipe_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPipe_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPipe_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pipe_rowContext pipe_row() throws RecognitionException {
		Pipe_rowContext _localctx = new Pipe_rowContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_pipe_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2447);
			match(PIPE);
			setState(2448);
			match(ROW);
			setState(2449);
			match(LEFT_PAREN);
			setState(2450);
			expression();
			setState(2451);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2453);
			match(EXCEPTION);
			setState(2455); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2454);
				exception_handler();
				}
				}
				setState(2457); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2459);
			match(WHEN);
			setState(2460);
			exception_name();
			setState(2465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2461);
				match(OR);
				setState(2462);
				exception_name();
				}
				}
				setState(2467);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2468);
			match(THEN);
			setState(2469);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Declare_wrapperContext declare_wrapper() {
			return getRuleContext(Declare_wrapperContext.class,0);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2471);
				declare_wrapper();
				}
			}

			setState(2474);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Declare_wrapperContext declare_wrapper() {
			return getRuleContext(Declare_wrapperContext.class,0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2476);
				declare_wrapper();
				}
			}

			setState(2479);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_sql_statement);
		try {
			setState(2485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2481);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2482);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2483);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2484);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2487);
			match(EXECUTE);
			setState(2488);
			match(IMMEDIATE);
			setState(2489);
			expression();
			setState(2499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2490);
				into_clause();
				setState(2492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2491);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2494);
				using_clause();
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(2495);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(2498);
				dynamic_returning_clause();
				}
				break;
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDynamic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2502);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_data_manipulation_language_statements);
		try {
			setState(2511);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2504);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2505);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2506);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2507);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2508);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2509);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(2510);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_manipulation_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_cursor_manipulation_statements);
		try {
			setState(2517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2513);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2514);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2515);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2516);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2519);
			match(CLOSE);
			setState(2520);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2522);
			match(OPEN);
			setState(2523);
			cursor_name();
			setState(2525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2524);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2527);
			match(FETCH);
			setState(2528);
			cursor_name();
			setState(2556);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2529);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2530);
				variable_name();
				setState(2535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2531);
					match(COMMA);
					setState(2532);
					variable_name();
					}
					}
					setState(2537);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2538);
				match(BULK);
				setState(2539);
				match(COLLECT);
				setState(2540);
				match(INTO);
				setState(2541);
				variable_name();
				setState(2546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2542);
					match(COMMA);
					setState(2543);
					variable_name();
					}
					}
					setState(2548);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(2549);
					match(LIMIT);
					setState(2552);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case A_LETTER:
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case ALL:
					case ALTER:
					case ANALYZE:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BEGIN:
					case BETWEEN:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BREADTH:
					case BULK:
					case BY:
					case BYTE:
					case C_LETTER:
					case CACHE:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CASE:
					case CAST:
					case CHAR:
					case CHAR_CS:
					case CHARACTER:
					case CHECK:
					case CHR:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPOUND:
					case CONNECT:
					case CONNECT_BY_ROOT:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID:
					case CORRUPT_XID_ALL:
					case COST:
					case COUNT:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DEPTH:
					case DESC:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DISTINCT:
					case DOCUMENT:
					case DOUBLE:
					case DROP:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case ELEMENT:
					case ELSE:
					case ELSIF:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case END:
					case ENTITYESCAPING:
					case ERRORS:
					case ESCAPE:
					case EXCEPT:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXCLUSIVE:
					case EXECUTE:
					case EXISTS:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FALSE:
					case FETCH:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FOR:
					case FORALL:
					case FORCE:
					case FROM:
					case FULL:
					case FUNCTION:
					case GOTO:
					case GRANT:
					case GROUP:
					case GROUPING:
					case HASH:
					case HAVING:
					case HIDE:
					case HOUR:
					case IF:
					case IGNORE:
					case IMMEDIATE:
					case IN:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEX:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSERT:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERSECT:
					case INTERVAL:
					case INTO:
					case INVALIDATE:
					case IS:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LOCAL:
					case LOCK:
					case LOCKED:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUS:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODE:
					case MODEL:
					case MODIFY:
					case MONTH:
					case MULTISET:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR:
					case NCHAR_CS:
					case NCLOB:
					case NESTED:
					case NEW:
					case NO:
					case NOAUDIT:
					case NOCACHE:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NOMAXVALUE:
					case NOMINVALUE:
					case NONE:
					case NOORDER:
					case NOSCHEMACHECK:
					case NOT:
					case NOWAIT:
					case NULL:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case OBJECT:
					case OF:
					case OFF:
					case OID:
					case OLD:
					case ON:
					case ONLY:
					case OPEN:
					case OPTION:
					case OR:
					case ORADATA:
					case ORDER:
					case ORDINALITY:
					case OSERROR:
					case OUT:
					case OUTER:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PIVOT:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVE:
					case POSITIVEN:
					case PRAGMA:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case PRIOR:
					case PROCEDURE:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REF:
					case REFERENCE:
					case REFERENCING:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT:
					case RESULT_CACHE:
					case RETURN:
					case RETURNING:
					case REUSE:
					case REVERSE:
					case REVOKE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWID:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMACHECK:
					case SCN:
					case SEARCH:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELECT:
					case SELF:
					case SEQUENCE:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHARE:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SIZE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case SQL_PERCENT_ROWCOUNT:
					case STANDALONE:
					case START:
					case STARTUP:
					case STATEMENT:
					case STATEMENT_ID:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case TABLE:
					case THE:
					case THEN:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TO:
					case TO_CHAR:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRIM:
					case TRUE:
					case TRUNCATE:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNION:
					case UNIQUE:
					case UNLIMITED:
					case UNPIVOT:
					case UNTIL:
					case UPDATE:
					case UPDATED:
					case UPSERT:
					case UROWID:
					case USE:
					case USING:
					case VALIDATE:
					case VALUE:
					case VALUES:
					case VARCHAR:
					case VARCHAR2:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERSION:
					case VERSIONS:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHEN:
					case WHENEVER:
					case WHERE:
					case WHILE:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case XML:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case ROW_NUMBER:
					case SUM:
					case VARIANCE:
					case REGR_:
					case STDDEV:
					case VAR_:
					case COVAR_:
					case DELIMITED_ID:
					case BINDVAR:
					case COLON:
					case INTRODUCER:
					case REGULAR_ID:
						{
						setState(2550);
						variable_name();
						}
						break;
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(2551);
						numeric();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOpen_for_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558);
			match(OPEN);
			setState(2559);
			variable_name();
			setState(2560);
			match(FOR);
			setState(2563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2561);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2562);
				expression();
				}
				break;
			}
			setState(2566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2565);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTransaction_control_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_transaction_control_statements);
		try {
			setState(2573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2568);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2569);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2570);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2571);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2572);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSet_transaction_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2575);
			match(SET);
			setState(2576);
			match(TRANSACTION);
			setState(2590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2577);
				match(READ);
				setState(2578);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(2579);
				match(ISOLATION);
				setState(2580);
				match(LEVEL);
				setState(2584);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2581);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2582);
					match(READ);
					setState(2583);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2586);
				match(USE);
				setState(2587);
				match(ROLLBACK);
				setState(2588);
				match(SEGMENT);
				setState(2589);
				rollback_segment_name();
				}
				break;
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2592);
				match(NAME);
				setState(2593);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSet_constraint_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2596);
			match(SET);
			setState(2597);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(2598);
				match(ALL);
				}
				break;
			case 2:
				{
				setState(2599);
				constraint_name();
				setState(2604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2600);
					match(COMMA);
					setState(2601);
					constraint_name();
					}
					}
					setState(2606);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2609);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(COMMIT);
			setState(2613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2612);
				match(WORK);
				}
			}

			setState(2628);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(2615);
				match(COMMENT);
				setState(2616);
				expression();
				}
				break;
			case FORCE:
				{
				setState(2617);
				match(FORCE);
				setState(2626);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(2618);
					match(CORRUPT_XID);
					setState(2619);
					expression();
					}
					break;
				case 2:
					{
					setState(2620);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2621);
					expression();
					setState(2624);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2622);
						match(COMMA);
						setState(2623);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2630);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWrite_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWrite_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(WRITE);
			setState(2635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2634);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(2637);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2640);
			match(ROLLBACK);
			setState(2642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2641);
				match(WORK);
				}
			}

			setState(2651);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2644);
				match(TO);
				setState(2646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(2645);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2648);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2649);
				match(FORCE);
				setState(2650);
				quoted_string();
				}
				break;
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2653);
			match(SAVEPOINT);
			setState(2654);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			match(EXPLAIN);
			setState(2657);
			match(PLAN);
			setState(2662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2658);
				match(SET);
				setState(2659);
				match(STATEMENT_ID);
				setState(2660);
				match(EQUALS_OP);
				setState(2661);
				quoted_string();
				}
			}

			setState(2666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2664);
				match(INTO);
				setState(2665);
				tableview_name();
				}
			}

			setState(2668);
			match(FOR);
			setState(2674);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(2669);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(2670);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(2671);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(2672);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(2673);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2676);
			subquery();
			setState(2681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(2679);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2677);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(2678);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2683);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_factoring_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2684);
			match(WITH);
			setState(2685);
			factoring_element();
			setState(2690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2686);
				match(COMMA);
				setState(2687);
				factoring_element();
				}
				}
				setState(2692);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFactoring_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2693);
			query_name();
			setState(2705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2694);
				match(LEFT_PAREN);
				setState(2695);
				column_name();
				setState(2700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2696);
					match(COMMA);
					setState(2697);
					column_name();
					}
					}
					setState(2702);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2703);
				match(RIGHT_PAREN);
				}
			}

			setState(2707);
			match(AS);
			setState(2708);
			match(LEFT_PAREN);
			setState(2709);
			subquery();
			setState(2711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2710);
				order_by_clause();
				}
			}

			setState(2713);
			match(RIGHT_PAREN);
			setState(2715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(2714);
				search_clause();
				}
			}

			setState(2718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(2717);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(PlSqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PlSqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(PlSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PlSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PlSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PlSqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(PlSqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PlSqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PlSqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PlSqlParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2720);
			match(SEARCH);
			setState(2721);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2722);
			match(FIRST);
			setState(2723);
			match(BY);
			setState(2724);
			column_name();
			setState(2726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(2725);
				match(ASC);
				}
			}

			setState(2729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(2728);
				match(DESC);
				}
			}

			setState(2733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(2731);
				match(NULLS);
				setState(2732);
				match(FIRST);
				}
				break;
			}
			setState(2737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2735);
				match(NULLS);
				setState(2736);
				match(LAST);
				}
			}

			setState(2757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2739);
				match(COMMA);
				setState(2740);
				column_name();
				setState(2742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(2741);
					match(ASC);
					}
				}

				setState(2745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(2744);
					match(DESC);
					}
				}

				setState(2749);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2747);
					match(NULLS);
					setState(2748);
					match(FIRST);
					}
					break;
				}
				setState(2753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(2751);
					match(NULLS);
					setState(2752);
					match(LAST);
					}
				}

				}
				}
				setState(2759);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2760);
			match(SET);
			setState(2761);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCycle_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2763);
			match(CYCLE);
			setState(2764);
			column_name();
			setState(2769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2765);
				match(COMMA);
				setState(2766);
				column_name();
				}
				}
				setState(2771);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2772);
			match(SET);
			setState(2773);
			column_name();
			setState(2774);
			match(TO);
			setState(2775);
			expression();
			setState(2776);
			match(DEFAULT);
			setState(2777);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2779);
			subquery_basic_elements();
			setState(2783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(2780);
				subquery_operation_part();
				}
				}
				setState(2785);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2792);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(2786);
				match(UNION);
				setState(2788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2787);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(2790);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(2791);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2794);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_basic_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_subquery_basic_elements);
		try {
			setState(2801);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2796);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2797);
				match(LEFT_PAREN);
				setState(2798);
				subquery();
				setState(2799);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2803);
				subquery_factoring_clause();
				}
			}

			setState(2806);
			match(SELECT);
			setState(2808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2807);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(2810);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2811);
				selected_element();
				setState(2816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2812);
					match(COMMA);
					setState(2813);
					selected_element();
					}
					}
					setState(2818);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(2821);
				into_clause();
				}
			}

			setState(2824);
			from_clause();
			setState(2826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2825);
				where_clause();
				}
				break;
			}
			setState(2829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(2828);
				hierarchical_query_clause();
				}
				break;
			}
			setState(2832);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(2831);
				group_by_clause();
				}
				break;
			}
			setState(2835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(2834);
				order_by_clause();
				}
				break;
			}
			setState(2838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(2837);
				model_clause();
				}
				break;
			}
			setState(2841);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2840);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelected_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelected_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2843);
			select_list_elements();
			setState(2845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(2844);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			match(FROM);
			setState(2848);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelect_list_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelect_list_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_select_list_elements);
		try {
			setState(2855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2850);
				tableview_name();
				setState(2851);
				match(PERIOD);
				setState(2852);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2854);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2857);
			table_ref();
			setState(2862);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2858);
					match(COMMA);
					setState(2859);
					table_ref();
					}
					} 
				}
				setState(2864);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2865);
			table_ref_aux();
			setState(2869);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2866);
					join_clause();
					}
					} 
				}
				setState(2871);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
			}
			setState(2874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2872);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(2873);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Xml_tableContext xml_table() {
			return getRuleContext(Xml_tableContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref_aux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2876);
				dml_table_expression_clause();
				setState(2879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(2877);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2878);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2881);
				match(LEFT_PAREN);
				setState(2882);
				table_ref();
				setState(2886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(2883);
					subquery_operation_part();
					}
					}
					setState(2888);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2889);
				match(RIGHT_PAREN);
				setState(2892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(2890);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2891);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(2894);
				match(ONLY);
				setState(2895);
				match(LEFT_PAREN);
				setState(2896);
				dml_table_expression_clause();
				setState(2897);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(2899);
				dml_table_expression_clause();
				setState(2902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(2900);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2901);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(2904);
				xml_table();
				}
				break;
			}
			setState(2910);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,318,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2907);
					flashback_query_clause();
					}
					} 
				}
				setState(2912);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,318,_ctx);
			}
			setState(2914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(2913);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2916);
				query_partition_clause();
				}
			}

			setState(2920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(2919);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(2922);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(2923);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(2926);
			match(JOIN);
			setState(2927);
			table_ref_aux();
			setState(2929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2928);
				query_partition_clause();
				}
				break;
			}
			setState(2935);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2933);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(2931);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(2932);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2937);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2938);
			match(ON);
			setState(2939);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_using_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2941);
			match(USING);
			setState(2942);
			match(LEFT_PAREN);
			setState(2943);
			column_name();
			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2944);
				match(COMMA);
				setState(2945);
				column_name();
				}
				}
				setState(2950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2951);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOuter_join_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2953);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(2954);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			match(PARTITION);
			setState(2958);
			match(BY);
			setState(2972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(2959);
				match(LEFT_PAREN);
				setState(2960);
				subquery();
				setState(2961);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2963);
				expression_list();
				}
				break;
			case 3:
				{
				setState(2964);
				expression();
				setState(2969);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2965);
						match(COMMA);
						setState(2966);
						expression();
						}
						} 
					}
					setState(2971);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFlashback_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_flashback_query_clause);
		int _la;
		try {
			setState(2982);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2974);
				match(VERSIONS);
				setState(2975);
				match(BETWEEN);
				setState(2976);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2977);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2978);
				match(AS);
				setState(2979);
				match(OF);
				setState(2980);
				_la = _input.LA(1);
				if ( !(((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & 1125899973951489L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2981);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2984);
			match(PIVOT);
			setState(2986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(2985);
				match(XML);
				}
			}

			setState(2988);
			match(LEFT_PAREN);
			setState(2989);
			pivot_element();
			setState(2994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2990);
				match(COMMA);
				setState(2991);
				pivot_element();
				}
				}
				setState(2996);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2997);
			pivot_for_clause();
			setState(2998);
			pivot_in_clause();
			setState(2999);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_pivot_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3001);
			aggregate_function_name();
			setState(3002);
			match(LEFT_PAREN);
			setState(3003);
			expression();
			setState(3004);
			match(RIGHT_PAREN);
			setState(3006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(3005);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_for_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3008);
			match(FOR);
			setState(3021);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3009);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3010);
				match(LEFT_PAREN);
				setState(3011);
				column_name();
				setState(3016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3012);
					match(COMMA);
					setState(3013);
					column_name();
					}
					}
					setState(3018);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3019);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3023);
			match(IN);
			setState(3024);
			match(LEFT_PAREN);
			setState(3042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(3025);
				subquery();
				}
				break;
			case 2:
				{
				setState(3026);
				match(ANY);
				setState(3031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3027);
					match(COMMA);
					setState(3028);
					match(ANY);
					}
					}
					setState(3033);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3034);
				pivot_in_clause_element();
				setState(3039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3035);
					match(COMMA);
					setState(3036);
					pivot_in_clause_element();
					}
					}
					setState(3041);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3044);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3046);
			pivot_in_clause_elements();
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 217017207043915775L) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3047);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_pivot_in_clause_elements);
		try {
			setState(3052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3050);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3051);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3054);
			match(UNPIVOT);
			setState(3057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3055);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3056);
				match(NULLS);
				}
			}

			setState(3059);
			match(LEFT_PAREN);
			setState(3072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3060);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3061);
				match(LEFT_PAREN);
				setState(3062);
				column_name();
				setState(3067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3063);
					match(COMMA);
					setState(3064);
					column_name();
					}
					}
					setState(3069);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3070);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3074);
			pivot_for_clause();
			setState(3075);
			unpivot_in_clause();
			setState(3076);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3078);
			match(IN);
			setState(3079);
			match(LEFT_PAREN);
			setState(3080);
			unpivot_in_elements();
			setState(3085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3081);
				match(COMMA);
				setState(3082);
				unpivot_in_elements();
				}
				}
				setState(3087);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3088);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_in_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3102);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3090);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3091);
				match(LEFT_PAREN);
				setState(3092);
				column_name();
				setState(3097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3093);
					match(COMMA);
					setState(3094);
					column_name();
					}
					}
					setState(3099);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3100);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3104);
				match(AS);
				setState(3117);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3105);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3106);
					match(LEFT_PAREN);
					setState(3107);
					constant();
					setState(3112);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3108);
						match(COMMA);
						setState(3109);
						constant();
						}
						}
						setState(3114);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3115);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitHierarchical_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_hierarchical_query_clause);
		try {
			setState(3138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3121);
				match(CONNECT);
				setState(3122);
				match(BY);
				setState(3124);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3123);
					match(NOCYCLE);
					}
					break;
				}
				setState(3126);
				condition();
				setState(3128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					setState(3127);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3130);
				start_part();
				setState(3131);
				match(CONNECT);
				setState(3132);
				match(BY);
				setState(3134);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3133);
					match(NOCYCLE);
					}
					break;
				}
				setState(3136);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStart_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3140);
			match(START);
			setState(3141);
			match(WITH);
			setState(3142);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_group_by_clause);
		try {
			int _alt;
			setState(3170);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3144);
				match(GROUP);
				setState(3145);
				match(BY);
				setState(3146);
				group_by_elements();
				setState(3151);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3147);
						match(COMMA);
						setState(3148);
						group_by_elements();
						}
						} 
					}
					setState(3153);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
				}
				setState(3155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					setState(3154);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3157);
				having_clause();
				setState(3168);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(3158);
					match(GROUP);
					setState(3159);
					match(BY);
					setState(3160);
					group_by_elements();
					setState(3165);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3161);
							match(COMMA);
							setState(3162);
							group_by_elements();
							}
							} 
						}
						setState(3167);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGroup_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_group_by_elements);
		try {
			setState(3175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3172);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3173);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3174);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3177);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3178);
			match(LEFT_PAREN);
			setState(3179);
			grouping_sets_elements();
			setState(3184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3180);
				match(COMMA);
				setState(3181);
				grouping_sets_elements();
				}
				}
				setState(3186);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3187);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3189);
			match(GROUPING);
			setState(3190);
			match(SETS);
			setState(3191);
			match(LEFT_PAREN);
			setState(3192);
			grouping_sets_elements();
			setState(3197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3193);
				match(COMMA);
				setState(3194);
				grouping_sets_elements();
				}
				}
				setState(3199);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3200);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_grouping_sets_elements);
		try {
			setState(3205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3202);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3203);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3204);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3207);
			match(HAVING);
			setState(3208);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3210);
			match(MODEL);
			setState(3214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3211);
				cell_reference_options();
				}
				}
				setState(3216);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3217);
				return_rows_clause();
				}
			}

			setState(3223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3220);
				reference_model();
				}
				}
				setState(3225);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3226);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCell_reference_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_cell_reference_options);
		int _la;
		try {
			setState(3236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3228);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3229);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3230);
				match(UNIQUE);
				setState(3234);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3231);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3232);
					match(SINGLE);
					setState(3233);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReturn_rows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			match(RETURN);
			setState(3239);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3240);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReference_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3242);
			match(REFERENCE);
			setState(3243);
			reference_model_name();
			setState(3244);
			match(ON);
			setState(3245);
			match(LEFT_PAREN);
			setState(3246);
			subquery();
			setState(3247);
			match(RIGHT_PAREN);
			setState(3248);
			model_column_clauses();
			setState(3252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3249);
				cell_reference_options();
				}
				}
				setState(3254);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMain_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3255);
				match(MAIN);
				setState(3256);
				main_model_name();
				}
			}

			setState(3259);
			model_column_clauses();
			setState(3263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3260);
				cell_reference_options();
				}
				}
				setState(3265);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3266);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3268);
				model_column_partition_part();
				}
			}

			setState(3271);
			match(DIMENSION);
			setState(3272);
			match(BY);
			setState(3273);
			model_column_list();
			setState(3274);
			match(MEASURES);
			setState(3275);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_partition_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3277);
			match(PARTITION);
			setState(3278);
			match(BY);
			setState(3279);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3281);
			match(LEFT_PAREN);
			setState(3282);
			model_column();
			setState(3287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3283);
				match(COMMA);
				setState(3284);
				model_column();
				}
				}
				setState(3289);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3290);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3292);
			expression();
			setState(3294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 217017207043915775L) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3293);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_rules_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3296);
				model_rules_part();
				}
			}

			setState(3299);
			match(LEFT_PAREN);
			setState(3300);
			model_rules_element();
			setState(3305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3301);
				match(COMMA);
				setState(3302);
				model_rules_element();
				}
				}
				setState(3307);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3308);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3310);
			match(RULES);
			setState(3316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3311);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3312);
				match(UPSERT);
				setState(3314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3313);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(3320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3318);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3319);
				match(ORDER);
				}
			}

			setState(3323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3322);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(3325);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3326);
				match(UPSERT);
				setState(3328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(3327);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3332);
			cell_assignment();
			setState(3334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3333);
				order_by_clause();
				}
			}

			setState(3336);
			match(EQUALS_OP);
			setState(3337);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCell_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3339);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_iterate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3341);
			match(ITERATE);
			setState(3342);
			match(LEFT_PAREN);
			setState(3343);
			expression();
			setState(3344);
			match(RIGHT_PAREN);
			setState(3346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3345);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUntil_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3348);
			match(UNTIL);
			setState(3349);
			match(LEFT_PAREN);
			setState(3350);
			condition();
			setState(3351);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3353);
			match(ORDER);
			setState(3355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3354);
				match(SIBLINGS);
				}
			}

			setState(3357);
			match(BY);
			setState(3358);
			order_by_elements();
			setState(3363);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3359);
					match(COMMA);
					setState(3360);
					order_by_elements();
					}
					} 
				}
				setState(3365);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOrder_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3366);
			expression();
			setState(3368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				setState(3367);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				setState(3370);
				match(NULLS);
				setState(3371);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			match(FOR);
			setState(3375);
			match(UPDATE);
			setState(3377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3376);
				for_update_of_part();
				}
			}

			setState(3380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3379);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_of_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3382);
			match(OF);
			setState(3383);
			column_name();
			setState(3388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3384);
				match(COMMA);
				setState(3385);
				column_name();
				}
				}
				setState(3390);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_for_update_options);
		try {
			setState(3396);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3391);
				match(SKIP_);
				setState(3392);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3393);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3394);
				match(WAIT);
				setState(3395);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3398);
			match(UPDATE);
			setState(3399);
			general_table_ref();
			setState(3400);
			update_set_clause();
			setState(3402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3401);
				where_clause();
				}
			}

			setState(3405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3404);
				static_returning_clause();
				}
			}

			setState(3408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3407);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpdate_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3410);
			match(SET);
			setState(3426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3411);
				column_based_update_set_clause();
				setState(3416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3412);
					match(COMMA);
					setState(3413);
					column_based_update_set_clause();
					}
					}
					setState(3418);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3419);
				match(VALUE);
				setState(3420);
				match(LEFT_PAREN);
				setState(3421);
				id();
				setState(3422);
				match(RIGHT_PAREN);
				setState(3423);
				match(EQUALS_OP);
				setState(3424);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_based_update_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3428);
				column_name();
				setState(3429);
				match(EQUALS_OP);
				setState(3430);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3432);
				match(LEFT_PAREN);
				setState(3433);
				column_name();
				setState(3438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3434);
					match(COMMA);
					setState(3435);
					column_name();
					}
					}
					setState(3440);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3441);
				match(RIGHT_PAREN);
				setState(3442);
				match(EQUALS_OP);
				setState(3443);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3447);
			match(DELETE);
			setState(3449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3448);
				match(FROM);
				}
				break;
			}
			setState(3451);
			general_table_ref();
			setState(3453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3452);
				where_clause();
				}
			}

			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3455);
				static_returning_clause();
				}
			}

			setState(3459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3458);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3461);
			match(INSERT);
			setState(3464);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3462);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3463);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSingle_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3466);
			insert_into_clause();
			setState(3472);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3467);
				values_clause();
				setState(3469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(3468);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3471);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3474);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3477);
				match(ALL);
				setState(3479); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3478);
					multi_table_element();
					}
					}
					setState(3481); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3483);
				conditional_insert_clause();
				}
				break;
			}
			setState(3486);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3488);
			insert_into_clause();
			setState(3490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3489);
				values_clause();
				}
			}

			setState(3493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3492);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3495);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3499); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3498);
				conditional_insert_when_part();
				}
				}
				setState(3501); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3503);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3506);
			match(WHEN);
			setState(3507);
			condition();
			setState(3508);
			match(THEN);
			setState(3510); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3509);
				multi_table_element();
				}
				}
				setState(3512); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3514);
			match(ELSE);
			setState(3516); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3515);
				multi_table_element();
				}
				}
				setState(3518); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInsert_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3520);
			match(INTO);
			setState(3521);
			general_table_ref();
			setState(3533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3522);
				match(LEFT_PAREN);
				setState(3523);
				column_name();
				setState(3528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3524);
					match(COMMA);
					setState(3525);
					column_name();
					}
					}
					setState(3530);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3531);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3535);
			match(VALUES);
			setState(3539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3536);
				expression_list();
				}
				break;
			case 2:
				{
				setState(3537);
				record_name();
				}
				break;
			case 3:
				{
				setState(3538);
				collection_assoc_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3541);
			match(MERGE);
			setState(3542);
			match(INTO);
			setState(3543);
			tableview_name();
			setState(3545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(3544);
				table_alias();
				}
				break;
			}
			setState(3547);
			match(USING);
			setState(3548);
			selected_tableview();
			setState(3549);
			match(ON);
			setState(3550);
			match(LEFT_PAREN);
			setState(3551);
			condition();
			setState(3552);
			match(RIGHT_PAREN);
			setState(3561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3553);
				merge_update_clause();
				setState(3555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3554);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3557);
				merge_insert_clause();
				setState(3559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3558);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3563);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3566);
			match(WHEN);
			setState(3567);
			match(MATCHED);
			setState(3568);
			match(THEN);
			setState(3569);
			match(UPDATE);
			setState(3570);
			match(SET);
			setState(3571);
			merge_element();
			setState(3576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3572);
				match(COMMA);
				setState(3573);
				merge_element();
				}
				}
				setState(3578);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3579);
				where_clause();
				}
			}

			setState(3583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3582);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3585);
			column_name();
			setState(3586);
			match(EQUALS_OP);
			setState(3587);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_update_delete_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3589);
			match(DELETE);
			setState(3590);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			match(WHEN);
			setState(3593);
			match(NOT);
			setState(3594);
			match(MATCHED);
			setState(3595);
			match(THEN);
			setState(3596);
			match(INSERT);
			setState(3608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3597);
				match(LEFT_PAREN);
				setState(3598);
				column_name();
				setState(3603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3599);
					match(COMMA);
					setState(3600);
					column_name();
					}
					}
					setState(3605);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3606);
				match(RIGHT_PAREN);
				}
			}

			setState(3610);
			match(VALUES);
			setState(3611);
			expression_list();
			setState(3613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3612);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelected_tableview(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_selected_tableview);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3615);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3616);
				match(LEFT_PAREN);
				setState(3617);
				select_statement();
				setState(3618);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				setState(3622);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3625);
			match(LOCK);
			setState(3626);
			match(TABLE);
			setState(3627);
			lock_table_element();
			setState(3632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3628);
				match(COMMA);
				setState(3629);
				lock_table_element();
				}
				}
				setState(3634);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3635);
			match(IN);
			setState(3636);
			lock_mode();
			setState(3637);
			match(MODE);
			setState(3639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3638);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWait_nowait_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_wait_nowait_part);
		try {
			setState(3644);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3641);
				match(WAIT);
				setState(3642);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3643);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3646);
			tableview_name();
			setState(3648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3647);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_lock_mode);
		int _la;
		try {
			setState(3662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3650);
				match(ROW);
				setState(3651);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3652);
				match(ROW);
				setState(3653);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3654);
				match(SHARE);
				setState(3656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3655);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3658);
				match(SHARE);
				setState(3659);
				match(ROW);
				setState(3660);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3661);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_table_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3664);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3665);
				match(ONLY);
				setState(3666);
				match(LEFT_PAREN);
				setState(3667);
				dml_table_expression_clause();
				setState(3668);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3672);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStatic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3675);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3676);
			expression();
			setState(3681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3677);
				match(COMMA);
				setState(3678);
				expression();
				}
				}
				setState(3683);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3684);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3686);
			match(LOG);
			setState(3687);
			match(ERRORS);
			setState(3689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3688);
				error_logging_into_part();
				}
				break;
			}
			setState(3692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3691);
				expression_wrapper();
				}
				break;
			}
			setState(3695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(3694);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_into_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3697);
			match(INTO);
			setState(3698);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_reject_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3700);
			match(REJECT);
			setState(3701);
			match(LIMIT);
			setState(3704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(3702);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(3703);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_table_expression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(3718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3706);
				table_collection_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3707);
				match(LEFT_PAREN);
				setState(3708);
				select_statement();
				setState(3710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3709);
					subquery_restriction_clause();
					}
				}

				setState(3712);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3714);
				tableview_name();
				setState(3716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					setState(3715);
					sample_clause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_collection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3720);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(3721);
				match(LEFT_PAREN);
				setState(3722);
				subquery();
				setState(3723);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3725);
				match(LEFT_PAREN);
				setState(3726);
				expression();
				setState(3727);
				match(RIGHT_PAREN);
				setState(3731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
				case 1:
					{
					setState(3728);
					match(LEFT_PAREN);
					setState(3729);
					match(PLUS_SIGN);
					setState(3730);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_restriction_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3735);
			match(WITH);
			setState(3744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3736);
				match(READ);
				setState(3737);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(3738);
				match(CHECK);
				setState(3739);
				match(OPTION);
				setState(3742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3740);
					match(CONSTRAINT);
					setState(3741);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3746);
			match(SAMPLE);
			setState(3748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(3747);
				match(BLOCK);
				}
			}

			setState(3750);
			match(LEFT_PAREN);
			setState(3751);
			expression();
			setState(3754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3752);
				match(COMMA);
				setState(3753);
				expression();
				}
			}

			setState(3756);
			match(RIGHT_PAREN);
			setState(3758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(3757);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSeed_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3760);
			match(SEED);
			setState(3761);
			match(LEFT_PAREN);
			setState(3762);
			expression();
			setState(3763);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode PERCENT_NOTFOUND() { return getToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
		public TerminalNode PERCENT_FOUND() { return getToken(PlSqlParser.PERCENT_FOUND, 0); }
		public TerminalNode PERCENT_ISOPEN() { return getToken(PlSqlParser.PERCENT_ISOPEN, 0); }
		public TerminalNode PERCENT_ROWCOUNT() { return getToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
		public Sql_cursor_expressionContext sql_cursor_expression() {
			return getRuleContext(Sql_cursor_expressionContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_cursor_expression);
		try {
			setState(3783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3765);
				match(CURSOR);
				setState(3766);
				match(LEFT_PAREN);
				setState(3767);
				subquery();
				setState(3768);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3770);
				cursor_name();
				setState(3771);
				match(PERCENT_NOTFOUND);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3773);
				cursor_name();
				setState(3774);
				match(PERCENT_FOUND);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3776);
				cursor_name();
				setState(3777);
				match(PERCENT_ISOPEN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3779);
				cursor_name();
				setState(3780);
				match(PERCENT_ROWCOUNT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3782);
				sql_cursor_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_cursor_expressionContext extends ParserRuleContext {
		public TerminalNode SQL_PERCENT_ROWCOUNT() { return getToken(PlSqlParser.SQL_PERCENT_ROWCOUNT, 0); }
		public Sql_cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_cursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_cursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_cursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_cursor_expressionContext sql_cursor_expression() throws RecognitionException {
		Sql_cursor_expressionContext _localctx = new Sql_cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_sql_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			match(SQL_PERCENT_ROWCOUNT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collection_assoc_expressionContext extends ParserRuleContext {
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Collection_assoc_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_assoc_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_assoc_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_assoc_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_assoc_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_assoc_expressionContext collection_assoc_expression() throws RecognitionException {
		Collection_assoc_expressionContext _localctx = new Collection_assoc_expressionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_collection_assoc_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3787);
			collection_name();
			setState(3794);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3788);
					match(LEFT_PAREN);
					setState(3789);
					expression();
					setState(3790);
					match(RIGHT_PAREN);
					}
					} 
				}
				setState(3796);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
			}
			setState(3799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(3797);
				match(PERIOD);
				setState(3798);
				variable_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collection_type_expressionContext extends ParserRuleContext {
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode NEXT() { return getToken(PlSqlParser.NEXT, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public Collection_type_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_type_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_type_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_type_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_type_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_type_expressionContext collection_type_expression() throws RecognitionException {
		Collection_type_expressionContext _localctx = new Collection_type_expressionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_collection_type_expression);
		try {
			setState(3839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3801);
				collection_assoc_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3802);
				collection_assoc_expression();
				setState(3803);
				match(PERIOD);
				setState(3804);
				match(FIRST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3806);
				collection_assoc_expression();
				setState(3807);
				match(PERIOD);
				setState(3808);
				match(LAST);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3810);
				collection_assoc_expression();
				setState(3811);
				match(PERIOD);
				setState(3812);
				match(EXISTS);
				setState(3813);
				match(LEFT_PAREN);
				setState(3814);
				expression();
				setState(3815);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3817);
				collection_assoc_expression();
				setState(3818);
				match(PERIOD);
				setState(3819);
				match(PRIOR);
				setState(3820);
				match(LEFT_PAREN);
				setState(3821);
				expression();
				setState(3822);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3824);
				collection_assoc_expression();
				setState(3825);
				match(PERIOD);
				setState(3826);
				match(NEXT);
				setState(3827);
				match(LEFT_PAREN);
				setState(3828);
				expression();
				setState(3829);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3831);
				collection_assoc_expression();
				setState(3832);
				match(PERIOD);
				setState(3833);
				match(COUNT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3835);
				collection_assoc_expression();
				setState(3836);
				match(PERIOD);
				setState(3837);
				match(LIMIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expression_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			match(LEFT_PAREN);
			setState(3843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36028797018963969L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 1423981907179208703L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 4194499L) != 0) || _la==REGULAR_ID) {
				{
				setState(3842);
				expression();
				}
			}

			setState(3849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3845);
				match(COMMA);
				setState(3846);
				expression();
				}
				}
				setState(3851);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3852);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3854);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Condition_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCondition_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCondition_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCondition_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3856);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public Logical_and_expressionContext logical_and_expression() {
			return getRuleContext(Logical_and_expressionContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3858);
			logical_and_expression();
			}
			setState(3863);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3859);
					match(OR);
					setState(3860);
					expression();
					}
					} 
				}
				setState(3865);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expression_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_expression_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3866);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Logical_and_expressionContext extends ParserRuleContext {
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PlSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PlSqlParser.AND, i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLogical_and_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLogical_and_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			negated_expression();
			setState(3873);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3869);
					match(AND);
					setState(3870);
					negated_expression();
					}
					} 
				}
				setState(3875);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNegated_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNegated_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_negated_expression);
		try {
			setState(3879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3876);
				match(NOT);
				setState(3877);
				negated_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3878);
				equality_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Equality_expressionContext extends ParserRuleContext {
		public Collection_type_expressionContext collection_type_expression() {
			return getRuleContext(Collection_type_expressionContext.class,0);
		}
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(PlSqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(PlSqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(PlSqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(PlSqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(PlSqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(PlSqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(PlSqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(PlSqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(PlSqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(PlSqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(PlSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PlSqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(PlSqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(PlSqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(PlSqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(PlSqlParser.OF, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(PlSqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(PlSqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(PlSqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(PlSqlParser.ONLY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitEquality_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitEquality_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			setState(3920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3881);
				collection_type_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3882);
				multiset_expression();
				setState(3916);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3883);
						match(IS);
						setState(3885);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3884);
							match(NOT);
							}
						}

						setState(3912);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NULL:
							{
							setState(3887);
							match(NULL);
							}
							break;
						case NAN:
							{
							setState(3888);
							match(NAN);
							}
							break;
						case PRESENT:
							{
							setState(3889);
							match(PRESENT);
							}
							break;
						case INFINITE:
							{
							setState(3890);
							match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							setState(3891);
							match(A_LETTER);
							setState(3892);
							match(SET);
							}
							break;
						case EMPTY:
							{
							setState(3893);
							match(EMPTY);
							}
							break;
						case OF:
							{
							setState(3894);
							match(OF);
							setState(3896);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==TYPE) {
								{
								setState(3895);
								match(TYPE);
								}
							}

							setState(3898);
							match(LEFT_PAREN);
							setState(3900);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
							case 1:
								{
								setState(3899);
								match(ONLY);
								}
								break;
							}
							setState(3902);
							type_spec();
							setState(3907);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(3903);
								match(COMMA);
								setState(3904);
								type_spec();
								}
								}
								setState(3909);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(3910);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(3918);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
				}
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3919);
				cursor_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multiset_partContext extends ParserRuleContext {
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Multiset_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_partContext multiset_part() throws RecognitionException {
		Multiset_partContext _localctx = new Multiset_partContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_multiset_part);
		try {
			setState(3925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3922);
				collection_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3923);
				collection_assoc_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3924);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multiset_expressionContext extends ParserRuleContext {
		public List<Multiset_partContext> multiset_part() {
			return getRuleContexts(Multiset_partContext.class);
		}
		public Multiset_partContext multiset_part(int i) {
			return getRuleContext(Multiset_partContext.class,i);
		}
		public List<TerminalNode> MULTISET() { return getTokens(PlSqlParser.MULTISET); }
		public TerminalNode MULTISET(int i) {
			return getToken(PlSqlParser.MULTISET, i);
		}
		public List<TerminalNode> EXCEPT() { return getTokens(PlSqlParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(PlSqlParser.EXCEPT, i);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(PlSqlParser.INTERSECT); }
		public TerminalNode INTERSECT(int i) {
			return getToken(PlSqlParser.INTERSECT, i);
		}
		public List<TerminalNode> UNION() { return getTokens(PlSqlParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(PlSqlParser.UNION, i);
		}
		public List<TerminalNode> ALL() { return getTokens(PlSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(PlSqlParser.ALL, i);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(PlSqlParser.DISTINCT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(PlSqlParser.DISTINCT, i);
		}
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_multiset_expression);
		int _la;
		try {
			int _alt;
			setState(3950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3927);
				multiset_part();
				setState(3934); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3928);
						match(MULTISET);
						setState(3929);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3931);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
						case 1:
							{
							setState(3930);
							_la = _input.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						setState(3933);
						multiset_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3936); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,473,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3938);
				relational_expression();
				setState(3948);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(3940);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(3939);
						match(NOT);
						}
					}

					setState(3942);
					multiset_type();
					setState(3944);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
					case 1:
						{
						setState(3943);
						match(OF);
						}
						break;
					}
					setState(3946);
					concatenation();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3952);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		public List<TerminalNode> EQUALS_OP() { return getTokens(PlSqlParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(PlSqlParser.EQUALS_OP, i);
		}
		public List<Not_equal_opContext> not_equal_op() {
			return getRuleContexts(Not_equal_opContext.class);
		}
		public Not_equal_opContext not_equal_op(int i) {
			return getRuleContext(Not_equal_opContext.class,i);
		}
		public List<TerminalNode> LESS_THAN_OP() { return getTokens(PlSqlParser.LESS_THAN_OP); }
		public TerminalNode LESS_THAN_OP(int i) {
			return getToken(PlSqlParser.LESS_THAN_OP, i);
		}
		public List<TerminalNode> GREATER_THAN_OP() { return getTokens(PlSqlParser.GREATER_THAN_OP); }
		public TerminalNode GREATER_THAN_OP(int i) {
			return getToken(PlSqlParser.GREATER_THAN_OP, i);
		}
		public List<Less_than_or_equals_opContext> less_than_or_equals_op() {
			return getRuleContexts(Less_than_or_equals_opContext.class);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op(int i) {
			return getRuleContext(Less_than_or_equals_opContext.class,i);
		}
		public List<Greater_than_or_equals_opContext> greater_than_or_equals_op() {
			return getRuleContexts(Greater_than_or_equals_opContext.class);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op(int i) {
			return getRuleContext(Greater_than_or_equals_opContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRelational_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3954);
			compound_expression();
			setState(3966);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3961);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
					case 1:
						{
						setState(3955);
						match(EQUALS_OP);
						}
						break;
					case 2:
						{
						setState(3956);
						not_equal_op();
						}
						break;
					case 3:
						{
						setState(3957);
						match(LESS_THAN_OP);
						}
						break;
					case 4:
						{
						setState(3958);
						match(GREATER_THAN_OP);
						}
						break;
					case 5:
						{
						setState(3959);
						less_than_or_equals_op();
						}
						break;
					case 6:
						{
						setState(3960);
						greater_than_or_equals_op();
						}
						break;
					}
					setState(3963);
					compound_expression();
					}
					} 
				}
				setState(3968);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compound_expressionContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_compound_expression);
		int _la;
		try {
			setState(3987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3969);
				concatenation();
				setState(3984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
				case 1:
					{
					setState(3971);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(3970);
						match(NOT);
						}
					}

					setState(3982);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case IN:
						{
						setState(3973);
						match(IN);
						setState(3974);
						in_elements();
						}
						break;
					case BETWEEN:
						{
						setState(3975);
						match(BETWEEN);
						setState(3976);
						between_elements();
						}
						break;
					case LIKE:
					case LIKE2:
					case LIKE4:
					case LIKEC:
						{
						setState(3977);
						like_type();
						setState(3978);
						concatenation();
						setState(3980);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
						case 1:
							{
							setState(3979);
							like_escape_part();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3986);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLike_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3989);
			_la = _input.LA(1);
			if ( !(((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLike_escape_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991);
			match(ESCAPE);
			setState(3992);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class In_elementsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIn_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIn_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_in_elements);
		int _la;
		try {
			setState(4012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3994);
				match(LEFT_PAREN);
				setState(3995);
				subquery();
				setState(3996);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3998);
				match(LEFT_PAREN);
				setState(3999);
				concatenation_wrapper();
				setState(4004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4000);
					match(COMMA);
					setState(4001);
					concatenation_wrapper();
					}
					}
					setState(4006);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4007);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4009);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4010);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4011);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4014);
			concatenation();
			setState(4015);
			match(AND);
			setState(4016);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4018);
			additive_expression();
			setState(4024);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4019);
					concatenation_op();
					setState(4020);
					additive_expression();
					}
					} 
				}
				setState(4026);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Concatenation_wrapperContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4027);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Additive_expressionContext extends ParserRuleContext {
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public List<TerminalNode> PLUS_SIGN() { return getTokens(PlSqlParser.PLUS_SIGN); }
		public TerminalNode PLUS_SIGN(int i) {
			return getToken(PlSqlParser.PLUS_SIGN, i);
		}
		public List<TerminalNode> MINUS_SIGN() { return getTokens(PlSqlParser.MINUS_SIGN); }
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(PlSqlParser.MINUS_SIGN, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAdditive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAdditive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4029);
			multiply_expression();
			setState(4034);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,488,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4030);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4031);
					multiply_expression();
					}
					} 
				}
				setState(4036);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,488,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multiply_expressionContext extends ParserRuleContext {
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public List<TerminalNode> ASTERISK() { return getTokens(PlSqlParser.ASTERISK); }
		public TerminalNode ASTERISK(int i) {
			return getToken(PlSqlParser.ASTERISK, i);
		}
		public List<TerminalNode> SOLIDUS() { return getTokens(PlSqlParser.SOLIDUS); }
		public TerminalNode SOLIDUS(int i) {
			return getToken(PlSqlParser.SOLIDUS, i);
		}
		public List<TerminalNode> MOD() { return getTokens(PlSqlParser.MOD); }
		public TerminalNode MOD(int i) {
			return getToken(PlSqlParser.MOD, i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiply_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiply_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4037);
			datetime_expression();
			setState(4042);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4038);
					_la = _input.LA(1);
					if ( !(_la==MOD || _la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4039);
					datetime_expression();
					}
					} 
				}
				setState(4044);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDatetime_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDatetime_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			model_expression();
			setState(4054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(4046);
				match(AT);
				setState(4051);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4047);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4048);
					match(TIME);
					setState(4049);
					match(ZONE);
					setState(4050);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4053);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_interval_expression);
		int _la;
		try {
			setState(4080);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4056);
				match(DAY);
				setState(4061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4057);
					match(LEFT_PAREN);
					setState(4058);
					concatenation_wrapper();
					setState(4059);
					match(RIGHT_PAREN);
					}
				}

				setState(4063);
				match(TO);
				setState(4064);
				match(SECOND);
				setState(4069);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(4065);
					match(LEFT_PAREN);
					setState(4066);
					concatenation_wrapper();
					setState(4067);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4071);
				match(YEAR);
				setState(4076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4072);
					match(LEFT_PAREN);
					setState(4073);
					concatenation_wrapper();
					setState(4074);
					match(RIGHT_PAREN);
					}
				}

				setState(4078);
				match(TO);
				setState(4079);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(PlSqlParser.LEFT_BRACKET, 0); }
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(PlSqlParser.RIGHT_BRACKET, 0); }
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4082);
			unary_expression();
			setState(4087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4083);
				match(LEFT_BRACKET);
				setState(4084);
				model_expression_element();
				setState(4085);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_model_expression_element);
		int _la;
		try {
			setState(4112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
				case 1:
					{
					setState(4089);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4090);
					condition_wrapper();
					}
					break;
				}
				setState(4100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4093);
					match(COMMA);
					setState(4096);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
					case 1:
						{
						setState(4094);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4095);
						condition_wrapper();
						}
						break;
					}
					}
					}
					setState(4102);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4103);
				single_column_for_loop();
				setState(4108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4104);
					match(COMMA);
					setState(4105);
					single_column_for_loop();
					}
					}
					setState(4110);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4111);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSingle_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4114);
			match(FOR);
			setState(4115);
			column_name();
			setState(4128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4116);
				match(IN);
				setState(4117);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4118);
					for_like_part();
					}
				}

				setState(4121);
				match(FROM);
				setState(4122);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4123);
				match(TO);
				setState(4124);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4125);
				for_increment_decrement_type();
				setState(4126);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_like_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4130);
			match(LIKE);
			setState(4131);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_increment_decrement_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4133);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4135);
			match(FOR);
			setState(4136);
			match(LEFT_PAREN);
			setState(4137);
			column_name();
			setState(4142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4138);
				match(COMMA);
				setState(4139);
				column_name();
				}
				}
				setState(4144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4145);
			match(RIGHT_PAREN);
			setState(4146);
			match(IN);
			setState(4147);
			match(LEFT_PAREN);
			setState(4160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(4148);
				subquery();
				}
				break;
			case 2:
				{
				setState(4149);
				match(LEFT_PAREN);
				setState(4150);
				expression_list();
				setState(4155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4151);
					match(COMMA);
					setState(4152);
					expression_list();
					}
					}
					setState(4157);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4158);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4162);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unary_expressionContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_unary_expression);
		try {
			setState(4182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4164);
				match(MINUS_SIGN);
				setState(4165);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4166);
				match(PLUS_SIGN);
				setState(4167);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4168);
				match(PRIOR);
				setState(4169);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4170);
				match(CONNECT_BY_ROOT);
				setState(4171);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4172);
				match(NEW);
				setState(4173);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4174);
				match(DISTINCT);
				setState(4175);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4176);
				match(ALL);
				setState(4177);
				unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4178);
				case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4179);
				quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4180);
				standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4181);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_case_statement);
		try {
			setState(4186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4184);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4185);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(4188);
				label_name();
				}
				break;
			}
			setState(4191);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4192);
			expression();
			setState(4194); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4193);
				simple_case_when_part();
				}
				}
				setState(4196); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4198);
				case_else_part();
				}
			}

			setState(4201);
			match(END);
			setState(4203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				{
				setState(4202);
				match(CASE);
				}
				break;
			}
			setState(4206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(4205);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4208);
			match(WHEN);
			setState(4209);
			expression_wrapper();
			setState(4210);
			match(THEN);
			setState(4213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(4211);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4212);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				{
				setState(4215);
				label_name();
				}
				break;
			}
			setState(4218);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4220); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4219);
				searched_case_when_part();
				}
				}
				setState(4222); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4224);
				case_else_part();
				}
			}

			setState(4227);
			match(END);
			setState(4229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				setState(4228);
				match(CASE);
				}
				break;
			}
			setState(4232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				{
				setState(4231);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4234);
			match(WHEN);
			setState(4235);
			condition_wrapper();
			setState(4236);
			match(THEN);
			setState(4239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(4237);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4238);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			match(ELSE);
			setState(4244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				setState(4242);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4243);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Collection_type_expressionContext collection_type_expression() {
			return getRuleContext(Collection_type_expressionContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_atom);
		try {
			int _alt;
			setState(4267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4246);
				table_element();
				setState(4247);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4249);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4250);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4251);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4252);
				match(LEFT_PAREN);
				setState(4264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
				case 1:
					{
					setState(4253);
					subquery();
					setState(4254);
					match(RIGHT_PAREN);
					setState(4258);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,522,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4255);
							subquery_operation_part();
							}
							} 
						}
						setState(4260);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,522,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4261);
					expression_or_vector();
					setState(4262);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4266);
				collection_type_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_or_vector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4269);
			expression();
			setState(4271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4270);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vector_exprContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVector_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4273);
			match(COMMA);
			setState(4274);
			expression();
			setState(4279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4275);
				match(COMMA);
				setState(4276);
				expression();
				}
				}
				setState(4281);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4282);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(4283);
				match(LEFT_PAREN);
				setState(4284);
				subquery();
				setState(4285);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4287);
				match(LEFT_PAREN);
				setState(4288);
				expression();
				setState(4293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4289);
					match(COMMA);
					setState(4290);
					expression();
					}
					}
					setState(4295);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4296);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Plsql_type_conversionContext extends ParserRuleContext {
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode TO_NUMBER() { return getToken(PlSqlParser.TO_NUMBER, 0); }
		public Plsql_type_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_type_conversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPlsql_type_conversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPlsql_type_conversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPlsql_type_conversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_type_conversionContext plsql_type_conversion() throws RecognitionException {
		Plsql_type_conversionContext _localctx = new Plsql_type_conversionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_plsql_type_conversion);
		int _la;
		try {
			setState(4324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO_CHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4300);
				match(TO_CHAR);
				setState(4301);
				match(LEFT_PAREN);
				setState(4302);
				expression();
				setState(4307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4303);
					match(COMMA);
					setState(4304);
					expression();
					}
					}
					setState(4309);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4310);
				match(RIGHT_PAREN);
				}
				break;
			case TO_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4312);
				match(TO_NUMBER);
				setState(4313);
				match(LEFT_PAREN);
				setState(4314);
				expression();
				setState(4319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4315);
					match(COMMA);
					setState(4316);
					expression();
					}
					}
					setState(4321);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4322);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_type_conversionContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Plsql_type_conversionContext plsql_type_conversion() {
			return getRuleContext(Plsql_type_conversionContext.class,0);
		}
		public Sql_type_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_type_conversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_type_conversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_type_conversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_type_conversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_type_conversionContext sql_type_conversion() throws RecognitionException {
		Sql_type_conversionContext _localctx = new Sql_type_conversionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_sql_type_conversion);
		int _la;
		try {
			setState(4341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CAST:
			case XMLCAST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4326);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4327);
				match(LEFT_PAREN);
				setState(4334);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					setState(4328);
					match(MULTISET);
					setState(4329);
					match(LEFT_PAREN);
					setState(4330);
					subquery();
					setState(4331);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4333);
					concatenation_wrapper();
					}
					break;
				}
				setState(4336);
				match(AS);
				setState(4337);
				type_spec();
				setState(4338);
				match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
			case TO_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4340);
				plsql_type_conversion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_table_columnsContext extends ParserRuleContext {
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Xml_table_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnsContext xml_table_columns() throws RecognitionException {
		Xml_table_columnsContext _localctx = new Xml_table_columnsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_xml_table_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4343);
			match(COLUMNS);
			setState(4344);
			xml_table_column();
			setState(4349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4345);
				match(COMMA);
				setState(4346);
				xml_table_column();
				}
				}
				setState(4351);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_tableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public Xml_table_columnsContext xml_table_columns() {
			return getRuleContext(Xml_table_columnsContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public Xml_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_tableContext xml_table() throws RecognitionException {
		Xml_tableContext _localctx = new Xml_tableContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_xml_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4352);
			match(XMLTABLE);
			setState(4353);
			match(LEFT_PAREN);
			setState(4357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(4354);
				xml_namespaces_clause();
				setState(4355);
				match(COMMA);
				}
				break;
			}
			setState(4359);
			concatenation_wrapper();
			setState(4361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(4360);
				xml_passing_clause();
				}
			}

			setState(4364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(4363);
				xml_table_columns();
				}
			}

			setState(4366);
			match(RIGHT_PAREN);
			setState(4369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4367);
				match(PERIOD);
				setState(4368);
				general_element_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Standard_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Sql_type_conversionContext sql_type_conversion() {
			return getRuleContext(Sql_type_conversionContext.class,0);
		}
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode MOD() { return getToken(PlSqlParser.MOD, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public Xml_tableContext xml_table() {
			return getRuleContext(Xml_tableContext.class,0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStandard_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStandard_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(4659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4371);
				over_clause_keyword();
				setState(4372);
				function_argument_analytic();
				setState(4374);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(4373);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4376);
				regular_id();
				setState(4377);
				function_argument_modeling();
				setState(4379);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
				case 1:
					{
					setState(4378);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4381);
				match(COUNT);
				setState(4382);
				match(LEFT_PAREN);
				setState(4388);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4383);
					match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREADTH:
				case BULK:
				case BY:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHECK:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DEPTH:
				case DESC:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case ELSE:
				case ELSIF:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case END:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EXCEPT:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXCLUSIVE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUP:
				case GROUPING:
				case HASH:
				case HAVING:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case IN:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEX:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECT:
				case INTERVAL:
				case INTO:
				case INVALIDATE:
				case IS:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUS:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MOD:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NONE:
				case NOORDER:
				case NOSCHEMACHECK:
				case NOT:
				case NOWAIT:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OF:
				case OFF:
				case OID:
				case OLD:
				case ON:
				case ONLY:
				case OPEN:
				case OPTION:
				case OR:
				case ORADATA:
				case ORDER:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PIVOT:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SEARCH:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENCE:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHARE:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case START:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLE:
				case THE:
				case THEN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO:
				case TO_CHAR:
				case TO_NUMBER:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNION:
				case UNIQUE:
				case UNLIMITED:
				case UNPIVOT:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case USING:
				case VALIDATE:
				case VALUE:
				case VALUES:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4385);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
					case 1:
						{
						setState(4384);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(4387);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4390);
				match(RIGHT_PAREN);
				setState(4392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(4391);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4394);
				sql_type_conversion();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4395);
				match(CHR);
				setState(4396);
				match(LEFT_PAREN);
				setState(4397);
				concatenation_wrapper();
				setState(4398);
				match(USING);
				setState(4399);
				match(NCHAR_CS);
				setState(4400);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4402);
				match(COLLECT);
				setState(4403);
				match(LEFT_PAREN);
				setState(4405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					setState(4404);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4407);
				concatenation_wrapper();
				setState(4409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4408);
					collect_order_by_part();
					}
				}

				setState(4411);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4413);
				within_or_over_clause_keyword();
				setState(4414);
				function_argument();
				setState(4416); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4415);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4418); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4420);
				match(DECOMPOSE);
				setState(4421);
				match(LEFT_PAREN);
				setState(4422);
				concatenation_wrapper();
				setState(4424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4423);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4426);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4428);
				match(EXTRACT);
				setState(4429);
				match(LEFT_PAREN);
				setState(4430);
				regular_id();
				setState(4431);
				match(FROM);
				setState(4432);
				concatenation_wrapper();
				setState(4433);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4435);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4436);
				function_argument_analytic();
				setState(4438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4437);
					respect_or_ignore_nulls();
					}
				}

				setState(4440);
				over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4442);
				standard_prediction_function_keyword();
				setState(4443);
				match(LEFT_PAREN);
				setState(4444);
				expression_wrapper();
				setState(4449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4445);
					match(COMMA);
					setState(4446);
					expression_wrapper();
					}
					}
					setState(4451);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4452);
					cost_matrix_clause();
					}
				}

				setState(4456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4455);
					using_clause();
					}
				}

				setState(4458);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4460);
				match(MOD);
				setState(4461);
				match(LEFT_PAREN);
				setState(4462);
				expression();
				setState(4463);
				match(COMMA);
				setState(4464);
				expression();
				setState(4465);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4467);
				match(TRANSLATE);
				setState(4468);
				match(LEFT_PAREN);
				setState(4469);
				expression_wrapper();
				setState(4472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4470);
					match(USING);
					setState(4471);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4474);
					match(COMMA);
					setState(4475);
					expression_wrapper();
					}
					}
					setState(4480);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4481);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4483);
				match(TREAT);
				setState(4484);
				match(LEFT_PAREN);
				setState(4485);
				expression_wrapper();
				setState(4486);
				match(AS);
				setState(4488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
				case 1:
					{
					setState(4487);
					match(REF);
					}
					break;
				}
				setState(4490);
				type_spec();
				setState(4491);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4493);
				match(TRIM);
				setState(4494);
				match(LEFT_PAREN);
				setState(4502);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(4496);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
					case 1:
						{
						setState(4495);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(4499);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
					case 1:
						{
						setState(4498);
						expression_wrapper();
						}
						break;
					}
					setState(4501);
					match(FROM);
					}
					break;
				}
				setState(4504);
				expression_wrapper();
				setState(4505);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4507);
				match(XMLAGG);
				setState(4508);
				match(LEFT_PAREN);
				setState(4509);
				expression_wrapper();
				setState(4511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4510);
					order_by_clause();
					}
				}

				setState(4513);
				match(RIGHT_PAREN);
				setState(4516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4514);
					match(PERIOD);
					setState(4515);
					general_element_part();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4518);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4519);
				match(LEFT_PAREN);
				setState(4520);
				xml_multiuse_expression_element();
				setState(4525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4521);
					match(COMMA);
					setState(4522);
					xml_multiuse_expression_element();
					}
					}
					setState(4527);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4528);
				match(RIGHT_PAREN);
				setState(4531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4529);
					match(PERIOD);
					setState(4530);
					general_element_part();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4533);
				match(XMLELEMENT);
				setState(4534);
				match(LEFT_PAREN);
				setState(4536);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
				case 1:
					{
					setState(4535);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4539);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(4538);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4541);
				expression_wrapper();
				setState(4544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
				case 1:
					{
					setState(4542);
					match(COMMA);
					setState(4543);
					xml_attributes_clause();
					}
					break;
				}
				setState(4553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4546);
					match(COMMA);
					setState(4547);
					expression_wrapper();
					setState(4549);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 217017207043915775L) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(4548);
						column_alias();
						}
					}

					}
					}
					setState(4555);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4556);
				match(RIGHT_PAREN);
				setState(4559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4557);
					match(PERIOD);
					setState(4558);
					general_element_part();
					}
				}

				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4561);
				match(XMLEXISTS);
				setState(4562);
				match(LEFT_PAREN);
				setState(4563);
				expression_wrapper();
				setState(4565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4564);
					xml_passing_clause();
					}
				}

				setState(4567);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4569);
				match(XMLPARSE);
				setState(4570);
				match(LEFT_PAREN);
				setState(4571);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4572);
				concatenation_wrapper();
				setState(4574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4573);
					match(WELLFORMED);
					}
				}

				setState(4576);
				match(RIGHT_PAREN);
				setState(4579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4577);
					match(PERIOD);
					setState(4578);
					general_element_part();
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4581);
				match(XMLPI);
				setState(4582);
				match(LEFT_PAREN);
				setState(4587);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4583);
					match(NAME);
					setState(4584);
					id();
					}
					break;
				case EVALNAME:
					{
					setState(4585);
					match(EVALNAME);
					setState(4586);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4589);
					match(COMMA);
					setState(4590);
					concatenation_wrapper();
					}
				}

				setState(4593);
				match(RIGHT_PAREN);
				setState(4596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4594);
					match(PERIOD);
					setState(4595);
					general_element_part();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4598);
				match(XMLQUERY);
				setState(4599);
				match(LEFT_PAREN);
				setState(4600);
				concatenation_wrapper();
				setState(4602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4601);
					xml_passing_clause();
					}
				}

				setState(4604);
				match(RETURNING);
				setState(4605);
				match(CONTENT);
				setState(4609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4606);
					match(NULL);
					setState(4607);
					match(ON);
					setState(4608);
					match(EMPTY);
					}
				}

				setState(4611);
				match(RIGHT_PAREN);
				setState(4614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4612);
					match(PERIOD);
					setState(4613);
					general_element_part();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4616);
				match(XMLROOT);
				setState(4617);
				match(LEFT_PAREN);
				setState(4618);
				concatenation_wrapper();
				setState(4621);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(4619);
					match(COMMA);
					setState(4620);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(4625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4623);
					match(COMMA);
					setState(4624);
					xmlroot_param_standalone_part();
					}
				}

				setState(4627);
				match(RIGHT_PAREN);
				setState(4630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4628);
					match(PERIOD);
					setState(4629);
					general_element_part();
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4632);
				match(XMLSERIALIZE);
				setState(4633);
				match(LEFT_PAREN);
				setState(4634);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4635);
				concatenation_wrapper();
				setState(4638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4636);
					match(AS);
					setState(4637);
					type_spec();
					}
				}

				setState(4641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4640);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4644);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4643);
					xmlserialize_param_version_part();
					}
				}

				setState(4647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4646);
					xmlserialize_param_ident_part();
					}
				}

				setState(4651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4649);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4650);
					match(DEFAULTS);
					}
				}

				setState(4653);
				match(RIGHT_PAREN);
				setState(4656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4654);
					match(PERIOD);
					setState(4655);
					general_element_part();
					}
				}

				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4658);
				xml_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOver_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4661);
			_la = _input.LA(1);
			if ( !(((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & 65535L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4663);
			_la = _input.LA(1);
			if ( !(((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & 127L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStandard_prediction_function_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4665);
			_la = _input.LA(1);
			if ( !(((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & 63L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4667);
			match(OVER);
			setState(4668);
			match(LEFT_PAREN);
			setState(4670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4669);
				query_partition_clause();
				}
			}

			setState(4676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4672);
				order_by_clause();
				setState(4674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4673);
					windowing_clause();
					}
				}

				}
			}

			setState(4678);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680);
			windowing_type();
			setState(4687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				{
				setState(4681);
				match(BETWEEN);
				setState(4682);
				windowing_elements();
				setState(4683);
				match(AND);
				setState(4684);
				windowing_elements();
				}
				break;
			case 2:
				{
				setState(4686);
				windowing_elements();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4689);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_windowing_elements);
		int _la;
		try {
			setState(4698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4691);
				match(UNBOUNDED);
				setState(4692);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4693);
				match(CURRENT);
				setState(4694);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4695);
				concatenation_wrapper();
				setState(4696);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4700);
			match(USING);
			setState(4710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(4701);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4702);
				using_element();
				setState(4707);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4703);
						match(COMMA);
						setState(4704);
						using_element();
						}
						} 
					}
					setState(4709);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUsing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				setState(4712);
				match(IN);
				setState(4714);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(4713);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4716);
				match(OUT);
				}
				break;
			}
			setState(4719);
			select_list_elements();
			setState(4721);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				{
				setState(4720);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollect_order_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4723);
			match(ORDER);
			setState(4724);
			match(BY);
			setState(4725);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWithin_or_over_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_within_or_over_part);
		try {
			setState(4734);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4727);
				match(WITHIN);
				setState(4728);
				match(GROUP);
				setState(4729);
				match(LEFT_PAREN);
				setState(4730);
				order_by_clause();
				setState(4731);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4733);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCost_matrix_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4736);
			match(COST);
			setState(4754);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(4737);
				match(MODEL);
				setState(4739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(4738);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(4741);
				match(LEFT_PAREN);
				setState(4742);
				cost_class_name();
				setState(4747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4743);
					match(COMMA);
					setState(4744);
					cost_class_name();
					}
					}
					setState(4749);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4750);
				match(RIGHT_PAREN);
				setState(4751);
				match(VALUES);
				setState(4752);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_passing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4756);
			match(PASSING);
			setState(4759);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				{
				setState(4757);
				match(BY);
				setState(4758);
				match(VALUE);
				}
				break;
			}
			setState(4761);
			expression_wrapper();
			setState(4763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				{
				setState(4762);
				column_alias();
				}
				break;
			}
			setState(4772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4765);
				match(COMMA);
				setState(4766);
				expression_wrapper();
				setState(4768);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
				case 1:
					{
					setState(4767);
					column_alias();
					}
					break;
				}
				}
				}
				setState(4774);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4775);
			match(XMLATTRIBUTES);
			setState(4776);
			match(LEFT_PAREN);
			setState(4778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				{
				setState(4777);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
			case 1:
				{
				setState(4780);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4783);
			xml_multiuse_expression_element();
			setState(4788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4784);
				match(COMMA);
				setState(4785);
				xml_multiuse_expression_element();
				}
				}
				setState(4790);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4791);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_namespaces_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4793);
			match(XMLNAMESPACES);
			setState(4794);
			match(LEFT_PAREN);
			setState(4806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				{
				setState(4795);
				concatenation_wrapper();
				setState(4796);
				column_alias();
				setState(4803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4797);
					match(COMMA);
					setState(4798);
					concatenation_wrapper();
					setState(4799);
					column_alias();
					}
					}
					setState(4805);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(4809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4808);
				xml_general_default_part();
				}
			}

			setState(4811);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4813);
			xml_column_name();
			setState(4824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				setState(4814);
				match(FOR);
				setState(4815);
				match(ORDINALITY);
				}
				break;
			case 2:
				{
				setState(4816);
				type_spec();
				setState(4819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(4817);
					match(PATH);
					setState(4818);
					concatenation_wrapper();
					}
				}

				setState(4822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4821);
					xml_general_default_part();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_general_default_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4826);
			match(DEFAULT);
			setState(4827);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_multiuse_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4829);
			expression();
			setState(4838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 144396663052566527L) != 0) || _la==REGULAR_ID) {
				{
				setState(4831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(4830);
					match(AS);
					}
					break;
				}
				setState(4836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4833);
					id_expression();
					}
					break;
				case 2:
					{
					setState(4834);
					match(EVALNAME);
					setState(4835);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlroot_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4840);
			match(VERSION);
			setState(4844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
			case 1:
				{
				setState(4841);
				match(NO);
				setState(4842);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(4843);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlroot_param_standalone_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4846);
			match(STANDALONE);
			setState(4852);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(4847);
				match(YES);
				}
				break;
			case NO:
				{
				setState(4848);
				match(NO);
				setState(4850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4849);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4854);
			match(ENCODING);
			setState(4855);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4857);
			match(VERSION);
			setState(4858);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_ident_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(4868);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4860);
				match(NO);
				setState(4861);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4862);
				match(INDENT);
				setState(4866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(4863);
					match(SIZE);
					setState(4864);
					match(EQUALS_OP);
					setState(4865);
					concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Boolean_static_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Boolean_static_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_static_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBoolean_static_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBoolean_static_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBoolean_static_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Boolean_static_expressionContext boolean_static_expression() throws RecognitionException {
		Boolean_static_expressionContext _localctx = new Boolean_static_expressionContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_boolean_static_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4870);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Preprocessor_internal_statementContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Sql_scriptContext sql_script() {
			return getRuleContext(Sql_scriptContext.class,0);
		}
		public Preprocessor_internal_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preprocessor_internal_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPreprocessor_internal_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPreprocessor_internal_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPreprocessor_internal_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Preprocessor_internal_statementContext preprocessor_internal_statement() throws RecognitionException {
		Preprocessor_internal_statementContext _localctx = new Preprocessor_internal_statementContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_preprocessor_internal_statement);
		int _la;
		try {
			setState(4879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4873); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4872);
					declare_spec();
					}
					}
					setState(4875); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -4194556L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 144396663052566527L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & 65539L) != 0) || _la==REGULAR_ID );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4877);
				seq_of_statements();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4878);
				sql_script();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Preprocessor_statementContext extends ParserRuleContext {
		public TerminalNode PP_IF() { return getToken(PlSqlParser.PP_IF, 0); }
		public List<Boolean_static_expressionContext> boolean_static_expression() {
			return getRuleContexts(Boolean_static_expressionContext.class);
		}
		public Boolean_static_expressionContext boolean_static_expression(int i) {
			return getRuleContext(Boolean_static_expressionContext.class,i);
		}
		public List<TerminalNode> PP_THEN() { return getTokens(PlSqlParser.PP_THEN); }
		public TerminalNode PP_THEN(int i) {
			return getToken(PlSqlParser.PP_THEN, i);
		}
		public List<Preprocessor_internal_statementContext> preprocessor_internal_statement() {
			return getRuleContexts(Preprocessor_internal_statementContext.class);
		}
		public Preprocessor_internal_statementContext preprocessor_internal_statement(int i) {
			return getRuleContext(Preprocessor_internal_statementContext.class,i);
		}
		public TerminalNode PP_END() { return getToken(PlSqlParser.PP_END, 0); }
		public List<TerminalNode> PP_ELSIF() { return getTokens(PlSqlParser.PP_ELSIF); }
		public TerminalNode PP_ELSIF(int i) {
			return getToken(PlSqlParser.PP_ELSIF, i);
		}
		public TerminalNode PP_ELSE() { return getToken(PlSqlParser.PP_ELSE, 0); }
		public Preprocessor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preprocessor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPreprocessor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPreprocessor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPreprocessor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Preprocessor_statementContext preprocessor_statement() throws RecognitionException {
		Preprocessor_statementContext _localctx = new Preprocessor_statementContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_preprocessor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4881);
			match(PP_IF);
			setState(4882);
			boolean_static_expression();
			setState(4883);
			match(PP_THEN);
			setState(4884);
			preprocessor_internal_statement();
			setState(4892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PP_ELSIF) {
				{
				{
				setState(4885);
				match(PP_ELSIF);
				setState(4886);
				boolean_static_expression();
				setState(4887);
				match(PP_THEN);
				setState(4888);
				preprocessor_internal_statement();
				}
				}
				setState(4894);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PP_ELSE) {
				{
				setState(4895);
				match(PP_ELSE);
				setState(4896);
				preprocessor_internal_statement();
				}
			}

			setState(4899);
			match(PP_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPartition_extension_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4901);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4902);
				match(FOR);
				}
			}

			setState(4905);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_column_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
			case 1:
				{
				setState(4907);
				match(AS);
				}
				break;
			}
			setState(4912);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4910);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(4911);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4916);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4914);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(4915);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlias_quoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4918);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4920);
			match(WHERE);
			setState(4923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4921);
				current_of_clause();
				}
				break;
			case 2:
				{
				setState(4922);
				condition_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCurrent_of_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			match(CURRENT);
			setState(4926);
			match(OF);
			setState(4927);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_clause_variableContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public Into_clause_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInto_clause_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInto_clause_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInto_clause_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clause_variableContext into_clause_variable() throws RecognitionException {
		Into_clause_variableContext _localctx = new Into_clause_variableContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_into_clause_variable);
		try {
			setState(4931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4929);
				variable_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4930);
				collection_assoc_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public List<Into_clause_variableContext> into_clause_variable() {
			return getRuleContexts(Into_clause_variableContext.class);
		}
		public Into_clause_variableContext into_clause_variable(int i) {
			return getRuleContext(Into_clause_variableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_into_clause);
		int _la;
		try {
			setState(4953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4933);
				match(INTO);
				setState(4934);
				into_clause_variable();
				setState(4939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4935);
					match(COMMA);
					setState(4936);
					into_clause_variable();
					}
					}
					setState(4941);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4942);
				match(BULK);
				setState(4943);
				match(COLLECT);
				setState(4944);
				match(INTO);
				setState(4945);
				into_clause_variable();
				setState(4950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4946);
					match(COMMA);
					setState(4947);
					into_clause_variable();
					}
					}
					setState(4952);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_xml_column_name);
		try {
			setState(4957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4955);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4956);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCost_class_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4959);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Attribute_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4961);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSavepoint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4963);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollback_segment_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4965);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_var_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_var_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4967);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4969);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Routine_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4971);
			id();
			setState(4976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4972);
				match(PERIOD);
				setState(4973);
				id_expression();
				}
				}
				setState(4978);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(4979);
				match(AT_SIGN);
				setState(4980);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				{
				setState(4983);
				schema_name();
				setState(4984);
				match(PERIOD);
				}
				break;
			}
			setState(4988);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitImplementation_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4990);
			id();
			setState(4993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4991);
				match(PERIOD);
				setState(4992);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Parameter_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4995);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReference_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4997);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Main_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMain_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4999);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAggregate_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5001);
			id();
			setState(5006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5002);
				match(PERIOD);
				setState(5003);
				id_expression();
				}
				}
				setState(5008);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5009);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5011);
			id();
			setState(5016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5012);
				match(PERIOD);
				setState(5013);
				id_expression();
				}
				}
				setState(5018);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5019);
				match(AT_SIGN);
				setState(5020);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5023);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5025);
			id_expression();
			setState(5030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5026);
				match(PERIOD);
				setState(5027);
				id_expression();
				}
				}
				setState(5032);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5033);
			id_expression();
			setState(5038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5034);
				match(PERIOD);
				setState(5035);
				id_expression();
				}
				}
				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5041);
			id();
			setState(5046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5042);
				match(PERIOD);
				setState(5043);
				id_expression();
				}
				}
				setState(5048);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5049);
			id();
			setState(5052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5050);
				match(PERIOD);
				setState(5051);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Procedure_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5054);
			id();
			setState(5057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5055);
				match(PERIOD);
				setState(5056);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5059);
			id();
			setState(5062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5060);
				match(PERIOD);
				setState(5061);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_variable_name);
		int _la;
		try {
			setState(5074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5064);
					match(INTRODUCER);
					setState(5065);
					char_set_name();
					}
				}

				setState(5068);
				id_expression();
				setState(5071);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
				case 1:
					{
					setState(5069);
					match(PERIOD);
					setState(5070);
					id_expression();
					}
					break;
				}
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5073);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5076);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_cursor_name);
		try {
			setState(5080);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5078);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5079);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_record_name);
		try {
			setState(5084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5082);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5083);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collection_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_collection_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			id();
			setState(5089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5087);
				match(PERIOD);
				setState(5088);
				id_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Link_nameContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_link_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5091);
			id();
			setState(5096);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,655,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5092);
					match(PERIOD);
					setState(5093);
					id();
					}
					} 
				}
				setState(5098);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,655,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5099);
			id();
			setState(5104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5100);
				match(PERIOD);
				setState(5101);
				id_expression();
				}
				}
				setState(5106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tableview_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5107);
			id();
			setState(5110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				{
				setState(5108);
				match(PERIOD);
				setState(5109);
				id_expression();
				}
				break;
			}
			setState(5115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				setState(5112);
				match(AT_SIGN);
				setState(5113);
				link_name();
				}
				break;
			case 2:
				{
				setState(5114);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitChar_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5117);
			id_expression();
			setState(5122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5118);
				match(PERIOD);
				setState(5119);
				id_expression();
				}
				}
				setState(5124);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitKeep_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5125);
			match(KEEP);
			setState(5126);
			match(LEFT_PAREN);
			setState(5127);
			match(DENSE_RANK);
			setState(5128);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5129);
			order_by_clause();
			setState(5130);
			match(RIGHT_PAREN);
			setState(5132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5131);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_argumentContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5134);
			match(LEFT_PAREN);
			setState(5136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36028797018963969L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 1423981907179208703L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 4194499L) != 0) || _la==REGULAR_ID) {
				{
				setState(5135);
				argument();
				}
			}

			setState(5142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5138);
				match(COMMA);
				setState(5139);
				argument();
				}
				}
				setState(5144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5145);
			match(RIGHT_PAREN);
			setState(5147);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				{
				setState(5146);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_argument_analyticContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument_analytic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5149);
			match(LEFT_PAREN);
			setState(5154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36028797018963969L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 1423981907179208703L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & 4194499L) != 0) || _la==REGULAR_ID) {
				{
				setState(5150);
				argument();
				setState(5152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5151);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5156);
				match(COMMA);
				setState(5157);
				argument();
				setState(5159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5158);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5165);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5166);
			match(RIGHT_PAREN);
			setState(5168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				setState(5167);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_argument_modelingContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument_modeling(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5170);
			match(LEFT_PAREN);
			setState(5171);
			column_name();
			setState(5184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5172);
				match(COMMA);
				setState(5175);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5173);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5174);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5177);
					match(COMMA);
					setState(5180);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5178);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5179);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5186);
			match(USING);
			setState(5206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				{
				setState(5187);
				tableview_name();
				setState(5188);
				match(PERIOD);
				setState(5189);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5191);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5192);
				expression();
				setState(5194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 217017207043915775L) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(5193);
					column_alias();
					}
				}

				setState(5203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5196);
					match(COMMA);
					setState(5197);
					expression();
					setState(5199);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 217017207043915775L) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(5198);
						column_alias();
						}
					}

					}
					}
					setState(5205);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5208);
			match(RIGHT_PAREN);
			setState(5210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5209);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRespect_or_ignore_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5212);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5213);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArgumentContext extends ParserRuleContext {
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ASSOCIATION_OPERATOR() { return getToken(PlSqlParser.ASSOCIATION_OPERATOR, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(5215);
				id();
				setState(5216);
				match(ASSOCIATION_OPERATOR);
				}
				break;
			}
			setState(5220);
			expression_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_type_spec);
		int _la;
		try {
			setState(5234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5222);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5224);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(5223);
					match(REF);
					}
					break;
				}
				setState(5226);
				type_name();
				setState(5229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(5227);
					match(AT_SIGN);
					setState(5228);
					link_name();
					}
				}

				setState(5232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5231);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_datatype);
		int _la;
		try {
			setState(5264);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5236);
				native_datatype_element();
				setState(5238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5237);
					precision_part();
					}
					break;
				}
				setState(5246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5240);
					match(WITH);
					setState(5242);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5241);
						match(LOCAL);
						}
					}

					setState(5244);
					match(TIME);
					setState(5245);
					match(ZONE);
					}
				}

				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5248);
				match(INTERVAL);
				setState(5249);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5250);
					match(LEFT_PAREN);
					setState(5251);
					expression_wrapper();
					setState(5252);
					match(RIGHT_PAREN);
					}
				}

				setState(5256);
				match(TO);
				setState(5257);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5262);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					setState(5258);
					match(LEFT_PAREN);
					setState(5259);
					expression_wrapper();
					setState(5260);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Precision_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5266);
			match(LEFT_PAREN);
			setState(5267);
			numeric();
			setState(5270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5268);
				match(COMMA);
				setState(5269);
				numeric();
				}
			}

			setState(5273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5272);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5275);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_native_datatype_element);
		int _la;
		try {
			setState(5337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5277);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5278);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5279);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5280);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5281);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5282);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5283);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5284);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5285);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5286);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5287);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5288);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5289);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5290);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5291);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5292);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5293);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5294);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5295);
				match(DOUBLE);
				setState(5297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5296);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5299);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5300);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5301);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5302);
				match(LONG);
				setState(5304);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5303);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5306);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5307);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5308);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5309);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5310);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5311);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5312);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5313);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5314);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5315);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5316);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5317);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5318);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5319);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5320);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5321);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5322);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5323);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5324);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5325);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5326);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5327);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5328);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5329);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5330);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5331);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5332);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5333);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5334);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5335);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5336);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(PlSqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(PlSqlParser.BINDVAR, i);
		}
		public List<TerminalNode> COLON() { return getTokens(PlSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(PlSqlParser.COLON, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5339);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5340);
				match(COLON);
				setState(5341);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				{
				setState(5345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5344);
					match(INDICATOR);
					}
				}

				setState(5350);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5347);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5348);
					match(COLON);
					setState(5349);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5358);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5354);
					match(PERIOD);
					setState(5355);
					general_element_part();
					}
					} 
				}
				setState(5360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_general_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5361);
			general_element_part();
			setState(5366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5362);
				match(PERIOD);
				setState(5363);
				general_element_part();
				}
				}
				setState(5368);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_element_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_element_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5369);
				match(INTRODUCER);
				setState(5370);
				char_set_name();
				}
			}

			setState(5373);
			id_expression();
			setState(5378);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,701,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5374);
					match(PERIOD);
					setState(5375);
					id_expression();
					}
					} 
				}
				setState(5380);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,701,_ctx);
			}
			setState(5382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				setState(5381);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5384);
				match(INTRODUCER);
				setState(5385);
				char_set_name();
				}
			}

			setState(5388);
			id_expression();
			setState(5393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5389);
				match(PERIOD);
				setState(5390);
				id_expression();
				}
				}
				setState(5395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(PlSqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(PlSqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(PlSqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(PlSqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(PlSqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(PlSqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(PlSqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_constant);
		int _la;
		try {
			setState(5458);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5396);
				match(TIMESTAMP);
				setState(5399);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5397);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5398);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
				case 1:
					{
					setState(5401);
					match(AT);
					setState(5402);
					match(TIME);
					setState(5403);
					match(ZONE);
					setState(5404);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5407);
				match(INTERVAL);
				setState(5411);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5408);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5409);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BREADTH:
				case BULK:
				case BY:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHECK:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DEPTH:
				case DESC:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DROP:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case ELSE:
				case ELSIF:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case END:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EXCEPT:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXCLUSIVE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FROM:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUP:
				case GROUPING:
				case HASH:
				case HAVING:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case IN:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEX:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECT:
				case INTERVAL:
				case INTO:
				case INVALIDATE:
				case IS:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUS:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODE:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NONE:
				case NOORDER:
				case NOSCHEMACHECK:
				case NOT:
				case NOWAIT:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OF:
				case OFF:
				case OID:
				case OLD:
				case ON:
				case ONLY:
				case OPEN:
				case OPTION:
				case OR:
				case ORADATA:
				case ORDER:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PIVOT:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SEARCH:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENCE:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHARE:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case START:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLE:
				case THE:
				case THEN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO:
				case TO_CHAR:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNION:
				case UNIQUE:
				case UNLIMITED:
				case UNPIVOT:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case USING:
				case VALIDATE:
				case VALUE:
				case VALUES:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHEN:
				case WHENEVER:
				case WHERE:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5410);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5413);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(5414);
					match(LEFT_PAREN);
					setState(5417);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5415);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5416);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5424);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5419);
						match(COMMA);
						setState(5422);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5420);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5421);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5426);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
				case 1:
					{
					setState(5429);
					match(TO);
					setState(5442);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5430);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5431);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5432);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5433);
						match(SECOND);
						setState(5440);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
						case 1:
							{
							setState(5434);
							match(LEFT_PAREN);
							setState(5437);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5435);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5436);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5439);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5446);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5447);
				match(DATE);
				setState(5448);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5449);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5450);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5451);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5452);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5453);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5454);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5455);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5456);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5457);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5462);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5464);
				match(INTRODUCER);
				setState(5465);
				char_set_name();
				}
			}

			setState(5468);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_id_expression);
		try {
			setState(5472);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BREADTH:
			case BULK:
			case BY:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEPTH:
			case DESC:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case ELSE:
			case ELSIF:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case END:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EXCEPT:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FETCH:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FOR:
			case FORALL:
			case FORCE:
			case FROM:
			case FULL:
			case FUNCTION:
			case GOTO:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HIDE:
			case HOUR:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEX:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case INVALIDATE:
			case IS:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUS:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODE:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NONE:
			case NOORDER:
			case NOSCHEMACHECK:
			case NOT:
			case NOWAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OF:
			case OFF:
			case OID:
			case OLD:
			case ON:
			case ONLY:
			case OPEN:
			case OPTION:
			case OR:
			case ORADATA:
			case ORDER:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PIVOT:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROCEDURE:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SEARCH:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENCE:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHARE:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case START:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO:
			case TO_CHAR:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNION:
			case UNIQUE:
			case UNLIMITED:
			case UNPIVOT:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHEN:
			case WHENEVER:
			case WHERE:
			case WHILE:
			case WITH:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5470);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5471);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(PlSqlParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(PlSqlParser.GREATER_THAN_OP, 0); }
		public TerminalNode EXCLAMATION_OPERATOR_PART() { return getToken(PlSqlParser.EXCLAMATION_OPERATOR_PART, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public TerminalNode CARRET_OPERATOR_PART() { return getToken(PlSqlParser.CARRET_OPERATOR_PART, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNot_equal_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_not_equal_op);
		try {
			setState(5481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5474);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5475);
				match(LESS_THAN_OP);
				setState(5476);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5477);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5478);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5479);
				match(CARRET_OPERATOR_PART);
				setState(5480);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(PlSqlParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(PlSqlParser.GREATER_THAN_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGreater_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_greater_than_or_equals_op);
		try {
			setState(5486);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5483);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5484);
				match(GREATER_THAN_OP);
				setState(5485);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(PlSqlParser.LESS_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(PlSqlParser.LESS_THAN_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLess_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_less_than_or_equals_op);
		try {
			setState(5491);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5488);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5489);
				match(LESS_THAN_OP);
				setState(5490);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Concatenation_opContext extends ParserRuleContext {
		public TerminalNode CONCATENATION_OP() { return getToken(PlSqlParser.CONCATENATION_OP, 0); }
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(PlSqlParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(PlSqlParser.VERTICAL_BAR, i);
		}
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_concatenation_op);
		try {
			setState(5496);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5493);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5494);
				match(VERTICAL_BAR);
				setState(5495);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Outer_join_signContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5498);
			match(LEFT_PAREN);
			setState(5499);
			match(PLUS_SIGN);
			setState(5500);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CASE() { return getToken(PlSqlParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
		public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPT() { return getToken(PlSqlParser.EXCEPT, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode IF() { return getToken(PlSqlParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(PlSqlParser.INOUT, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(PlSqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode NOCOPY() { return getToken(PlSqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode SQL_PERCENT_ROWCOUNT() { return getToken(PlSqlParser.SQL_PERCENT_ROWCOUNT, 0); }
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(PlSqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5502);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -4194560L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -65537L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36029346774777857L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -6562710028289L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1048577L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 281474976710655L) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0277\u1581\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0001\u0000\u0004"+
		"\u0000\u030c\b\u0000\u000b\u0000\f\u0000\u030d\u0001\u0001\u0005\u0001"+
		"\u0311\b\u0001\n\u0001\f\u0001\u0314\t\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0005\u0002\u031b\b\u0002\n\u0002\f\u0002"+
		"\u031e\t\u0002\u0001\u0002\u0003\u0002\u0321\b\u0002\u0001\u0002\u0005"+
		"\u0002\u0324\b\u0002\n\u0002\f\u0002\u0327\t\u0002\u0001\u0002\u0003\u0002"+
		"\u032a\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0003\u0003\u0343\b\u0003\u0001\u0004\u0001\u0004\u0005\u0004\u0347\b"+
		"\u0004\n\u0004\f\u0004\u034a\t\u0004\u0001\u0005\u0001\u0005\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0358\b\u0007\u0001\u0007"+
		"\u0005\u0007\u035b\b\u0007\n\u0007\f\u0007\u035e\t\u0007\u0001\u0007\u0001"+
		"\u0007\u0003\u0007\u0362\b\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001"+
		"\b\u0001\b\u0003\b\u0369\b\b\u0003\b\u036b\b\b\u0001\b\u0001\b\u0001\t"+
		"\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0005\t\u0375\b\t\n\t\f\t\u0378"+
		"\t\t\u0001\t\u0001\t\u0003\t\u037c\b\t\u0001\t\u0001\t\u0001\t\u0001\t"+
		"\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0005\t\u0388\b\t\n\t"+
		"\f\t\u038b\t\t\u0001\t\u0001\t\u0005\t\u038f\b\t\n\t\f\t\u0392\t\t\u0001"+
		"\t\u0001\t\u0003\t\u0396\b\t\u0003\t\u0398\b\t\u0001\t\u0001\t\u0001\n"+
		"\u0001\n\u0003\n\u039e\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0005\u000b\u03aa\b\u000b\n\u000b\f\u000b\u03ad\t\u000b\u0001\u000b\u0001"+
		"\u000b\u0003\u000b\u03b1\b\u000b\u0001\u000b\u0003\u000b\u03b4\b\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0003\f\u03ba\b\f\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0005\r\u03c1\b\r\n\r\f\r\u03c4\t\r\u0001\r"+
		"\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0005\u000e\u03cf\b\u000e\n\u000e\f\u000e\u03d2\t\u000e"+
		"\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f"+
		"\u03d9\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u03e3\b\u0010\u0001\u0010"+
		"\u0003\u0010\u03e6\b\u0010\u0001\u0010\u0005\u0010\u03e9\b\u0010\n\u0010"+
		"\f\u0010\u03ec\t\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u03f0\b\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011"+
		"\u03f7\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u03fc\b"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0005\u0012\u0405\b\u0012\n\u0012\f\u0012\u0408\t\u0012"+
		"\u0001\u0012\u0001\u0012\u0003\u0012\u040c\b\u0012\u0001\u0012\u0003\u0012"+
		"\u040f\b\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u0413\b\u0012\u0001"+
		"\u0013\u0001\u0013\u0003\u0013\u0417\b\u0013\u0001\u0013\u0001\u0013\u0005"+
		"\u0013\u041b\b\u0013\n\u0013\f\u0013\u041e\t\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u0422\b\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0003\u0014\u042e\b\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0003\u0015\u043a\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016"+
		"\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0003\u0017\u0446\b\u0017\u0001\u0017\u0005\u0017\u0449\b\u0017\n\u0017"+
		"\f\u0017\u044c\t\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u0450\b\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018"+
		"\u0457\b\u0018\u0003\u0018\u0459\b\u0018\u0001\u0018\u0001\u0018\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0005"+
		"\u0019\u0463\b\u0019\n\u0019\f\u0019\u0466\t\u0019\u0001\u0019\u0001\u0019"+
		"\u0003\u0019\u046a\b\u0019\u0001\u0019\u0003\u0019\u046d\b\u0019\u0001"+
		"\u0019\u0001\u0019\u0005\u0019\u0471\b\u0019\n\u0019\f\u0019\u0474\t\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0479\b\u0019\u0003\u0019"+
		"\u047b\b\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0003\u001b"+
		"\u048d\b\u001b\u0001\u001b\u0005\u001b\u0490\b\u001b\n\u001b\f\u001b\u0493"+
		"\t\u001b\u0001\u001b\u0001\u001b\u0003\u001b\u0497\b\u001b\u0003\u001b"+
		"\u0499\b\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u04a0\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u04a7\b\u001c\u0001\u001c\u0003\u001c\u04aa\b"+
		"\u001c\u0001\u001c\u0003\u001c\u04ad\b\u001c\u0001\u001c\u0003\u001c\u04b0"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0005\u001d\u04b9\b\u001d\n\u001d\f\u001d\u04bc\t\u001d"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u04c7\b\u001f\u0001\u001f"+
		"\u0001\u001f\u0003\u001f\u04cb\b\u001f\u0001\u001f\u0003\u001f\u04ce\b"+
		"\u001f\u0001 \u0001 \u0001 \u0001 \u0001!\u0001!\u0001!\u0003!\u04d7\b"+
		"!\u0001\"\u0001\"\u0001\"\u0001\"\u0005\"\u04dd\b\"\n\"\f\"\u04e0\t\""+
		"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"\u04e7\b\"\u0001\"\u0003"+
		"\"\u04ea\b\"\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u04f1\b#\u0001"+
		"$\u0001$\u0003$\u04f5\b$\u0001%\u0001%\u0001%\u0005%\u04fa\b%\n%\f%\u04fd"+
		"\t%\u0001%\u0004%\u0500\b%\u000b%\f%\u0501\u0001%\u0001%\u0001%\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u052b\b&\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0003\'\u0547\b\'\u0001(\u0001"+
		"(\u0001(\u0005(\u054c\b(\n(\f(\u054f\t(\u0001(\u0001(\u0003(\u0553\b("+
		"\u0001(\u0001(\u0001)\u0001)\u0001)\u0001)\u0001)\u0005)\u055c\b)\n)\f"+
		")\u055f\t)\u0003)\u0561\b)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001+\u0001"+
		"+\u0004+\u056a\b+\u000b+\f+\u056b\u0001,\u0001,\u0001,\u0001-\u0001-\u0001"+
		"-\u0003-\u0574\b-\u0001-\u0001-\u0003-\u0578\b-\u0001-\u0001-\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u0584\b.\u0001.\u0003"+
		".\u0587\b.\u0001.\u0001.\u0001/\u0001/\u0003/\u058d\b/\u0001/\u0003/\u0590"+
		"\b/\u0001/\u0005/\u0593\b/\n/\f/\u0596\t/\u0001/\u0001/\u0003/\u059a\b"+
		"/\u00010\u00010\u00030\u059e\b0\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00050\u05a6\b0\n0\f0\u05a9\t0\u00010\u00010\u00011\u00011\u00011\u0005"+
		"1\u05b0\b1\n1\f1\u05b3\t1\u00012\u00012\u00012\u00032\u05b8\b2\u00013"+
		"\u00013\u00013\u00013\u00013\u00013\u00013\u00053\u05c1\b3\n3\f3\u05c4"+
		"\t3\u00013\u00013\u00033\u05c8\b3\u00014\u00014\u00034\u05cc\b4\u0001"+
		"5\u00015\u00015\u00015\u00015\u00015\u00035\u05d4\b5\u00016\u00016\u0001"+
		"6\u00016\u00016\u00016\u00036\u05dc\b6\u00016\u00016\u00016\u00036\u05e1"+
		"\b6\u00016\u00036\u05e4\b6\u00036\u05e6\b6\u00017\u00037\u05e9\b7\u0001"+
		"7\u00017\u00017\u00017\u00018\u00018\u00018\u00038\u05f2\b8\u00018\u0001"+
		"8\u00018\u00038\u05f7\b8\u00018\u00018\u00019\u00019\u00019\u00039\u05fe"+
		"\b9\u00019\u00039\u0601\b9\u0001:\u0003:\u0604\b:\u0001:\u0001:\u0003"+
		":\u0608\b:\u0001:\u0003:\u060b\b:\u0001:\u0001:\u0001:\u0001:\u0005:\u0611"+
		"\b:\n:\f:\u0614\t:\u0001:\u0001:\u0003:\u0618\b:\u0001:\u0005:\u061b\b"+
		":\n:\f:\u061e\t:\u0001;\u0001;\u0001;\u0001;\u0003;\u0624\b;\u0001<\u0001"+
		"<\u0001<\u0001=\u0001=\u0001=\u0001=\u0001=\u0003=\u062e\b=\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001?\u0001?\u0001?\u0001"+
		"?\u0004?\u063c\b?\u000b?\f?\u063d\u0001?\u0001?\u0001@\u0001@\u0003@\u0644"+
		"\b@\u0001A\u0001A\u0001A\u0001A\u0001B\u0001B\u0001B\u0001B\u0003B\u064e"+
		"\bB\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0005C\u0656\bC\nC\fC\u0659"+
		"\tC\u0001C\u0001C\u0001C\u0001C\u0005C\u065f\bC\nC\fC\u0662\tC\u0001C"+
		"\u0001C\u0001C\u0003C\u0667\bC\u0001D\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0005D\u066f\bD\nD\fD\u0672\tD\u0001D\u0001D\u0003D\u0676\bD\u0001D"+
		"\u0001D\u0001D\u0001D\u0001D\u0005D\u067d\bD\nD\fD\u0680\tD\u0001D\u0001"+
		"D\u0001D\u0003D\u0685\bD\u0001E\u0003E\u0688\bE\u0001E\u0003E\u068b\b"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0005E\u069a\bE\nE\fE\u069d\tE\u0001E\u0001E\u0003"+
		"E\u06a1\bE\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0005E\u06aa"+
		"\bE\nE\fE\u06ad\tE\u0001E\u0001E\u0001E\u0003E\u06b2\bE\u0001F\u0003F"+
		"\u06b5\bF\u0001F\u0001F\u0001G\u0001G\u0001G\u0003G\u06bc\bG\u0001G\u0003"+
		"G\u06bf\bG\u0001H\u0001H\u0001H\u0001H\u0001I\u0003I\u06c6\bI\u0001I\u0004"+
		"I\u06c9\bI\u000bI\fI\u06ca\u0001I\u0001I\u0003I\u06cf\bI\u0001J\u0001"+
		"J\u0001J\u0003J\u06d4\bJ\u0001K\u0001K\u0001K\u0003K\u06d9\bK\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0005L\u06e1\bL\nL\fL\u06e4\tL\u0001L\u0001"+
		"L\u0001L\u0001L\u0003L\u06ea\bL\u0001M\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0005M\u06f2\bM\nM\fM\u06f5\tM\u0001M\u0001M\u0003M\u06f9\bM\u0001M"+
		"\u0001M\u0001M\u0001M\u0001M\u0003M\u0700\bM\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0003M\u0707\bM\u0001M\u0001M\u0003M\u070b\bM\u0001N\u0003N\u070e"+
		"\bN\u0001N\u0003N\u0711\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001"+
		"N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0005N\u0720\bN\nN\fN\u0723"+
		"\tN\u0001N\u0001N\u0003N\u0727\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001"+
		"N\u0001N\u0003N\u0730\bN\u0001O\u0001O\u0001O\u0001O\u0001P\u0001P\u0001"+
		"P\u0001P\u0001P\u0001P\u0005P\u073c\bP\nP\fP\u073f\tP\u0001P\u0001P\u0001"+
		"Q\u0001Q\u0003Q\u0745\bQ\u0001R\u0001R\u0001R\u0001S\u0001S\u0001S\u0001"+
		"S\u0001S\u0001T\u0001T\u0001T\u0001T\u0004T\u0753\bT\u000bT\fT\u0754\u0001"+
		"T\u0001T\u0001U\u0001U\u0001U\u0001U\u0001U\u0005U\u075e\bU\nU\fU\u0761"+
		"\tU\u0001U\u0001U\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0775"+
		"\bV\u0001W\u0001W\u0001W\u0001W\u0001X\u0001X\u0001X\u0001Y\u0001Y\u0001"+
		"Y\u0001Y\u0001Z\u0001Z\u0001Z\u0003Z\u0785\bZ\u0001[\u0001[\u0001[\u0001"+
		"[\u0001\\\u0001\\\u0001\\\u0003\\\u078e\b\\\u0001\\\u0001\\\u0001\\\u0003"+
		"\\\u0793\b\\\u0001\\\u0001\\\u0003\\\u0797\b\\\u0001\\\u0003\\\u079a\b"+
		"\\\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0005]\u07a2\b]\n]\f]\u07a5"+
		"\t]\u0001]\u0001]\u0001^\u0001^\u0001^\u0001^\u0001^\u0005^\u07ae\b^\n"+
		"^\f^\u07b1\t^\u0001^\u0001^\u0001^\u0003^\u07b6\b^\u0001^\u0001^\u0001"+
		"_\u0001_\u0005_\u07bc\b_\n_\f_\u07bf\t_\u0001_\u0003_\u07c2\b_\u0001_"+
		"\u0003_\u07c5\b_\u0001`\u0001`\u0001`\u0001a\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0001a\u0001a\u0003a\u07d4\ba\u0001b\u0001b\u0003"+
		"b\u07d8\bb\u0001b\u0001b\u0001b\u0003b\u07dd\bb\u0001b\u0003b\u07e0\b"+
		"b\u0001b\u0001b\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001"+
		"c\u0001c\u0003c\u07ed\bc\u0001c\u0001c\u0003c\u07f1\bc\u0001c\u0001c\u0001"+
		"d\u0001d\u0001d\u0001d\u0001d\u0001d\u0005d\u07fb\bd\nd\fd\u07fe\td\u0001"+
		"d\u0001d\u0003d\u0802\bd\u0001d\u0001d\u0003d\u0806\bd\u0001d\u0001d\u0003"+
		"d\u080a\bd\u0001d\u0001d\u0001e\u0001e\u0003e\u0810\be\u0001e\u0003e\u0813"+
		"\be\u0001e\u0003e\u0816\be\u0001f\u0001f\u0001f\u0001f\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0824\bg\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0003g\u0834\bg\u0001g\u0001g\u0004g\u0838\bg\u000bg\fg\u0839"+
		"\u0001g\u0001g\u0003g\u083e\bg\u0001g\u0001g\u0001h\u0001h\u0003h\u0844"+
		"\bh\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0005i\u084e"+
		"\bi\ni\fi\u0851\ti\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0859"+
		"\bi\u0003i\u085b\bi\u0001i\u0001i\u0001j\u0001j\u0003j\u0861\bj\u0001"+
		"j\u0001j\u0003j\u0865\bj\u0001j\u0003j\u0868\bj\u0001k\u0001k\u0001k\u0001"+
		"k\u0003k\u086e\bk\u0001k\u0001k\u0001k\u0003k\u0873\bk\u0003k\u0875\b"+
		"k\u0001k\u0001k\u0001l\u0001l\u0003l\u087b\bl\u0001l\u0001l\u0001m\u0001"+
		"m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0886\bm\u0001m\u0001m\u0003"+
		"m\u088a\bm\u0001m\u0003m\u088d\bm\u0001n\u0001n\u0003n\u0891\bn\u0001"+
		"n\u0001n\u0001n\u0001o\u0001o\u0001o\u0003o\u0899\bo\u0001o\u0001o\u0001"+
		"o\u0001o\u0001o\u0001o\u0001o\u0003o\u08a2\bo\u0001p\u0001p\u0001p\u0001"+
		"q\u0001q\u0001q\u0001q\u0001q\u0004q\u08ac\bq\u000bq\fq\u08ad\u0001r\u0001"+
		"r\u0001r\u0001r\u0001r\u0001r\u0001s\u0001s\u0001s\u0001s\u0001s\u0001"+
		"s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001"+
		"s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001"+
		"s\u0001s\u0003s\u08d1\bs\u0001t\u0001t\u0001t\u0003t\u08d6\bt\u0001t\u0001"+
		"t\u0001t\u0001u\u0001u\u0003u\u08dd\bu\u0001u\u0001u\u0003u\u08e1\bu\u0001"+
		"v\u0001v\u0003v\u08e5\bv\u0001v\u0001v\u0003v\u08e9\bv\u0001w\u0001w\u0001"+
		"w\u0001x\u0001x\u0001x\u0001x\u0001x\u0005x\u08f3\bx\nx\fx\u08f6\tx\u0001"+
		"x\u0003x\u08f9\bx\u0001x\u0001x\u0001x\u0001y\u0001y\u0001y\u0001y\u0001"+
		"y\u0001z\u0001z\u0001z\u0001{\u0003{\u0907\b{\u0001{\u0001{\u0001{\u0001"+
		"{\u0003{\u090d\b{\u0001{\u0001{\u0001{\u0001{\u0001{\u0003{\u0914\b{\u0001"+
		"|\u0001|\u0001|\u0003|\u0919\b|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0003|\u0923\b|\u0001|\u0001|\u0001|\u0001|\u0003|\u0929"+
		"\b|\u0003|\u092b\b|\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003"+
		"}\u0934\b}\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0003"+
		"~\u093e\b~\u0001~\u0001~\u0001~\u0003~\u0943\b~\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u0080\u0001\u0080\u0001\u0081"+
		"\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0083\u0001\u0083\u0003\u0083"+
		"\u0952\b\u0083\u0001\u0084\u0001\u0084\u0003\u0084\u0956\b\u0084\u0001"+
		"\u0085\u0003\u0085\u0959\b\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u095d"+
		"\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0003\u0086\u0962\b\u0086"+
		"\u0001\u0086\u0001\u0086\u0003\u0086\u0966\b\u0086\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0003\u0087"+
		"\u096f\b\u0087\u0003\u0087\u0971\b\u0087\u0001\u0087\u0003\u0087\u0974"+
		"\b\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0003\u0087\u097d\b\u0087\u0003\u0087\u097f\b\u0087"+
		"\u0001\u0087\u0003\u0087\u0982\b\u0087\u0001\u0087\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0001\u0087\u0003\u0087\u0989\b\u0087\u0001\u0087\u0003\u0087"+
		"\u098c\b\u0087\u0003\u0087\u098e\b\u0087\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0004"+
		"\u0089\u0998\b\u0089\u000b\u0089\f\u0089\u0999\u0001\u008a\u0001\u008a"+
		"\u0001\u008a\u0001\u008a\u0005\u008a\u09a0\b\u008a\n\u008a\f\u008a\u09a3"+
		"\t\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008b\u0003\u008b\u09a9"+
		"\b\u008b\u0001\u008b\u0001\u008b\u0001\u008c\u0003\u008c\u09ae\b\u008c"+
		"\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d"+
		"\u0003\u008d\u09b6\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0003\u008e\u09bd\b\u008e\u0001\u008e\u0001\u008e\u0003\u008e"+
		"\u09c1\b\u008e\u0001\u008e\u0003\u008e\u09c4\b\u008e\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u09d0\b\u0090\u0001\u0091\u0001"+
		"\u0091\u0001\u0091\u0001\u0091\u0003\u0091\u09d6\b\u0091\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u09de"+
		"\b\u0093\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001"+
		"\u0094\u0005\u0094\u09e6\b\u0094\n\u0094\f\u0094\u09e9\t\u0094\u0001\u0094"+
		"\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0005\u0094"+
		"\u09f1\b\u0094\n\u0094\f\u0094\u09f4\t\u0094\u0001\u0094\u0001\u0094\u0001"+
		"\u0094\u0003\u0094\u09f9\b\u0094\u0003\u0094\u09fb\b\u0094\u0003\u0094"+
		"\u09fd\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0003\u0095\u0a04\b\u0095\u0001\u0095\u0003\u0095\u0a07\b\u0095\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0003\u0096\u0a0e"+
		"\b\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001"+
		"\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0a19\b\u0097\u0001"+
		"\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0a1f\b\u0097\u0001"+
		"\u0097\u0001\u0097\u0003\u0097\u0a23\b\u0097\u0001\u0098\u0001\u0098\u0001"+
		"\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0005\u0098\u0a2b\b\u0098\n"+
		"\u0098\f\u0098\u0a2e\t\u0098\u0003\u0098\u0a30\b\u0098\u0001\u0098\u0001"+
		"\u0098\u0001\u0099\u0001\u0099\u0003\u0099\u0a36\b\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0003\u0099\u0a41\b\u0099\u0003\u0099\u0a43\b\u0099"+
		"\u0003\u0099\u0a45\b\u0099\u0001\u0099\u0003\u0099\u0a48\b\u0099\u0001"+
		"\u009a\u0001\u009a\u0003\u009a\u0a4c\b\u009a\u0001\u009a\u0003\u009a\u0a4f"+
		"\b\u009a\u0001\u009b\u0001\u009b\u0003\u009b\u0a53\b\u009b\u0001\u009b"+
		"\u0001\u009b\u0003\u009b\u0a57\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0003\u009b\u0a5c\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d"+
		"\u0a67\b\u009d\u0001\u009d\u0001\u009d\u0003\u009d\u0a6b\b\u009d\u0001"+
		"\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003"+
		"\u009d\u0a73\b\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0005\u009e\u0a78"+
		"\b\u009e\n\u009e\f\u009e\u0a7b\t\u009e\u0001\u009f\u0001\u009f\u0001\u009f"+
		"\u0001\u009f\u0005\u009f\u0a81\b\u009f\n\u009f\f\u009f\u0a84\t\u009f\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0005\u00a0\u0a8b"+
		"\b\u00a0\n\u00a0\f\u00a0\u0a8e\t\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0"+
		"\u0a92\b\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0"+
		"\u0a98\b\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u0a9c\b\u00a0\u0001"+
		"\u00a0\u0003\u00a0\u0a9f\b\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001"+
		"\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0aa7\b\u00a1\u0001\u00a1\u0003"+
		"\u00a1\u0aaa\b\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0aae\b\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0ab2\b\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0003\u00a1\u0ab7\b\u00a1\u0001\u00a1\u0003\u00a1\u0aba\b"+
		"\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0abe\b\u00a1\u0001\u00a1\u0001"+
		"\u00a1\u0003\u00a1\u0ac2\b\u00a1\u0005\u00a1\u0ac4\b\u00a1\n\u00a1\f\u00a1"+
		"\u0ac7\t\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a2\u0001\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0005\u00a2\u0ad0\b\u00a2\n\u00a2\f\u00a2\u0ad3"+
		"\t\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a3\u0001\u00a3\u0005\u00a3\u0ade\b\u00a3\n"+
		"\u00a3\f\u00a3\u0ae1\t\u00a3\u0001\u00a4\u0001\u00a4\u0003\u00a4\u0ae5"+
		"\b\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4\u0ae9\b\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0003\u00a5\u0af2\b\u00a5\u0001\u00a6\u0003\u00a6\u0af5\b\u00a6\u0001"+
		"\u00a6\u0001\u00a6\u0003\u00a6\u0af9\b\u00a6\u0001\u00a6\u0001\u00a6\u0001"+
		"\u00a6\u0001\u00a6\u0005\u00a6\u0aff\b\u00a6\n\u00a6\f\u00a6\u0b02\t\u00a6"+
		"\u0003\u00a6\u0b04\b\u00a6\u0001\u00a6\u0003\u00a6\u0b07\b\u00a6\u0001"+
		"\u00a6\u0001\u00a6\u0003\u00a6\u0b0b\b\u00a6\u0001\u00a6\u0003\u00a6\u0b0e"+
		"\b\u00a6\u0001\u00a6\u0003\u00a6\u0b11\b\u00a6\u0001\u00a6\u0003\u00a6"+
		"\u0b14\b\u00a6\u0001\u00a6\u0003\u00a6\u0b17\b\u00a6\u0001\u00a6\u0003"+
		"\u00a6\u0b1a\b\u00a6\u0001\u00a7\u0001\u00a7\u0003\u00a7\u0b1e\b\u00a7"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0b28\b\u00a9\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0005\u00aa\u0b2d\b\u00aa\n\u00aa\f\u00aa\u0b30\t\u00aa\u0001"+
		"\u00ab\u0001\u00ab\u0005\u00ab\u0b34\b\u00ab\n\u00ab\f\u00ab\u0b37\t\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0b3b\b\u00ab\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0003\u00ac\u0b40\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0005\u00ac\u0b45\b\u00ac\n\u00ac\f\u00ac\u0b48\t\u00ac\u0001\u00ac\u0001"+
		"\u00ac\u0001\u00ac\u0003\u00ac\u0b4d\b\u00ac\u0001\u00ac\u0001\u00ac\u0001"+
		"\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003"+
		"\u00ac\u0b57\b\u00ac\u0001\u00ac\u0003\u00ac\u0b5a\b\u00ac\u0001\u00ac"+
		"\u0005\u00ac\u0b5d\b\u00ac\n\u00ac\f\u00ac\u0b60\t\u00ac\u0001\u00ac\u0003"+
		"\u00ac\u0b63\b\u00ac\u0001\u00ad\u0003\u00ad\u0b66\b\u00ad\u0001\u00ad"+
		"\u0003\u00ad\u0b69\b\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0b6d\b"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0b72\b\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0005\u00ad\u0b76\b\u00ad\n\u00ad\f\u00ad\u0b79\t\u00ad"+
		"\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00af\u0001\u00af\u0001\u00af"+
		"\u0001\u00af\u0001\u00af\u0005\u00af\u0b83\b\u00af\n\u00af\f\u00af\u0b86"+
		"\t\u00af\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0b8c"+
		"\b\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001"+
		"\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0005\u00b1\u0b98"+
		"\b\u00b1\n\u00b1\f\u00b1\u0b9b\t\u00b1\u0003\u00b1\u0b9d\b\u00b1\u0001"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0003\u00b2\u0ba7\b\u00b2\u0001\u00b3\u0001\u00b3\u0003"+
		"\u00b3\u0bab\b\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0005"+
		"\u00b3\u0bb1\b\u00b3\n\u00b3\f\u00b3\u0bb4\t\u00b3\u0001\u00b3\u0001\u00b3"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0003\u00b4\u0bbf\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0005\u00b5\u0bc7\b\u00b5\n\u00b5"+
		"\f\u00b5\u0bca\t\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0bce\b\u00b5"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6"+
		"\u0005\u00b6\u0bd6\b\u00b6\n\u00b6\f\u00b6\u0bd9\t\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0005\u00b6\u0bde\b\u00b6\n\u00b6\f\u00b6\u0be1\t\u00b6"+
		"\u0003\u00b6\u0be3\b\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b7\u0001\u00b7"+
		"\u0003\u00b7\u0be9\b\u00b7\u0001\u00b8\u0001\u00b8\u0003\u00b8\u0bed\b"+
		"\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0003\u00b9\u0bf2\b\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0005"+
		"\u00b9\u0bfa\b\u00b9\n\u00b9\f\u00b9\u0bfd\t\u00b9\u0001\u00b9\u0001\u00b9"+
		"\u0003\u00b9\u0c01\b\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9"+
		"\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0005\u00ba"+
		"\u0c0c\b\u00ba\n\u00ba\f\u00ba\u0c0f\t\u00ba\u0001\u00ba\u0001\u00ba\u0001"+
		"\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0005\u00bb\u0c18"+
		"\b\u00bb\n\u00bb\f\u00bb\u0c1b\t\u00bb\u0001\u00bb\u0001\u00bb\u0003\u00bb"+
		"\u0c1f\b\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb"+
		"\u0001\u00bb\u0005\u00bb\u0c27\b\u00bb\n\u00bb\f\u00bb\u0c2a\t\u00bb\u0001"+
		"\u00bb\u0001\u00bb\u0003\u00bb\u0c2e\b\u00bb\u0003\u00bb\u0c30\b\u00bb"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc\u0c35\b\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0003\u00bc\u0c39\b\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0003\u00bc\u0c3f\b\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc"+
		"\u0c43\b\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00be"+
		"\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0005\u00be\u0c4e\b\u00be"+
		"\n\u00be\f\u00be\u0c51\t\u00be\u0001\u00be\u0003\u00be\u0c54\b\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0005"+
		"\u00be\u0c5c\b\u00be\n\u00be\f\u00be\u0c5f\t\u00be\u0003\u00be\u0c61\b"+
		"\u00be\u0003\u00be\u0c63\b\u00be\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0003"+
		"\u00bf\u0c68\b\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0005\u00c0\u0c6f\b\u00c0\n\u00c0\f\u00c0\u0c72\t\u00c0\u0001\u00c0"+
		"\u0001\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1"+
		"\u0001\u00c1\u0005\u00c1\u0c7c\b\u00c1\n\u00c1\f\u00c1\u0c7f\t\u00c1\u0001"+
		"\u00c1\u0001\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u0c86"+
		"\b\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c4\u0001\u00c4\u0005"+
		"\u00c4\u0c8d\b\u00c4\n\u00c4\f\u00c4\u0c90\t\u00c4\u0001\u00c4\u0003\u00c4"+
		"\u0c93\b\u00c4\u0001\u00c4\u0005\u00c4\u0c96\b\u00c4\n\u00c4\f\u00c4\u0c99"+
		"\t\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u0ca3\b\u00c5\u0003\u00c5\u0ca5"+
		"\b\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001"+
		"\u00c7\u0005\u00c7\u0cb3\b\u00c7\n\u00c7\f\u00c7\u0cb6\t\u00c7\u0001\u00c8"+
		"\u0001\u00c8\u0003\u00c8\u0cba\b\u00c8\u0001\u00c8\u0001\u00c8\u0005\u00c8"+
		"\u0cbe\b\u00c8\n\u00c8\f\u00c8\u0cc1\t\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c9\u0003\u00c9\u0cc6\b\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001"+
		"\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0005\u00cb\u0cd6"+
		"\b\u00cb\n\u00cb\f\u00cb\u0cd9\t\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cc"+
		"\u0001\u00cc\u0003\u00cc\u0cdf\b\u00cc\u0001\u00cd\u0003\u00cd\u0ce2\b"+
		"\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0005\u00cd\u0ce8"+
		"\b\u00cd\n\u00cd\f\u00cd\u0ceb\t\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u0cf3\b\u00ce\u0003\u00ce"+
		"\u0cf5\b\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u0cf9\b\u00ce\u0001"+
		"\u00ce\u0003\u00ce\u0cfc\b\u00ce\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0003"+
		"\u00cf\u0d01\b\u00cf\u0003\u00cf\u0d03\b\u00cf\u0001\u00cf\u0001\u00cf"+
		"\u0003\u00cf\u0d07\b\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0003\u00d1\u0d13\b\u00d1\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d3\u0001\u00d3\u0003\u00d3\u0d1c\b\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0005\u00d3\u0d22\b\u00d3\n\u00d3"+
		"\f\u00d3\u0d25\t\u00d3\u0001\u00d4\u0001\u00d4\u0003\u00d4\u0d29\b\u00d4"+
		"\u0001\u00d4\u0001\u00d4\u0003\u00d4\u0d2d\b\u00d4\u0001\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0003\u00d5\u0d32\b\u00d5\u0001\u00d5\u0003\u00d5\u0d35\b"+
		"\u00d5\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0005\u00d6\u0d3b"+
		"\b\u00d6\n\u00d6\f\u00d6\u0d3e\t\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7"+
		"\u0001\u00d7\u0001\u00d7\u0003\u00d7\u0d45\b\u00d7\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0003\u00d8\u0d4b\b\u00d8\u0001\u00d8\u0003\u00d8"+
		"\u0d4e\b\u00d8\u0001\u00d8\u0003\u00d8\u0d51\b\u00d8\u0001\u00d9\u0001"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0005\u00d9\u0d57\b\u00d9\n\u00d9\f\u00d9"+
		"\u0d5a\t\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0003\u00d9\u0d63\b\u00d9\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da"+
		"\u0005\u00da\u0d6d\b\u00da\n\u00da\f\u00da\u0d70\t\u00da\u0001\u00da\u0001"+
		"\u00da\u0001\u00da\u0001\u00da\u0003\u00da\u0d76\b\u00da\u0001\u00db\u0001"+
		"\u00db\u0003\u00db\u0d7a\b\u00db\u0001\u00db\u0001\u00db\u0003\u00db\u0d7e"+
		"\b\u00db\u0001\u00db\u0003\u00db\u0d81\b\u00db\u0001\u00db\u0003\u00db"+
		"\u0d84\b\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0003\u00dc\u0d89\b"+
		"\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0003\u00dd\u0d8e\b\u00dd\u0001"+
		"\u00dd\u0003\u00dd\u0d91\b\u00dd\u0001\u00dd\u0003\u00dd\u0d94\b\u00dd"+
		"\u0001\u00de\u0001\u00de\u0004\u00de\u0d98\b\u00de\u000b\u00de\f\u00de"+
		"\u0d99\u0001\u00de\u0003\u00de\u0d9d\b\u00de\u0001\u00de\u0001\u00de\u0001"+
		"\u00df\u0001\u00df\u0003\u00df\u0da3\b\u00df\u0001\u00df\u0003\u00df\u0da6"+
		"\b\u00df\u0001\u00e0\u0003\u00e0\u0da9\b\u00e0\u0001\u00e0\u0004\u00e0"+
		"\u0dac\b\u00e0\u000b\u00e0\f\u00e0\u0dad\u0001\u00e0\u0003\u00e0\u0db1"+
		"\b\u00e0\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0004\u00e1\u0db7"+
		"\b\u00e1\u000b\u00e1\f\u00e1\u0db8\u0001\u00e2\u0001\u00e2\u0004\u00e2"+
		"\u0dbd\b\u00e2\u000b\u00e2\f\u00e2\u0dbe\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0005\u00e3\u0dc7\b\u00e3\n"+
		"\u00e3\f\u00e3\u0dca\t\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u0dce"+
		"\b\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u0dd4"+
		"\b\u00e4\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0003\u00e5\u0dda"+
		"\b\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0003\u00e5\u0de4\b\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0003\u00e5\u0de8\b\u00e5\u0003\u00e5\u0dea\b\u00e5\u0001\u00e5"+
		"\u0003\u00e5\u0ded\b\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0005\u00e6\u0df7\b\u00e6"+
		"\n\u00e6\f\u00e6\u0dfa\t\u00e6\u0001\u00e6\u0003\u00e6\u0dfd\b\u00e6\u0001"+
		"\u00e6\u0003\u00e6\u0e00\b\u00e6\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0005\u00e9\u0e12\b\u00e9\n\u00e9\f\u00e9\u0e15\t\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0003\u00e9\u0e19\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0003\u00e9\u0e1e\b\u00e9\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea"+
		"\u0001\u00ea\u0003\u00ea\u0e25\b\u00ea\u0001\u00ea\u0003\u00ea\u0e28\b"+
		"\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0005"+
		"\u00eb\u0e2f\b\u00eb\n\u00eb\f\u00eb\u0e32\t\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0001\u00eb\u0003\u00eb\u0e38\b\u00eb\u0001\u00ec\u0001\u00ec"+
		"\u0001\u00ec\u0003\u00ec\u0e3d\b\u00ec\u0001\u00ed\u0001\u00ed\u0003\u00ed"+
		"\u0e41\b\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0003\u00ee\u0e49\b\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0003\u00ee\u0e4f\b\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef\u0e57\b\u00ef\u0001\u00ef"+
		"\u0003\u00ef\u0e5a\b\u00ef\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0"+
		"\u0005\u00f0\u0e60\b\u00f0\n\u00f0\f\u00f0\u0e63\t\u00f0\u0001\u00f0\u0001"+
		"\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u0e6a\b\u00f1\u0001"+
		"\u00f1\u0003\u00f1\u0e6d\b\u00f1\u0001\u00f1\u0003\u00f1\u0e70\b\u00f1"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0003\u00f3\u0e79\b\u00f3\u0001\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0001\u00f4\u0003\u00f4\u0e7f\b\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0001\u00f4\u0003\u00f4\u0e85\b\u00f4\u0003\u00f4\u0e87\b\u00f4\u0001"+
		"\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001"+
		"\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0003\u00f5\u0e94"+
		"\b\u00f5\u0003\u00f5\u0e96\b\u00f5\u0001\u00f6\u0001\u00f6\u0001\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u0e9f\b\u00f6"+
		"\u0003\u00f6\u0ea1\b\u00f6\u0001\u00f7\u0001\u00f7\u0003\u00f7\u0ea5\b"+
		"\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u0eab"+
		"\b\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u0eaf\b\u00f7\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u0ec8\b\u00f9"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb"+
		"\u0001\u00fb\u0005\u00fb\u0ed1\b\u00fb\n\u00fb\f\u00fb\u0ed4\t\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0003\u00fb\u0ed8\b\u00fb\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0003"+
		"\u00fc\u0f00\b\u00fc\u0001\u00fd\u0001\u00fd\u0003\u00fd\u0f04\b\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0005\u00fd\u0f08\b\u00fd\n\u00fd\f\u00fd\u0f0b"+
		"\t\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fe\u0001\u00fe\u0001\u00ff\u0001"+
		"\u00ff\u0001\u0100\u0001\u0100\u0001\u0100\u0005\u0100\u0f16\b\u0100\n"+
		"\u0100\f\u0100\u0f19\t\u0100\u0001\u0101\u0001\u0101\u0001\u0102\u0001"+
		"\u0102\u0001\u0102\u0005\u0102\u0f20\b\u0102\n\u0102\f\u0102\u0f23\t\u0102"+
		"\u0001\u0103\u0001\u0103\u0001\u0103\u0003\u0103\u0f28\b\u0103\u0001\u0104"+
		"\u0001\u0104\u0001\u0104\u0001\u0104\u0003\u0104\u0f2e\b\u0104\u0001\u0104"+
		"\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104"+
		"\u0001\u0104\u0001\u0104\u0003\u0104\u0f39\b\u0104\u0001\u0104\u0001\u0104"+
		"\u0003\u0104\u0f3d\b\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0005\u0104"+
		"\u0f42\b\u0104\n\u0104\f\u0104\u0f45\t\u0104\u0001\u0104\u0001\u0104\u0003"+
		"\u0104\u0f49\b\u0104\u0005\u0104\u0f4b\b\u0104\n\u0104\f\u0104\u0f4e\t"+
		"\u0104\u0001\u0104\u0003\u0104\u0f51\b\u0104\u0001\u0105\u0001\u0105\u0001"+
		"\u0105\u0003\u0105\u0f56\b\u0105\u0001\u0106\u0001\u0106\u0001\u0106\u0001"+
		"\u0106\u0003\u0106\u0f5c\b\u0106\u0001\u0106\u0004\u0106\u0f5f\b\u0106"+
		"\u000b\u0106\f\u0106\u0f60\u0001\u0106\u0001\u0106\u0003\u0106\u0f65\b"+
		"\u0106\u0001\u0106\u0001\u0106\u0003\u0106\u0f69\b\u0106\u0001\u0106\u0001"+
		"\u0106\u0003\u0106\u0f6d\b\u0106\u0003\u0106\u0f6f\b\u0106\u0001\u0107"+
		"\u0001\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0001\u0108\u0001\u0108\u0003\u0108\u0f7a\b\u0108\u0001\u0108\u0005\u0108"+
		"\u0f7d\b\u0108\n\u0108\f\u0108\u0f80\t\u0108\u0001\u0109\u0001\u0109\u0003"+
		"\u0109\u0f84\b\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001"+
		"\u0109\u0001\u0109\u0001\u0109\u0003\u0109\u0f8d\b\u0109\u0003\u0109\u0f8f"+
		"\b\u0109\u0003\u0109\u0f91\b\u0109\u0001\u0109\u0003\u0109\u0f94\b\u0109"+
		"\u0001\u010a\u0001\u010a\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010c"+
		"\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c"+
		"\u0001\u010c\u0005\u010c\u0fa3\b\u010c\n\u010c\f\u010c\u0fa6\t\u010c\u0001"+
		"\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u0fad"+
		"\b\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010e\u0001"+
		"\u010e\u0001\u010e\u0001\u010e\u0005\u010e\u0fb7\b\u010e\n\u010e\f\u010e"+
		"\u0fba\t\u010e\u0001\u010f\u0001\u010f\u0001\u0110\u0001\u0110\u0001\u0110"+
		"\u0005\u0110\u0fc1\b\u0110\n\u0110\f\u0110\u0fc4\t\u0110\u0001\u0111\u0001"+
		"\u0111\u0001\u0111\u0005\u0111\u0fc9\b\u0111\n\u0111\f\u0111\u0fcc\t\u0111"+
		"\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112"+
		"\u0003\u0112\u0fd4\b\u0112\u0001\u0112\u0003\u0112\u0fd7\b\u0112\u0001"+
		"\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0003\u0113\u0fde"+
		"\b\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001"+
		"\u0113\u0003\u0113\u0fe6\b\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001"+
		"\u0113\u0001\u0113\u0003\u0113\u0fed\b\u0113\u0001\u0113\u0001\u0113\u0003"+
		"\u0113\u0ff1\b\u0113\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001"+
		"\u0114\u0003\u0114\u0ff8\b\u0114\u0001\u0115\u0001\u0115\u0003\u0115\u0ffc"+
		"\b\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0003\u0115\u1001\b\u0115"+
		"\u0005\u0115\u1003\b\u0115\n\u0115\f\u0115\u1006\t\u0115\u0001\u0115\u0001"+
		"\u0115\u0001\u0115\u0005\u0115\u100b\b\u0115\n\u0115\f\u0115\u100e\t\u0115"+
		"\u0001\u0115\u0003\u0115\u1011\b\u0115\u0001\u0116\u0001\u0116\u0001\u0116"+
		"\u0001\u0116\u0001\u0116\u0003\u0116\u1018\b\u0116\u0001\u0116\u0001\u0116"+
		"\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0003\u0116"+
		"\u1021\b\u0116\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0118\u0001\u0118"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0005\u0119"+
		"\u102d\b\u0119\n\u0119\f\u0119\u1030\t\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0005"+
		"\u0119\u103a\b\u0119\n\u0119\f\u0119\u103d\t\u0119\u0001\u0119\u0001\u0119"+
		"\u0003\u0119\u1041\b\u0119\u0001\u0119\u0001\u0119\u0001\u011a\u0001\u011a"+
		"\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a"+
		"\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a"+
		"\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0003\u011a\u1057\b\u011a"+
		"\u0001\u011b\u0001\u011b\u0003\u011b\u105b\b\u011b\u0001\u011c\u0003\u011c"+
		"\u105e\b\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0004\u011c\u1063\b"+
		"\u011c\u000b\u011c\f\u011c\u1064\u0001\u011c\u0003\u011c\u1068\b\u011c"+
		"\u0001\u011c\u0001\u011c\u0003\u011c\u106c\b\u011c\u0001\u011c\u0003\u011c"+
		"\u106f\b\u011c\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0003\u011d\u1076\b\u011d\u0001\u011e\u0003\u011e\u1079\b\u011e\u0001"+
		"\u011e\u0001\u011e\u0004\u011e\u107d\b\u011e\u000b\u011e\f\u011e\u107e"+
		"\u0001\u011e\u0003\u011e\u1082\b\u011e\u0001\u011e\u0001\u011e\u0003\u011e"+
		"\u1086\b\u011e\u0001\u011e\u0003\u011e\u1089\b\u011e\u0001\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0003\u011f\u1090\b\u011f\u0001"+
		"\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u1095\b\u0120\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0001\u0121\u0005\u0121\u10a1\b\u0121\n\u0121\f\u0121"+
		"\u10a4\t\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u10a9\b"+
		"\u0121\u0001\u0121\u0003\u0121\u10ac\b\u0121\u0001\u0122\u0001\u0122\u0003"+
		"\u0122\u10b0\b\u0122\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0005"+
		"\u0123\u10b6\b\u0123\n\u0123\f\u0123\u10b9\t\u0123\u0001\u0124\u0001\u0124"+
		"\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124"+
		"\u0001\u0124\u0005\u0124\u10c4\b\u0124\n\u0124\f\u0124\u10c7\t\u0124\u0001"+
		"\u0124\u0001\u0124\u0003\u0124\u10cb\b\u0124\u0001\u0125\u0001\u0125\u0001"+
		"\u0125\u0001\u0125\u0001\u0125\u0005\u0125\u10d2\b\u0125\n\u0125\f\u0125"+
		"\u10d5\t\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0125"+
		"\u0001\u0125\u0001\u0125\u0005\u0125\u10de\b\u0125\n\u0125\f\u0125\u10e1"+
		"\t\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u10e5\b\u0125\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0003\u0126\u10ef\b\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0003\u0126\u10f6\b\u0126\u0001\u0127\u0001\u0127"+
		"\u0001\u0127\u0001\u0127\u0005\u0127\u10fc\b\u0127\n\u0127\f\u0127\u10ff"+
		"\t\u0127\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0003"+
		"\u0128\u1106\b\u0128\u0001\u0128\u0001\u0128\u0003\u0128\u110a\b\u0128"+
		"\u0001\u0128\u0003\u0128\u110d\b\u0128\u0001\u0128\u0001\u0128\u0001\u0128"+
		"\u0003\u0128\u1112\b\u0128\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129"+
		"\u1117\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u111c\b"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u1122"+
		"\b\u0129\u0001\u0129\u0003\u0129\u1125\b\u0129\u0001\u0129\u0001\u0129"+
		"\u0003\u0129\u1129\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129"+
		"\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129"+
		"\u0001\u0129\u0003\u0129\u1136\b\u0129\u0001\u0129\u0001\u0129\u0003\u0129"+
		"\u113a\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129"+
		"\u0004\u0129\u1141\b\u0129\u000b\u0129\f\u0129\u1142\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u1149\b\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u1157"+
		"\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0005\u0129\u1160\b\u0129\n\u0129\f\u0129\u1163\t\u0129"+
		"\u0001\u0129\u0003\u0129\u1166\b\u0129\u0001\u0129\u0003\u0129\u1169\b"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u1179\b\u0129\u0001\u0129\u0001"+
		"\u0129\u0005\u0129\u117d\b\u0129\n\u0129\f\u0129\u1180\t\u0129\u0001\u0129"+
		"\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129"+
		"\u0003\u0129\u1189\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129"+
		"\u0001\u0129\u0001\u0129\u0003\u0129\u1191\b\u0129\u0001\u0129\u0003\u0129"+
		"\u1194\b\u0129\u0001\u0129\u0003\u0129\u1197\b\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003"+
		"\u0129\u11a0\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u11a5"+
		"\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0005"+
		"\u0129\u11ac\b\u0129\n\u0129\f\u0129\u11af\t\u0129\u0001\u0129\u0001\u0129"+
		"\u0001\u0129\u0003\u0129\u11b4\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129"+
		"\u0003\u0129\u11b9\b\u0129\u0001\u0129\u0003\u0129\u11bc\b\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u11c1\b\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0003\u0129\u11c6\b\u0129\u0005\u0129\u11c8\b\u0129"+
		"\n\u0129\f\u0129\u11cb\t\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003"+
		"\u0129\u11d0\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003"+
		"\u0129\u11d6\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u11df\b\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0003\u0129\u11e4\b\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u11ec\b\u0129\u0001"+
		"\u0129\u0001\u0129\u0003\u0129\u11f0\b\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0003\u0129\u11f5\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0003\u0129\u11fb\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0003\u0129\u1202\b\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0003\u0129\u1207\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0003\u0129\u120e\b\u0129\u0001\u0129\u0001\u0129\u0003"+
		"\u0129\u1212\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u1217"+
		"\b\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0003\u0129\u121f\b\u0129\u0001\u0129\u0003\u0129\u1222\b\u0129"+
		"\u0001\u0129\u0003\u0129\u1225\b\u0129\u0001\u0129\u0003\u0129\u1228\b"+
		"\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u122c\b\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0003\u0129\u1231\b\u0129\u0001\u0129\u0003\u0129\u1234"+
		"\b\u0129\u0001\u012a\u0001\u012a\u0001\u012b\u0001\u012b\u0001\u012c\u0001"+
		"\u012c\u0001\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u123f\b\u012d\u0001"+
		"\u012d\u0001\u012d\u0003\u012d\u1243\b\u012d\u0003\u012d\u1245\b\u012d"+
		"\u0001\u012d\u0001\u012d\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e"+
		"\u0001\u012e\u0001\u012e\u0001\u012e\u0003\u012e\u1250\b\u012e\u0001\u012f"+
		"\u0001\u012f\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130"+
		"\u0001\u0130\u0001\u0130\u0003\u0130\u125b\b\u0130\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0005\u0131\u1262\b\u0131\n\u0131"+
		"\f\u0131\u1265\t\u0131\u0003\u0131\u1267\b\u0131\u0001\u0132\u0001\u0132"+
		"\u0003\u0132\u126b\b\u0132\u0001\u0132\u0003\u0132\u126e\b\u0132\u0001"+
		"\u0132\u0001\u0132\u0003\u0132\u1272\b\u0132\u0001\u0133\u0001\u0133\u0001"+
		"\u0133\u0001\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001"+
		"\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u127f\b\u0134\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0003\u0135\u1284\b\u0135\u0001\u0135\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0005\u0135\u128a\b\u0135\n\u0135\f\u0135\u128d\t\u0135"+
		"\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u1293\b\u0135"+
		"\u0001\u0136\u0001\u0136\u0001\u0136\u0003\u0136\u1298\b\u0136\u0001\u0136"+
		"\u0001\u0136\u0003\u0136\u129c\b\u0136\u0001\u0136\u0001\u0136\u0001\u0136"+
		"\u0003\u0136\u12a1\b\u0136\u0005\u0136\u12a3\b\u0136\n\u0136\f\u0136\u12a6"+
		"\t\u0136\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u12ab\b\u0137"+
		"\u0001\u0137\u0003\u0137\u12ae\b\u0137\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0005\u0137\u12b3\b\u0137\n\u0137\f\u0137\u12b6\t\u0137\u0001\u0137\u0001"+
		"\u0137\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001"+
		"\u0138\u0001\u0138\u0001\u0138\u0005\u0138\u12c2\b\u0138\n\u0138\f\u0138"+
		"\u12c5\t\u0138\u0003\u0138\u12c7\b\u0138\u0001\u0138\u0003\u0138\u12ca"+
		"\b\u0138\u0001\u0138\u0001\u0138\u0001\u0139\u0001\u0139\u0001\u0139\u0001"+
		"\u0139\u0001\u0139\u0001\u0139\u0003\u0139\u12d4\b\u0139\u0001\u0139\u0003"+
		"\u0139\u12d7\b\u0139\u0003\u0139\u12d9\b\u0139\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0001\u013b\u0001\u013b\u0003\u013b\u12e0\b\u013b\u0001\u013b"+
		"\u0001\u013b\u0001\u013b\u0003\u013b\u12e5\b\u013b\u0003\u013b\u12e7\b"+
		"\u013b\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u12ed"+
		"\b\u013c\u0001\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0003\u013d\u12f3"+
		"\b\u013d\u0003\u013d\u12f5\b\u013d\u0001\u013e\u0001\u013e\u0001\u013e"+
		"\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0001\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u1303\b\u0140\u0003\u0140"+
		"\u1305\b\u0140\u0001\u0141\u0001\u0141\u0001\u0142\u0004\u0142\u130a\b"+
		"\u0142\u000b\u0142\f\u0142\u130b\u0001\u0142\u0001\u0142\u0003\u0142\u1310"+
		"\b\u0142\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0005\u0143\u131b\b\u0143\n"+
		"\u0143\f\u0143\u131e\t\u0143\u0001\u0143\u0001\u0143\u0003\u0143\u1322"+
		"\b\u0143\u0001\u0143\u0001\u0143\u0001\u0144\u0001\u0144\u0003\u0144\u1328"+
		"\b\u0144\u0001\u0144\u0001\u0144\u0001\u0145\u0003\u0145\u132d\b\u0145"+
		"\u0001\u0145\u0001\u0145\u0003\u0145\u1331\b\u0145\u0001\u0146\u0001\u0146"+
		"\u0003\u0146\u1335\b\u0146\u0001\u0147\u0001\u0147\u0001\u0148\u0001\u0148"+
		"\u0001\u0148\u0003\u0148\u133c\b\u0148\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u014a\u0001\u014a\u0003\u014a\u1344\b\u014a\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0005\u014b\u134a\b\u014b\n\u014b"+
		"\f\u014b\u134d\t\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0005\u014b\u1355\b\u014b\n\u014b\f\u014b\u1358"+
		"\t\u014b\u0003\u014b\u135a\b\u014b\u0001\u014c\u0001\u014c\u0003\u014c"+
		"\u135e\b\u014c\u0001\u014d\u0001\u014d\u0001\u014e\u0001\u014e\u0001\u014f"+
		"\u0001\u014f\u0001\u0150\u0001\u0150\u0001\u0151\u0001\u0151\u0001\u0152"+
		"\u0001\u0152\u0001\u0153\u0001\u0153\u0001\u0153\u0005\u0153\u136f\b\u0153"+
		"\n\u0153\f\u0153\u1372\t\u0153\u0001\u0153\u0001\u0153\u0003\u0153\u1376"+
		"\b\u0153\u0001\u0154\u0001\u0154\u0001\u0154\u0003\u0154\u137b\b\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0155\u0001\u0155\u0001\u0155\u0003\u0155"+
		"\u1382\b\u0155\u0001\u0156\u0001\u0156\u0001\u0157\u0001\u0157\u0001\u0158"+
		"\u0001\u0158\u0001\u0159\u0001\u0159\u0001\u0159\u0005\u0159\u138d\b\u0159"+
		"\n\u0159\f\u0159\u1390\t\u0159\u0001\u015a\u0001\u015a\u0001\u015b\u0001"+
		"\u015b\u0001\u015b\u0005\u015b\u1397\b\u015b\n\u015b\f\u015b\u139a\t\u015b"+
		"\u0001\u015b\u0001\u015b\u0003\u015b\u139e\b\u015b\u0001\u015c\u0001\u015c"+
		"\u0001\u015d\u0001\u015d\u0001\u015d\u0005\u015d\u13a5\b\u015d\n\u015d"+
		"\f\u015d\u13a8\t\u015d\u0001\u015e\u0001\u015e\u0001\u015e\u0005\u015e"+
		"\u13ad\b\u015e\n\u015e\f\u015e\u13b0\t\u015e\u0001\u015f\u0001\u015f\u0001"+
		"\u015f\u0005\u015f\u13b5\b\u015f\n\u015f\f\u015f\u13b8\t\u015f\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0003\u0160\u13bd\b\u0160\u0001\u0161\u0001\u0161"+
		"\u0001\u0161\u0003\u0161\u13c2\b\u0161\u0001\u0162\u0001\u0162\u0001\u0162"+
		"\u0003\u0162\u13c7\b\u0162\u0001\u0163\u0001\u0163\u0003\u0163\u13cb\b"+
		"\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u13d0\b\u0163\u0001"+
		"\u0163\u0003\u0163\u13d3\b\u0163\u0001\u0164\u0001\u0164\u0001\u0165\u0001"+
		"\u0165\u0003\u0165\u13d9\b\u0165\u0001\u0166\u0001\u0166\u0003\u0166\u13dd"+
		"\b\u0166\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u13e2\b\u0167"+
		"\u0001\u0168\u0001\u0168\u0001\u0168\u0005\u0168\u13e7\b\u0168\n\u0168"+
		"\f\u0168\u13ea\t\u0168\u0001\u0169\u0001\u0169\u0001\u0169\u0005\u0169"+
		"\u13ef\b\u0169\n\u0169\f\u0169\u13f2\t\u0169\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0003\u016a\u13f7\b\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0003"+
		"\u016a\u13fc\b\u016a\u0001\u016b\u0001\u016b\u0001\u016b\u0005\u016b\u1401"+
		"\b\u016b\n\u016b\f\u016b\u1404\t\u016b\u0001\u016c\u0001\u016c\u0001\u016c"+
		"\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0003\u016c\u140d\b\u016c"+
		"\u0001\u016d\u0001\u016d\u0003\u016d\u1411\b\u016d\u0001\u016d\u0001\u016d"+
		"\u0005\u016d\u1415\b\u016d\n\u016d\f\u016d\u1418\t\u016d\u0001\u016d\u0001"+
		"\u016d\u0003\u016d\u141c\b\u016d\u0001\u016e\u0001\u016e\u0001\u016e\u0003"+
		"\u016e\u1421\b\u016e\u0003\u016e\u1423\b\u016e\u0001\u016e\u0001\u016e"+
		"\u0001\u016e\u0003\u016e\u1428\b\u016e\u0005\u016e\u142a\b\u016e\n\u016e"+
		"\f\u016e\u142d\t\u016e\u0001\u016e\u0001\u016e\u0003\u016e\u1431\b\u016e"+
		"\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0003\u016f"+
		"\u1438\b\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0003\u016f\u143d\b"+
		"\u016f\u0003\u016f\u143f\b\u016f\u0003\u016f\u1441\b\u016f\u0001\u016f"+
		"\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f"+
		"\u0001\u016f\u0003\u016f\u144b\b\u016f\u0001\u016f\u0001\u016f\u0001\u016f"+
		"\u0003\u016f\u1450\b\u016f\u0005\u016f\u1452\b\u016f\n\u016f\f\u016f\u1455"+
		"\t\u016f\u0003\u016f\u1457\b\u016f\u0001\u016f\u0001\u016f\u0003\u016f"+
		"\u145b\b\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0171\u0001\u0171"+
		"\u0001\u0171\u0003\u0171\u1463\b\u0171\u0001\u0171\u0001\u0171\u0001\u0172"+
		"\u0001\u0172\u0003\u0172\u1469\b\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0003\u0172\u146e\b\u0172\u0001\u0172\u0003\u0172\u1471\b\u0172\u0003"+
		"\u0172\u1473\b\u0172\u0001\u0173\u0001\u0173\u0003\u0173\u1477\b\u0173"+
		"\u0001\u0173\u0001\u0173\u0003\u0173\u147b\b\u0173\u0001\u0173\u0001\u0173"+
		"\u0003\u0173\u147f\b\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173"+
		"\u0001\u0173\u0001\u0173\u0003\u0173\u1487\b\u0173\u0001\u0173\u0001\u0173"+
		"\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0003\u0173\u148f\b\u0173"+
		"\u0003\u0173\u1491\b\u0173\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0003\u0174\u1497\b\u0174\u0001\u0174\u0003\u0174\u149a\b\u0174\u0001"+
		"\u0174\u0001\u0174\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0003\u0175\u14b2\b\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0003\u0175\u14b9"+
		"\b\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0003\u0175\u14da\b\u0175\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0003\u0176\u14df\b\u0176\u0001\u0176\u0003\u0176\u14e2\b\u0176"+
		"\u0001\u0176\u0001\u0176\u0001\u0176\u0003\u0176\u14e7\b\u0176\u0003\u0176"+
		"\u14e9\b\u0176\u0001\u0176\u0001\u0176\u0005\u0176\u14ed\b\u0176\n\u0176"+
		"\f\u0176\u14f0\t\u0176\u0001\u0177\u0001\u0177\u0001\u0177\u0005\u0177"+
		"\u14f5\b\u0177\n\u0177\f\u0177\u14f8\t\u0177\u0001\u0178\u0001\u0178\u0003"+
		"\u0178\u14fc\b\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0005\u0178\u1501"+
		"\b\u0178\n\u0178\f\u0178\u1504\t\u0178\u0001\u0178\u0003\u0178\u1507\b"+
		"\u0178\u0001\u0179\u0001\u0179\u0003\u0179\u150b\b\u0179\u0001\u0179\u0001"+
		"\u0179\u0001\u0179\u0005\u0179\u1510\b\u0179\n\u0179\f\u0179\u1513\t\u0179"+
		"\u0001\u017a\u0001\u017a\u0001\u017a\u0003\u017a\u1518\b\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0001\u017a\u0003\u017a\u151e\b\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0001\u017a\u0003\u017a\u1524\b\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0001\u017a\u0003\u017a\u152a\b\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0003\u017a\u152f\b\u017a\u0003\u017a\u1531\b"+
		"\u017a\u0001\u017a\u0003\u017a\u1534\b\u017a\u0001\u017a\u0001\u017a\u0001"+
		"\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0003"+
		"\u017a\u153e\b\u017a\u0001\u017a\u0003\u017a\u1541\b\u017a\u0003\u017a"+
		"\u1543\b\u017a\u0003\u017a\u1545\b\u017a\u0001\u017a\u0001\u017a\u0001"+
		"\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001"+
		"\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0003\u017a\u1553\b\u017a\u0001"+
		"\u017b\u0001\u017b\u0001\u017c\u0001\u017c\u0001\u017d\u0001\u017d\u0003"+
		"\u017d\u155b\b\u017d\u0001\u017d\u0001\u017d\u0001\u017e\u0001\u017e\u0003"+
		"\u017e\u1561\b\u017e\u0001\u017f\u0001\u017f\u0001\u017f\u0001\u017f\u0001"+
		"\u017f\u0001\u017f\u0001\u017f\u0003\u017f\u156a\b\u017f\u0001\u0180\u0001"+
		"\u0180\u0001\u0180\u0003\u0180\u156f\b\u0180\u0001\u0181\u0001\u0181\u0001"+
		"\u0181\u0003\u0181\u1574\b\u0181\u0001\u0182\u0001\u0182\u0001\u0182\u0003"+
		"\u0182\u1579\b\u0182\u0001\u0183\u0001\u0183\u0001\u0183\u0001\u0183\u0001"+
		"\u0184\u0001\u0184\u0001\u0184\u0000\u0000\u0185\u0000\u0002\u0004\u0006"+
		"\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,."+
		"02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118"+
		"\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130"+
		"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148"+
		"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160"+
		"\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178"+
		"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190"+
		"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8"+
		"\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0"+
		"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8"+
		"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0"+
		"\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208"+
		"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220"+
		"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238"+
		"\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250"+
		"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268"+
		"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280"+
		"\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298"+
		"\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0"+
		"\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8"+
		"\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0"+
		"\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8"+
		"\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u0000M\u0001\u0000\u0208"+
		"\u0208\u0002\u0001\u0208\u0208\u0217\u0217\u0002\u0000\u0013\u0013\u00c2"+
		"\u00c2\u0002\u0000\u00a5\u00a5\u0137\u0137\u0002\u0000==\u0115\u0115\u0003"+
		"\u0000((\u011c\u011c\u0174\u0174\u0002\u0000rr~~\u0002\u0000\n\n\u001f"+
		"\u001f\u0003\u0000mm\u00b9\u00b9\u01a5\u01a5\u0003\u0000\u00f6\u00f6\u010e"+
		"\u010e\u011f\u011f\u0002\u0000\u009d\u009d\u01ab\u01ab\u0002\u0000((\u0174"+
		"\u0174\u0002\u0000\t\tww\u0003\u0000\t\tww\u00ea\u00ea\u0003\u0000ZZ\u0114"+
		"\u0114\u0175\u0175\u0002\u0000\u00dd\u00dd\u0115\u0115\u0002\u0000\u00e1"+
		"\u00e1\u017d\u017d\u0003\u0000\u0095\u0095\u00ba\u00ba\u011b\u011b\u0002"+
		"\u0000XXll\u0004\u0000\u00ac\u00ac\u00b8\u00b8\u00fb\u00fb\u0118\u0118"+
		"\u0002\u0000ii\u0205\u0205\u0001\u0000\u0147\u0148\u0002\u0000\u0110\u0110"+
		"\u01bf\u01bf\u0001\u0000IJ\u0002\u0000kk\u00ab\u00ab\u0002\u0000\u0104"+
		"\u0104\u01b5\u01b5\u0002\u0000\u001e\u001e\u00ab\u00ab\u0002\u0000++n"+
		"n\u0003\u0000\r\rtt\u01a1\u01a1\u0002\u0000UU\u00ef\u00ef\u0003\u0000"+
		"\u009f\u009f\u00cc\u00cc\u014c\u014c\u0002\u0000\u0158\u0158\u018a\u018a"+
		"\u0003\u0000\u0158\u0158\u0172\u0172\u018a\u018a\u0002\u0000\u0089\u0089"+
		"\u00ad\u00ad\u0002\u0000VV\u014e\u014e\u0002\u0000\u00aa\u00aa\u00c7\u00c7"+
		"\u0002\u0000\r\r\u01a6\u01a6\u0002\u0000\u001c\u001c\u0160\u0160\u0002"+
		"\u0000\u0014\u0014oo\u0002\u0000\u0096\u0096\u00c9\u00c9\u0002\u0000\r"+
		"\r\u0096\u0096\u0001\u0000\u0186\u0187\u0003\u0000\u0084\u0084\u00be\u00be"+
		"\u01a0\u01a0\u0002\u0000\r\rtt\u0002\u0000\u00e1\u00e1\u0180\u0180\u0001"+
		"\u0000\u00cf\u00d2\u0001\u0000\u0200\u0201\u0003\u0000\u00e7\u00e7\u01ff"+
		"\u01ff\u0203\u0203\u0002\u0000hh\u00af\u00af\u0004\u0000\r\r\u0011\u0011"+
		"\u008c\u008c\u0173\u0173\u0002\u000055\u01c3\u01c3\u0002\u0000tt\u01a1"+
		"\u01a1\u0002\u000022CC\u0002\u0000\u0097\u0097\u00ca\u00ca\u0002\u0000"+
		"77\u00f3\u00f3\u0003\u0000**\u00cb\u00cb\u0195\u0195\u0002\u0000\u01c4"+
		"\u01c4\u01c7\u01c7\u0002\u0000\u0081\u0081\u00fd\u00fd\u0002\u0000\u0085"+
		"\u0085\u00ed\u00ed\u0002\u0000LLuu\u0002\u0000\u00a7\u00a7\u0169\u0169"+
		"\u0001\u0000\u01e0\u01ef\u0001\u0000\u01d9\u01df\u0001\u0000\u01d3\u01d8"+
		"\u0002\u0000\u0137\u0137\u0151\u0151\u0002\u0000\u0099\u0099\u0131\u0131"+
		"\u0002\u0000\u0102\u0102\u0157\u0157\u0002\u0000\u0120\u0120\u0181\u0181"+
		"\u0002\u0000\u00aa\u00aa\u0143\u0143\u0001\u0000\u0124\u0125\u0002\u0000"+
		"__\u01cf\u01cf\u0002\u0000\u00eb\u00eb\u015a\u015a\u0002\u0000..66\u0004"+
		"\u0000__\u00a8\u00a8\u00e4\u00e4\u015a\u015a\u0001\u0000\u01f6\u01f7\u0002"+
		"\u0000\u01f1\u01f1\u01f8\u01f8\t\u0000\b\u0015\u0017\u008f\u0091\u00e6"+
		"\u00e8\u00f6\u00f8\u0122\u0129\u0129\u012b\u0193\u0195\u01ef\u0276\u0276"+
		"\u17fb\u0000\u030b\u0001\u0000\u0000\u0000\u0002\u0312\u0001\u0000\u0000"+
		"\u0000\u0004\u0325\u0001\u0000\u0000\u0000\u0006\u0342\u0001\u0000\u0000"+
		"\u0000\b\u0344\u0001\u0000\u0000\u0000\n\u034b\u0001\u0000\u0000\u0000"+
		"\f\u034d\u0001\u0000\u0000\u0000\u000e\u0352\u0001\u0000\u0000\u0000\u0010"+
		"\u036a\u0001\u0000\u0000\u0000\u0012\u036e\u0001\u0000\u0000\u0000\u0014"+
		"\u039b\u0001\u0000\u0000\u0000\u0016\u039f\u0001\u0000\u0000\u0000\u0018"+
		"\u03b7\u0001\u0000\u0000\u0000\u001a\u03bb\u0001\u0000\u0000\u0000\u001c"+
		"\u03c7\u0001\u0000\u0000\u0000\u001e\u03d5\u0001\u0000\u0000\u0000 \u03dd"+
		"\u0001\u0000\u0000\u0000\"\u03f3\u0001\u0000\u0000\u0000$\u0400\u0001"+
		"\u0000\u0000\u0000&\u0414\u0001\u0000\u0000\u0000(\u042d\u0001\u0000\u0000"+
		"\u0000*\u0439\u0001\u0000\u0000\u0000,\u043b\u0001\u0000\u0000\u0000."+
		"\u0440\u0001\u0000\u0000\u00000\u0458\u0001\u0000\u0000\u00002\u045c\u0001"+
		"\u0000\u0000\u00004\u047e\u0001\u0000\u0000\u00006\u0483\u0001\u0000\u0000"+
		"\u00008\u049c\u0001\u0000\u0000\u0000:\u04b4\u0001\u0000\u0000\u0000<"+
		"\u04bd\u0001\u0000\u0000\u0000>\u04c6\u0001\u0000\u0000\u0000@\u04cf\u0001"+
		"\u0000\u0000\u0000B\u04d3\u0001\u0000\u0000\u0000D\u04d8\u0001\u0000\u0000"+
		"\u0000F\u04f0\u0001\u0000\u0000\u0000H\u04f2\u0001\u0000\u0000\u0000J"+
		"\u04f6\u0001\u0000\u0000\u0000L\u052a\u0001\u0000\u0000\u0000N\u0546\u0001"+
		"\u0000\u0000\u0000P\u0548\u0001\u0000\u0000\u0000R\u0556\u0001\u0000\u0000"+
		"\u0000T\u0562\u0001\u0000\u0000\u0000V\u0567\u0001\u0000\u0000\u0000X"+
		"\u056d\u0001\u0000\u0000\u0000Z\u0570\u0001\u0000\u0000\u0000\\\u057b"+
		"\u0001\u0000\u0000\u0000^\u058a\u0001\u0000\u0000\u0000`\u059b\u0001\u0000"+
		"\u0000\u0000b\u05ac\u0001\u0000\u0000\u0000d\u05b4\u0001\u0000\u0000\u0000"+
		"f\u05b9\u0001\u0000\u0000\u0000h\u05c9\u0001\u0000\u0000\u0000j\u05cd"+
		"\u0001\u0000\u0000\u0000l\u05e5\u0001\u0000\u0000\u0000n\u05e8\u0001\u0000"+
		"\u0000\u0000p\u05ee\u0001\u0000\u0000\u0000r\u05fa\u0001\u0000\u0000\u0000"+
		"t\u0603\u0001\u0000\u0000\u0000v\u061f\u0001\u0000\u0000\u0000x\u0625"+
		"\u0001\u0000\u0000\u0000z\u0628\u0001\u0000\u0000\u0000|\u062f\u0001\u0000"+
		"\u0000\u0000~\u0637\u0001\u0000\u0000\u0000\u0080\u0643\u0001\u0000\u0000"+
		"\u0000\u0082\u0645\u0001\u0000\u0000\u0000\u0084\u0649\u0001\u0000\u0000"+
		"\u0000\u0086\u064f\u0001\u0000\u0000\u0000\u0088\u0668\u0001\u0000\u0000"+
		"\u0000\u008a\u0687\u0001\u0000\u0000\u0000\u008c\u06b4\u0001\u0000\u0000"+
		"\u0000\u008e\u06be\u0001\u0000\u0000\u0000\u0090\u06c0\u0001\u0000\u0000"+
		"\u0000\u0092\u06c5\u0001\u0000\u0000\u0000\u0094\u06d3\u0001\u0000\u0000"+
		"\u0000\u0096\u06d5\u0001\u0000\u0000\u0000\u0098\u06da\u0001\u0000\u0000"+
		"\u0000\u009a\u06eb\u0001\u0000\u0000\u0000\u009c\u070d\u0001\u0000\u0000"+
		"\u0000\u009e\u0731\u0001\u0000\u0000\u0000\u00a0\u0735\u0001\u0000\u0000"+
		"\u0000\u00a2\u0744\u0001\u0000\u0000\u0000\u00a4\u0746\u0001\u0000\u0000"+
		"\u0000\u00a6\u0749\u0001\u0000\u0000\u0000\u00a8\u074e\u0001\u0000\u0000"+
		"\u0000\u00aa\u0758\u0001\u0000\u0000\u0000\u00ac\u0774\u0001\u0000\u0000"+
		"\u0000\u00ae\u0776\u0001\u0000\u0000\u0000\u00b0\u077a\u0001\u0000\u0000"+
		"\u0000\u00b2\u077d\u0001\u0000\u0000\u0000\u00b4\u0781\u0001\u0000\u0000"+
		"\u0000\u00b6\u0786\u0001\u0000\u0000\u0000\u00b8\u078a\u0001\u0000\u0000"+
		"\u0000\u00ba\u079b\u0001\u0000\u0000\u0000\u00bc\u07a8\u0001\u0000\u0000"+
		"\u0000\u00be\u07b9\u0001\u0000\u0000\u0000\u00c0\u07c6\u0001\u0000\u0000"+
		"\u0000\u00c2\u07d3\u0001\u0000\u0000\u0000\u00c4\u07d5\u0001\u0000\u0000"+
		"\u0000\u00c6\u07e3\u0001\u0000\u0000\u0000\u00c8\u07f4\u0001\u0000\u0000"+
		"\u0000\u00ca\u080d\u0001\u0000\u0000\u0000\u00cc\u0817\u0001\u0000\u0000"+
		"\u0000\u00ce\u081b\u0001\u0000\u0000\u0000\u00d0\u0843\u0001\u0000\u0000"+
		"\u0000\u00d2\u0845\u0001\u0000\u0000\u0000\u00d4\u085e\u0001\u0000\u0000"+
		"\u0000\u00d6\u0869\u0001\u0000\u0000\u0000\u00d8\u087a\u0001\u0000\u0000"+
		"\u0000\u00da\u087e\u0001\u0000\u0000\u0000\u00dc\u0890\u0001\u0000\u0000"+
		"\u0000\u00de\u0898\u0001\u0000\u0000\u0000\u00e0\u08a3\u0001\u0000\u0000"+
		"\u0000\u00e2\u08ab\u0001\u0000\u0000\u0000\u00e4\u08af\u0001\u0000\u0000"+
		"\u0000\u00e6\u08d0\u0001\u0000\u0000\u0000\u00e8\u08d5\u0001\u0000\u0000"+
		"\u0000\u00ea\u08da\u0001\u0000\u0000\u0000\u00ec\u08e2\u0001\u0000\u0000"+
		"\u0000\u00ee\u08ea\u0001\u0000\u0000\u0000\u00f0\u08ed\u0001\u0000\u0000"+
		"\u0000\u00f2\u08fd\u0001\u0000\u0000\u0000\u00f4\u0902\u0001\u0000\u0000"+
		"\u0000\u00f6\u0906\u0001\u0000\u0000\u0000\u00f8\u092a\u0001\u0000\u0000"+
		"\u0000\u00fa\u092c\u0001\u0000\u0000\u0000\u00fc\u0942\u0001\u0000\u0000"+
		"\u0000\u00fe\u0944\u0001\u0000\u0000\u0000\u0100\u0949\u0001\u0000\u0000"+
		"\u0000\u0102\u094b\u0001\u0000\u0000\u0000\u0104\u094d\u0001\u0000\u0000"+
		"\u0000\u0106\u094f\u0001\u0000\u0000\u0000\u0108\u0953\u0001\u0000\u0000"+
		"\u0000\u010a\u0958\u0001\u0000\u0000\u0000\u010c\u095e\u0001\u0000\u0000"+
		"\u0000\u010e\u098d\u0001\u0000\u0000\u0000\u0110\u098f\u0001\u0000\u0000"+
		"\u0000\u0112\u0995\u0001\u0000\u0000\u0000\u0114\u099b\u0001\u0000\u0000"+
		"\u0000\u0116\u09a8\u0001\u0000\u0000\u0000\u0118\u09ad\u0001\u0000\u0000"+
		"\u0000\u011a\u09b5\u0001\u0000\u0000\u0000\u011c\u09b7\u0001\u0000\u0000"+
		"\u0000\u011e\u09c5\u0001\u0000\u0000\u0000\u0120\u09cf\u0001\u0000\u0000"+
		"\u0000\u0122\u09d5\u0001\u0000\u0000\u0000\u0124\u09d7\u0001\u0000\u0000"+
		"\u0000\u0126\u09da\u0001\u0000\u0000\u0000\u0128\u09df\u0001\u0000\u0000"+
		"\u0000\u012a\u09fe\u0001\u0000\u0000\u0000\u012c\u0a0d\u0001\u0000\u0000"+
		"\u0000\u012e\u0a0f\u0001\u0000\u0000\u0000\u0130\u0a24\u0001\u0000\u0000"+
		"\u0000\u0132\u0a33\u0001\u0000\u0000\u0000\u0134\u0a49\u0001\u0000\u0000"+
		"\u0000\u0136\u0a50\u0001\u0000\u0000\u0000\u0138\u0a5d\u0001\u0000\u0000"+
		"\u0000\u013a\u0a60\u0001\u0000\u0000\u0000\u013c\u0a74\u0001\u0000\u0000"+
		"\u0000\u013e\u0a7c\u0001\u0000\u0000\u0000\u0140\u0a85\u0001\u0000\u0000"+
		"\u0000\u0142\u0aa0\u0001\u0000\u0000\u0000\u0144\u0acb\u0001\u0000\u0000"+
		"\u0000\u0146\u0adb\u0001\u0000\u0000\u0000\u0148\u0ae8\u0001\u0000\u0000"+
		"\u0000\u014a\u0af1\u0001\u0000\u0000\u0000\u014c\u0af4\u0001\u0000\u0000"+
		"\u0000\u014e\u0b1b\u0001\u0000\u0000\u0000\u0150\u0b1f\u0001\u0000\u0000"+
		"\u0000\u0152\u0b27\u0001\u0000\u0000\u0000\u0154\u0b29\u0001\u0000\u0000"+
		"\u0000\u0156\u0b31\u0001\u0000\u0000\u0000\u0158\u0b59\u0001\u0000\u0000"+
		"\u0000\u015a\u0b65\u0001\u0000\u0000\u0000\u015c\u0b7a\u0001\u0000\u0000"+
		"\u0000\u015e\u0b7d\u0001\u0000\u0000\u0000\u0160\u0b89\u0001\u0000\u0000"+
		"\u0000\u0162\u0b8d\u0001\u0000\u0000\u0000\u0164\u0ba6\u0001\u0000\u0000"+
		"\u0000\u0166\u0ba8\u0001\u0000\u0000\u0000\u0168\u0bb9\u0001\u0000\u0000"+
		"\u0000\u016a\u0bc0\u0001\u0000\u0000\u0000\u016c\u0bcf\u0001\u0000\u0000"+
		"\u0000\u016e\u0be6\u0001\u0000\u0000\u0000\u0170\u0bec\u0001\u0000\u0000"+
		"\u0000\u0172\u0bee\u0001\u0000\u0000\u0000\u0174\u0c06\u0001\u0000\u0000"+
		"\u0000\u0176\u0c1e\u0001\u0000\u0000\u0000\u0178\u0c42\u0001\u0000\u0000"+
		"\u0000\u017a\u0c44\u0001\u0000\u0000\u0000\u017c\u0c62\u0001\u0000\u0000"+
		"\u0000\u017e\u0c67\u0001\u0000\u0000\u0000\u0180\u0c69\u0001\u0000\u0000"+
		"\u0000\u0182\u0c75\u0001\u0000\u0000\u0000\u0184\u0c85\u0001\u0000\u0000"+
		"\u0000\u0186\u0c87\u0001\u0000\u0000\u0000\u0188\u0c8a\u0001\u0000\u0000"+
		"\u0000\u018a\u0ca4\u0001\u0000\u0000\u0000\u018c\u0ca6\u0001\u0000\u0000"+
		"\u0000\u018e\u0caa\u0001\u0000\u0000\u0000\u0190\u0cb9\u0001\u0000\u0000"+
		"\u0000\u0192\u0cc5\u0001\u0000\u0000\u0000\u0194\u0ccd\u0001\u0000\u0000"+
		"\u0000\u0196\u0cd1\u0001\u0000\u0000\u0000\u0198\u0cdc\u0001\u0000\u0000"+
		"\u0000\u019a\u0ce1\u0001\u0000\u0000\u0000\u019c\u0cee\u0001\u0000\u0000"+
		"\u0000\u019e\u0d02\u0001\u0000\u0000\u0000\u01a0\u0d0b\u0001\u0000\u0000"+
		"\u0000\u01a2\u0d0d\u0001\u0000\u0000\u0000\u01a4\u0d14\u0001\u0000\u0000"+
		"\u0000\u01a6\u0d19\u0001\u0000\u0000\u0000\u01a8\u0d26\u0001\u0000\u0000"+
		"\u0000\u01aa\u0d2e\u0001\u0000\u0000\u0000\u01ac\u0d36\u0001\u0000\u0000"+
		"\u0000\u01ae\u0d44\u0001\u0000\u0000\u0000\u01b0\u0d46\u0001\u0000\u0000"+
		"\u0000\u01b2\u0d52\u0001\u0000\u0000\u0000\u01b4\u0d75\u0001\u0000\u0000"+
		"\u0000\u01b6\u0d77\u0001\u0000\u0000\u0000\u01b8\u0d85\u0001\u0000\u0000"+
		"\u0000\u01ba\u0d8a\u0001\u0000\u0000\u0000\u01bc\u0d9c\u0001\u0000\u0000"+
		"\u0000\u01be\u0da0\u0001\u0000\u0000\u0000\u01c0\u0da8\u0001\u0000\u0000"+
		"\u0000\u01c2\u0db2\u0001\u0000\u0000\u0000\u01c4\u0dba\u0001\u0000\u0000"+
		"\u0000\u01c6\u0dc0\u0001\u0000\u0000\u0000\u01c8\u0dcf\u0001\u0000\u0000"+
		"\u0000\u01ca\u0dd5\u0001\u0000\u0000\u0000\u01cc\u0dee\u0001\u0000\u0000"+
		"\u0000\u01ce\u0e01\u0001\u0000\u0000\u0000\u01d0\u0e05\u0001\u0000\u0000"+
		"\u0000\u01d2\u0e08\u0001\u0000\u0000\u0000\u01d4\u0e24\u0001\u0000\u0000"+
		"\u0000\u01d6\u0e29\u0001\u0000\u0000\u0000\u01d8\u0e3c\u0001\u0000\u0000"+
		"\u0000\u01da\u0e3e\u0001\u0000\u0000\u0000\u01dc\u0e4e\u0001\u0000\u0000"+
		"\u0000\u01de\u0e56\u0001\u0000\u0000\u0000\u01e0\u0e5b\u0001\u0000\u0000"+
		"\u0000\u01e2\u0e66\u0001\u0000\u0000\u0000\u01e4\u0e71\u0001\u0000\u0000"+
		"\u0000\u01e6\u0e74\u0001\u0000\u0000\u0000\u01e8\u0e86\u0001\u0000\u0000"+
		"\u0000\u01ea\u0e88\u0001\u0000\u0000\u0000\u01ec\u0e97\u0001\u0000\u0000"+
		"\u0000\u01ee\u0ea2\u0001\u0000\u0000\u0000\u01f0\u0eb0\u0001\u0000\u0000"+
		"\u0000\u01f2\u0ec7\u0001\u0000\u0000\u0000\u01f4\u0ec9\u0001\u0000\u0000"+
		"\u0000\u01f6\u0ecb\u0001\u0000\u0000\u0000\u01f8\u0eff\u0001\u0000\u0000"+
		"\u0000\u01fa\u0f01\u0001\u0000\u0000\u0000\u01fc\u0f0e\u0001\u0000\u0000"+
		"\u0000\u01fe\u0f10\u0001\u0000\u0000\u0000\u0200\u0f12\u0001\u0000\u0000"+
		"\u0000\u0202\u0f1a\u0001\u0000\u0000\u0000\u0204\u0f1c\u0001\u0000\u0000"+
		"\u0000\u0206\u0f27\u0001\u0000\u0000\u0000\u0208\u0f50\u0001\u0000\u0000"+
		"\u0000\u020a\u0f55\u0001\u0000\u0000\u0000\u020c\u0f6e\u0001\u0000\u0000"+
		"\u0000\u020e\u0f70\u0001\u0000\u0000\u0000\u0210\u0f72\u0001\u0000\u0000"+
		"\u0000\u0212\u0f93\u0001\u0000\u0000\u0000\u0214\u0f95\u0001\u0000\u0000"+
		"\u0000\u0216\u0f97\u0001\u0000\u0000\u0000\u0218\u0fac\u0001\u0000\u0000"+
		"\u0000\u021a\u0fae\u0001\u0000\u0000\u0000\u021c\u0fb2\u0001\u0000\u0000"+
		"\u0000\u021e\u0fbb\u0001\u0000\u0000\u0000\u0220\u0fbd\u0001\u0000\u0000"+
		"\u0000\u0222\u0fc5\u0001\u0000\u0000\u0000\u0224\u0fcd\u0001\u0000\u0000"+
		"\u0000\u0226\u0ff0\u0001\u0000\u0000\u0000\u0228\u0ff2\u0001\u0000\u0000"+
		"\u0000\u022a\u1010\u0001\u0000\u0000\u0000\u022c\u1012\u0001\u0000\u0000"+
		"\u0000\u022e\u1022\u0001\u0000\u0000\u0000\u0230\u1025\u0001\u0000\u0000"+
		"\u0000\u0232\u1027\u0001\u0000\u0000\u0000\u0234\u1056\u0001\u0000\u0000"+
		"\u0000\u0236\u105a\u0001\u0000\u0000\u0000\u0238\u105d\u0001\u0000\u0000"+
		"\u0000\u023a\u1070\u0001\u0000\u0000\u0000\u023c\u1078\u0001\u0000\u0000"+
		"\u0000\u023e\u108a\u0001\u0000\u0000\u0000\u0240\u1091\u0001\u0000\u0000"+
		"\u0000\u0242\u10ab\u0001\u0000\u0000\u0000\u0244\u10ad\u0001\u0000\u0000"+
		"\u0000\u0246\u10b1\u0001\u0000\u0000\u0000\u0248\u10ba\u0001\u0000\u0000"+
		"\u0000\u024a\u10e4\u0001\u0000\u0000\u0000\u024c\u10f5\u0001\u0000\u0000"+
		"\u0000\u024e\u10f7\u0001\u0000\u0000\u0000\u0250\u1100\u0001\u0000\u0000"+
		"\u0000\u0252\u1233\u0001\u0000\u0000\u0000\u0254\u1235\u0001\u0000\u0000"+
		"\u0000\u0256\u1237\u0001\u0000\u0000\u0000\u0258\u1239\u0001\u0000\u0000"+
		"\u0000\u025a\u123b\u0001\u0000\u0000\u0000\u025c\u1248\u0001\u0000\u0000"+
		"\u0000\u025e\u1251\u0001\u0000\u0000\u0000\u0260\u125a\u0001\u0000\u0000"+
		"\u0000\u0262\u125c\u0001\u0000\u0000\u0000\u0264\u126d\u0001\u0000\u0000"+
		"\u0000\u0266\u1273\u0001\u0000\u0000\u0000\u0268\u127e\u0001\u0000\u0000"+
		"\u0000\u026a\u1280\u0001\u0000\u0000\u0000\u026c\u1294\u0001\u0000\u0000"+
		"\u0000\u026e\u12a7\u0001\u0000\u0000\u0000\u0270\u12b9\u0001\u0000\u0000"+
		"\u0000\u0272\u12cd\u0001\u0000\u0000\u0000\u0274\u12da\u0001\u0000\u0000"+
		"\u0000\u0276\u12dd\u0001\u0000\u0000\u0000\u0278\u12e8\u0001\u0000\u0000"+
		"\u0000\u027a\u12ee\u0001\u0000\u0000\u0000\u027c\u12f6\u0001\u0000\u0000"+
		"\u0000\u027e\u12f9\u0001\u0000\u0000\u0000\u0280\u1304\u0001\u0000\u0000"+
		"\u0000\u0282\u1306\u0001\u0000\u0000\u0000\u0284\u130f\u0001\u0000\u0000"+
		"\u0000\u0286\u1311\u0001\u0000\u0000\u0000\u0288\u1325\u0001\u0000\u0000"+
		"\u0000\u028a\u132c\u0001\u0000\u0000\u0000\u028c\u1334\u0001\u0000\u0000"+
		"\u0000\u028e\u1336\u0001\u0000\u0000\u0000\u0290\u1338\u0001\u0000\u0000"+
		"\u0000\u0292\u133d\u0001\u0000\u0000\u0000\u0294\u1343\u0001\u0000\u0000"+
		"\u0000\u0296\u1359\u0001\u0000\u0000\u0000\u0298\u135d\u0001\u0000\u0000"+
		"\u0000\u029a\u135f\u0001\u0000\u0000\u0000\u029c\u1361\u0001\u0000\u0000"+
		"\u0000\u029e\u1363\u0001\u0000\u0000\u0000\u02a0\u1365\u0001\u0000\u0000"+
		"\u0000\u02a2\u1367\u0001\u0000\u0000\u0000\u02a4\u1369\u0001\u0000\u0000"+
		"\u0000\u02a6\u136b\u0001\u0000\u0000\u0000\u02a8\u137a\u0001\u0000\u0000"+
		"\u0000\u02aa\u137e\u0001\u0000\u0000\u0000\u02ac\u1383\u0001\u0000\u0000"+
		"\u0000\u02ae\u1385\u0001\u0000\u0000\u0000\u02b0\u1387\u0001\u0000\u0000"+
		"\u0000\u02b2\u1389\u0001\u0000\u0000\u0000\u02b4\u1391\u0001\u0000\u0000"+
		"\u0000\u02b6\u1393\u0001\u0000\u0000\u0000\u02b8\u139f\u0001\u0000\u0000"+
		"\u0000\u02ba\u13a1\u0001\u0000\u0000\u0000\u02bc\u13a9\u0001\u0000\u0000"+
		"\u0000\u02be\u13b1\u0001\u0000\u0000\u0000\u02c0\u13b9\u0001\u0000\u0000"+
		"\u0000\u02c2\u13be\u0001\u0000\u0000\u0000\u02c4\u13c3\u0001\u0000\u0000"+
		"\u0000\u02c6\u13d2\u0001\u0000\u0000\u0000\u02c8\u13d4\u0001\u0000\u0000"+
		"\u0000\u02ca\u13d8\u0001\u0000\u0000\u0000\u02cc\u13dc\u0001\u0000\u0000"+
		"\u0000\u02ce\u13de\u0001\u0000\u0000\u0000\u02d0\u13e3\u0001\u0000\u0000"+
		"\u0000\u02d2\u13eb\u0001\u0000\u0000\u0000\u02d4\u13f3\u0001\u0000\u0000"+
		"\u0000\u02d6\u13fd\u0001\u0000\u0000\u0000\u02d8\u1405\u0001\u0000\u0000"+
		"\u0000\u02da\u140e\u0001\u0000\u0000\u0000\u02dc\u141d\u0001\u0000\u0000"+
		"\u0000\u02de\u1432\u0001\u0000\u0000\u0000\u02e0\u145c\u0001\u0000\u0000"+
		"\u0000\u02e2\u1462\u0001\u0000\u0000\u0000\u02e4\u1472\u0001\u0000\u0000"+
		"\u0000\u02e6\u1490\u0001\u0000\u0000\u0000\u02e8\u1492\u0001\u0000\u0000"+
		"\u0000\u02ea\u14d9\u0001\u0000\u0000\u0000\u02ec\u14de\u0001\u0000\u0000"+
		"\u0000\u02ee\u14f1\u0001\u0000\u0000\u0000\u02f0\u14fb\u0001\u0000\u0000"+
		"\u0000\u02f2\u150a\u0001\u0000\u0000\u0000\u02f4\u1552\u0001\u0000\u0000"+
		"\u0000\u02f6\u1554\u0001\u0000\u0000\u0000\u02f8\u1556\u0001\u0000\u0000"+
		"\u0000\u02fa\u155a\u0001\u0000\u0000\u0000\u02fc\u1560\u0001\u0000\u0000"+
		"\u0000\u02fe\u1569\u0001\u0000\u0000\u0000\u0300\u156e\u0001\u0000\u0000"+
		"\u0000\u0302\u1573\u0001\u0000\u0000\u0000\u0304\u1578\u0001\u0000\u0000"+
		"\u0000\u0306\u157a\u0001\u0000\u0000\u0000\u0308\u157e\u0001\u0000\u0000"+
		"\u0000\u030a\u030c\b\u0000\u0000\u0000\u030b\u030a\u0001\u0000\u0000\u0000"+
		"\u030c\u030d\u0001\u0000\u0000\u0000\u030d\u030b\u0001\u0000\u0000\u0000"+
		"\u030d\u030e\u0001\u0000\u0000\u0000\u030e\u0001\u0001\u0000\u0000\u0000"+
		"\u030f\u0311\u0003\u0006\u0003\u0000\u0310\u030f\u0001\u0000\u0000\u0000"+
		"\u0311\u0314\u0001\u0000\u0000\u0000\u0312\u0310\u0001\u0000\u0000\u0000"+
		"\u0312\u0313\u0001\u0000\u0000\u0000\u0313\u0315\u0001\u0000\u0000\u0000"+
		"\u0314\u0312\u0001\u0000\u0000\u0000\u0315\u0316\u0005\u0000\u0000\u0001"+
		"\u0316\u0003\u0001\u0000\u0000\u0000\u0317\u031c\u0003\u0006\u0003\u0000"+
		"\u0318\u0319\u0005\u0208\u0000\u0000\u0319\u031b\u0003\u0006\u0003\u0000"+
		"\u031a\u0318\u0001\u0000\u0000\u0000\u031b\u031e\u0001\u0000\u0000\u0000"+
		"\u031c\u031a\u0001\u0000\u0000\u0000\u031c\u031d\u0001\u0000\u0000\u0000"+
		"\u031d\u0320\u0001\u0000\u0000\u0000\u031e\u031c\u0001\u0000\u0000\u0000"+
		"\u031f\u0321\u0005\u0208\u0000\u0000\u0320\u031f\u0001\u0000\u0000\u0000"+
		"\u0320\u0321\u0001\u0000\u0000\u0000\u0321\u0324\u0001\u0000\u0000\u0000"+
		"\u0322\u0324\u0003\u0286\u0143\u0000\u0323\u0317\u0001\u0000\u0000\u0000"+
		"\u0323\u0322\u0001\u0000\u0000\u0000\u0324\u0327\u0001\u0000\u0000\u0000"+
		"\u0325\u0323\u0001\u0000\u0000\u0000\u0325\u0326\u0001\u0000\u0000\u0000"+
		"\u0326\u0329\u0001\u0000\u0000\u0000\u0327\u0325\u0001\u0000\u0000\u0000"+
		"\u0328\u032a\u0007\u0001\u0000\u0000\u0329\u0328\u0001\u0000\u0000\u0000"+
		"\u0329\u032a\u0001\u0000\u0000\u0000\u032a\u0005\u0001\u0000\u0000\u0000"+
		"\u032b\u0343\u0003\u000e\u0007\u0000\u032c\u0343\u0003 \u0010\u0000\u032d"+
		"\u0343\u0003.\u0017\u0000\u032e\u0343\u0003\u00a8T\u0000\u032f\u0343\u0003"+
		"6\u001b\u0000\u0330\u0343\u0003\\.\u0000\u0331\u0343\u0003\u0010\b\u0000"+
		"\u0332\u0343\u00030\u0018\u0000\u0333\u0343\u0003\"\u0011\u0000\u0334"+
		"\u0343\u0003\u00aaU\u0000\u0335\u0343\u00038\u001c\u0000\u0336\u0343\u0003"+
		"p8\u0000\u0337\u0343\u0003\f\u0006\u0000\u0338\u0343\u0003\u001e\u000f"+
		"\u0000\u0339\u0343\u0003,\u0016\u0000\u033a\u0343\u0003\u00a6S\u0000\u033b"+
		"\u0343\u00034\u001a\u0000\u033c\u0343\u0003Z-\u0000\u033d\u0343\u0003"+
		"\u0120\u0090\u0000\u033e\u033f\u0003\u0118\u008c\u0000\u033f\u0340\u0005"+
		"\u0208\u0000\u0000\u0340\u0341\u0005\u0203\u0000\u0000\u0341\u0343\u0001"+
		"\u0000\u0000\u0000\u0342\u032b\u0001\u0000\u0000\u0000\u0342\u032c\u0001"+
		"\u0000\u0000\u0000\u0342\u032d\u0001\u0000\u0000\u0000\u0342\u032e\u0001"+
		"\u0000\u0000\u0000\u0342\u032f\u0001\u0000\u0000\u0000\u0342\u0330\u0001"+
		"\u0000\u0000\u0000\u0342\u0331\u0001\u0000\u0000\u0000\u0342\u0332\u0001"+
		"\u0000\u0000\u0000\u0342\u0333\u0001\u0000\u0000\u0000\u0342\u0334\u0001"+
		"\u0000\u0000\u0000\u0342\u0335\u0001\u0000\u0000\u0000\u0342\u0336\u0001"+
		"\u0000\u0000\u0000\u0342\u0337\u0001\u0000\u0000\u0000\u0342\u0338\u0001"+
		"\u0000\u0000\u0000\u0342\u0339\u0001\u0000\u0000\u0000\u0342\u033a\u0001"+
		"\u0000\u0000\u0000\u0342\u033b\u0001\u0000\u0000\u0000\u0342\u033c\u0001"+
		"\u0000\u0000\u0000\u0342\u033d\u0001\u0000\u0000\u0000\u0342\u033e\u0001"+
		"\u0000\u0000\u0000\u0343\u0007\u0001\u0000\u0000\u0000\u0344\u0348\u0005"+
		"f\u0000\u0000\u0345\u0347\u0003\u00c2a\u0000\u0346\u0345\u0001\u0000\u0000"+
		"\u0000\u0347\u034a\u0001\u0000\u0000\u0000\u0348\u0346\u0001\u0000\u0000"+
		"\u0000\u0348\u0349\u0001\u0000\u0000\u0000\u0349\t\u0001\u0000\u0000\u0000"+
		"\u034a\u0348\u0001\u0000\u0000\u0000\u034b\u034c\u0007\u0002\u0000\u0000"+
		"\u034c\u000b\u0001\u0000\u0000\u0000\u034d\u034e\u0005w\u0000\u0000\u034e"+
		"\u034f\u0005\u00a0\u0000\u0000\u034f\u0350\u0003\u02c0\u0160\u0000\u0350"+
		"\u0351\u0005\u0208\u0000\u0000\u0351\r\u0001\u0000\u0000\u0000\u0352\u0353"+
		"\u0005\u000e\u0000\u0000\u0353\u0354\u0005\u00a0\u0000\u0000\u0354\u0355"+
		"\u0003\u02c0\u0160\u0000\u0355\u0357\u0005D\u0000\u0000\u0356\u0358\u0005"+
		"c\u0000\u0000\u0357\u0356\u0001\u0000\u0000\u0000\u0357\u0358\u0001\u0000"+
		"\u0000\u0000\u0358\u035c\u0001\u0000\u0000\u0000\u0359\u035b\u0003\u00b2"+
		"Y\u0000\u035a\u0359\u0001\u0000\u0000\u0000\u035b\u035e\u0001\u0000\u0000"+
		"\u0000\u035c\u035a\u0001\u0000\u0000\u0000\u035c\u035d\u0001\u0000\u0000"+
		"\u0000\u035d\u0361\u0001\u0000\u0000\u0000\u035e\u035c\u0001\u0000\u0000"+
		"\u0000\u035f\u0360\u0005\u0149\u0000\u0000\u0360\u0362\u0005\u0167\u0000"+
		"\u0000\u0361\u035f\u0001\u0000\u0000\u0000\u0361\u0362\u0001\u0000\u0000"+
		"\u0000\u0362\u0363\u0001\u0000\u0000\u0000\u0363\u0364\u0005\u0208\u0000"+
		"\u0000\u0364\u000f\u0001\u0000\u0000\u0000\u0365\u0368\u0005T\u0000\u0000"+
		"\u0366\u0367\u0005\u0113\u0000\u0000\u0367\u0369\u0005\u0142\u0000\u0000"+
		"\u0368\u0366\u0001\u0000\u0000\u0000\u0368\u0369\u0001\u0000\u0000\u0000"+
		"\u0369\u036b\u0001\u0000\u0000\u0000\u036a\u0365\u0001\u0000\u0000\u0000"+
		"\u036a\u036b\u0001\u0000\u0000\u0000\u036b\u036c\u0001\u0000\u0000\u0000"+
		"\u036c\u036d\u0003\u0012\t\u0000\u036d\u0011\u0001\u0000\u0000\u0000\u036e"+
		"\u036f\u0005\u00a0\u0000\u0000\u036f\u037b\u0003\u02c0\u0160\u0000\u0370"+
		"\u0371\u0005\u01fc\u0000\u0000\u0371\u0376\u0003\u00be_\u0000\u0372\u0373"+
		"\u0005\u0202\u0000\u0000\u0373\u0375\u0003\u00be_\u0000\u0374\u0372\u0001"+
		"\u0000\u0000\u0000\u0375\u0378\u0001\u0000\u0000\u0000\u0376\u0374\u0001"+
		"\u0000\u0000\u0000\u0376\u0377\u0001\u0000\u0000\u0000\u0377\u0379\u0001"+
		"\u0000\u0000\u0000\u0378\u0376\u0001\u0000\u0000\u0000\u0379\u037a\u0005"+
		"\u01fd\u0000\u0000\u037a\u037c\u0001\u0000\u0000\u0000\u037b\u0370\u0001"+
		"\u0000\u0000\u0000\u037b\u037c\u0001\u0000\u0000\u0000\u037c\u037d\u0001"+
		"\u0000\u0000\u0000\u037d\u037e\u0005\u0147\u0000\u0000\u037e\u0389\u0003"+
		"\u02e4\u0172\u0000\u037f\u0388\u0003\u00b0X\u0000\u0380\u0388\u0003\u0014"+
		"\n\u0000\u0381\u0388\u0003\u0018\f\u0000\u0382\u0388\u0005p\u0000\u0000"+
		"\u0383\u0388\u0005\u0129\u0000\u0000\u0384\u0385\u0005\f\u0000\u0000\u0385"+
		"\u0386\u0005\u01aa\u0000\u0000\u0386\u0388\u0003\u02aa\u0155\u0000\u0387"+
		"\u037f\u0001\u0000\u0000\u0000\u0387\u0380\u0001\u0000\u0000\u0000\u0387"+
		"\u0381\u0001\u0000\u0000\u0000\u0387\u0382\u0001\u0000\u0000\u0000\u0387"+
		"\u0383\u0001\u0000\u0000\u0000\u0387\u0384\u0001\u0000\u0000\u0000\u0388"+
		"\u038b\u0001\u0000\u0000\u0000\u0389\u0387\u0001\u0000\u0000\u0000\u0389"+
		"\u038a\u0001\u0000\u0000\u0000\u038a\u0397\u0001\u0000\u0000\u0000\u038b"+
		"\u0389\u0001\u0000\u0000\u0000\u038c\u0395\u0003\n\u0005\u0000\u038d\u038f"+
		"\u0003\u00c2a\u0000\u038e\u038d\u0001\u0000\u0000\u0000\u038f\u0392\u0001"+
		"\u0000\u0000\u0000\u0390\u038e\u0001\u0000\u0000\u0000\u0390\u0391\u0001"+
		"\u0000\u0000\u0000\u0391\u0393\u0001\u0000\u0000\u0000\u0392\u0390\u0001"+
		"\u0000\u0000\u0000\u0393\u0396\u0003\u010c\u0086\u0000\u0394\u0396\u0003"+
		"\u00b4Z\u0000\u0395\u0390\u0001\u0000\u0000\u0000\u0395\u0394\u0001\u0000"+
		"\u0000\u0000\u0396\u0398\u0001\u0000\u0000\u0000\u0397\u038c\u0001\u0000"+
		"\u0000\u0000\u0397\u0398\u0001\u0000\u0000\u0000\u0398\u0399\u0001\u0000"+
		"\u0000\u0000\u0399\u039a\u0005\u0208\u0000\u0000\u039a\u0013\u0001\u0000"+
		"\u0000\u0000\u039b\u039d\u0005\u011d\u0000\u0000\u039c\u039e\u0003\u0016"+
		"\u000b\u0000\u039d\u039c\u0001\u0000\u0000\u0000\u039d\u039e\u0001\u0000"+
		"\u0000\u0000\u039e\u0015\u0001\u0000\u0000\u0000\u039f\u03a0\u0005\u01fc"+
		"\u0000\u0000\u03a0\u03a1\u0005\u0120\u0000\u0000\u03a1\u03a2\u0003\u0200"+
		"\u0100\u0000\u03a2\u03b0\u0005-\u0000\u0000\u03a3\u03b1\u0005\u0011\u0000"+
		"\u0000\u03a4\u03a5\u0007\u0003\u0000\u0000\u03a5\u03a6\u0005\u01fc\u0000"+
		"\u0000\u03a6\u03ab\u0003\u02d2\u0169\u0000\u03a7\u03a8\u0005\u0202\u0000"+
		"\u0000\u03a8\u03aa\u0003\u02d2\u0169\u0000\u03a9\u03a7\u0001\u0000\u0000"+
		"\u0000\u03aa\u03ad\u0001\u0000\u0000\u0000\u03ab\u03a9\u0001\u0000\u0000"+
		"\u0000\u03ab\u03ac\u0001\u0000\u0000\u0000\u03ac\u03ae\u0001\u0000\u0000"+
		"\u0000\u03ad\u03ab\u0001\u0000\u0000\u0000\u03ae\u03af\u0005\u01fd\u0000"+
		"\u0000\u03af\u03b1\u0001\u0000\u0000\u0000\u03b0\u03a3\u0001\u0000\u0000"+
		"\u0000\u03b0\u03a4\u0001\u0000\u0000\u0000\u03b1\u03b3\u0001\u0000\u0000"+
		"\u0000\u03b2\u03b4\u0003\u001c\u000e\u0000\u03b3\u03b2\u0001\u0000\u0000"+
		"\u0000\u03b3\u03b4\u0001\u0000\u0000\u0000\u03b4\u03b5\u0001\u0000\u0000"+
		"\u0000\u03b5\u03b6\u0005\u01fd\u0000\u0000\u03b6\u0017\u0001\u0000\u0000"+
		"\u0000\u03b7\u03b9\u0005\u0146\u0000\u0000\u03b8\u03ba\u0003\u001a\r\u0000"+
		"\u03b9\u03b8\u0001\u0000\u0000\u0000\u03b9\u03ba\u0001\u0000\u0000\u0000"+
		"\u03ba\u0019\u0001\u0000\u0000\u0000\u03bb\u03bc\u0005\u0140\u0000\u0000"+
		"\u03bc\u03bd\u0005\u01fc\u0000\u0000\u03bd\u03c2\u0003\u02d4\u016a\u0000"+
		"\u03be\u03bf\u0005\u0202\u0000\u0000\u03bf\u03c1\u0003\u02d4\u016a\u0000"+
		"\u03c0\u03be\u0001\u0000\u0000\u0000\u03c1\u03c4\u0001\u0000\u0000\u0000"+
		"\u03c2\u03c0\u0001\u0000\u0000\u0000\u03c2\u03c3\u0001\u0000\u0000\u0000"+
		"\u03c3\u03c5\u0001\u0000\u0000\u0000\u03c4\u03c2\u0001\u0000\u0000\u0000"+
		"\u03c5\u03c6\u0005\u01fd\u0000\u0000\u03c6\u001b\u0001\u0000\u0000\u0000"+
		"\u03c7\u03c8\u0007\u0004\u0000\u0000\u03c8\u03c9\u0003\u0200\u0100\u0000"+
		"\u03c9\u03ca\u0005-\u0000\u0000\u03ca\u03cb\u0005\u01fc\u0000\u0000\u03cb"+
		"\u03d0\u0003\u02d2\u0169\u0000\u03cc\u03cd\u0005\u0202\u0000\u0000\u03cd"+
		"\u03cf\u0003\u02d2\u0169\u0000\u03ce\u03cc\u0001\u0000\u0000\u0000\u03cf"+
		"\u03d2\u0001\u0000\u0000\u0000\u03d0\u03ce\u0001\u0000\u0000\u0000\u03d0"+
		"\u03d1\u0001\u0000\u0000\u0000\u03d1\u03d3\u0001\u0000\u0000\u0000\u03d2"+
		"\u03d0\u0001\u0000\u0000\u0000\u03d3\u03d4\u0005\u01fd\u0000\u0000\u03d4"+
		"\u001d\u0001\u0000\u0000\u0000\u03d5\u03d6\u0005w\u0000\u0000\u03d6\u03d8"+
		"\u0005\u011c\u0000\u0000\u03d7\u03d9\u0005(\u0000\u0000\u03d8\u03d7\u0001"+
		"\u0000\u0000\u0000\u03d8\u03d9\u0001\u0000\u0000\u0000\u03d9\u03da\u0001"+
		"\u0000\u0000\u0000\u03da\u03db\u0003\u02a8\u0154\u0000\u03db\u03dc\u0005"+
		"\u0208\u0000\u0000\u03dc\u001f\u0001\u0000\u0000\u0000\u03dd\u03de\u0005"+
		"\u000e\u0000\u0000\u03de\u03df\u0005\u011c\u0000\u0000\u03df\u03e0\u0003"+
		"\u02a8\u0154\u0000\u03e0\u03e2\u0005D\u0000\u0000\u03e1\u03e3\u0005c\u0000"+
		"\u0000\u03e2\u03e1\u0001\u0000\u0000\u0000\u03e2\u03e3\u0001\u0000\u0000"+
		"\u0000\u03e3\u03e5\u0001\u0000\u0000\u0000\u03e4\u03e6\u0007\u0005\u0000"+
		"\u0000\u03e5\u03e4\u0001\u0000\u0000\u0000\u03e5\u03e6\u0001\u0000\u0000"+
		"\u0000\u03e6\u03ea\u0001\u0000\u0000\u0000\u03e7\u03e9\u0003\u00b2Y\u0000"+
		"\u03e8\u03e7\u0001\u0000\u0000\u0000\u03e9\u03ec\u0001\u0000\u0000\u0000"+
		"\u03ea\u03e8\u0001\u0000\u0000\u0000\u03ea\u03eb\u0001\u0000\u0000\u0000"+
		"\u03eb\u03ef\u0001\u0000\u0000\u0000\u03ec\u03ea\u0001\u0000\u0000\u0000"+
		"\u03ed\u03ee\u0005\u0149\u0000\u0000\u03ee\u03f0\u0005\u0167\u0000\u0000"+
		"\u03ef\u03ed\u0001\u0000\u0000\u0000\u03ef\u03f0\u0001\u0000\u0000\u0000"+
		"\u03f0\u03f1\u0001\u0000\u0000\u0000\u03f1\u03f2\u0005\u0208\u0000\u0000"+
		"\u03f2!\u0001\u0000\u0000\u0000\u03f3\u03f6\u0005T\u0000\u0000\u03f4\u03f5"+
		"\u0005\u0113\u0000\u0000\u03f5\u03f7\u0005\u0142\u0000\u0000\u03f6\u03f4"+
		"\u0001\u0000\u0000\u0000\u03f6\u03f7\u0001\u0000\u0000\u0000\u03f7\u03f8"+
		"\u0001\u0000\u0000\u0000\u03f8\u03fb\u0005\u011c\u0000\u0000\u03f9\u03fc"+
		"\u0003&\u0013\u0000\u03fa\u03fc\u0003$\u0012\u0000\u03fb\u03f9\u0001\u0000"+
		"\u0000\u0000\u03fb\u03fa\u0001\u0000\u0000\u0000\u03fb\u03fc\u0001\u0000"+
		"\u0000\u0000\u03fc\u03fd\u0001\u0000\u0000\u0000\u03fd\u03fe\u0005\u0208"+
		"\u0000\u0000\u03fe\u03ff\u0005\u0203\u0000\u0000\u03ff#\u0001\u0000\u0000"+
		"\u0000\u0400\u0401\u0005(\u0000\u0000\u0401\u0402\u0003\u02a8\u0154\u0000"+
		"\u0402\u0406\u0003\n\u0005\u0000\u0403\u0405\u0003*\u0015\u0000\u0404"+
		"\u0403\u0001\u0000\u0000\u0000\u0405\u0408\u0001\u0000\u0000\u0000\u0406"+
		"\u0404\u0001\u0000\u0000\u0000\u0406\u0407\u0001\u0000\u0000\u0000\u0407"+
		"\u040b\u0001\u0000\u0000\u0000\u0408\u0406\u0001\u0000\u0000\u0000\u0409"+
		"\u040a\u0005 \u0000\u0000\u040a\u040c\u0003\u00e2q\u0000\u040b\u0409\u0001"+
		"\u0000\u0000\u0000\u040b\u040c\u0001\u0000\u0000\u0000\u040c\u040e\u0001"+
		"\u0000\u0000\u0000\u040d\u040f\u0003\u0112\u0089\u0000\u040e\u040d\u0001"+
		"\u0000\u0000\u0000\u040e\u040f\u0001\u0000\u0000\u0000\u040f\u0410\u0001"+
		"\u0000\u0000\u0000\u0410\u0412\u0005\u0080\u0000\u0000\u0411\u0413\u0003"+
		"\u02a8\u0154\u0000\u0412\u0411\u0001\u0000\u0000\u0000\u0412\u0413\u0001"+
		"\u0000\u0000\u0000\u0413%\u0001\u0000\u0000\u0000\u0414\u0416\u0003\u02a8"+
		"\u0154\u0000\u0415\u0417\u0003\u00b0X\u0000\u0416\u0415\u0001\u0000\u0000"+
		"\u0000\u0416\u0417\u0001\u0000\u0000\u0000\u0417\u0418\u0001\u0000\u0000"+
		"\u0000\u0418\u041c\u0003\n\u0005\u0000\u0419\u041b\u0003(\u0014\u0000"+
		"\u041a\u0419\u0001\u0000\u0000\u0000\u041b\u041e\u0001\u0000\u0000\u0000"+
		"\u041c\u041a\u0001\u0000\u0000\u0000\u041c\u041d\u0001\u0000\u0000\u0000"+
		"\u041d\u041f\u0001\u0000\u0000\u0000\u041e\u041c\u0001\u0000\u0000\u0000"+
		"\u041f\u0421\u0005\u0080\u0000\u0000\u0420\u0422\u0003\u02a8\u0154\u0000"+
		"\u0421\u0420\u0001\u0000\u0000\u0000\u0421\u0422\u0001\u0000\u0000\u0000"+
		"\u0422\'\u0001\u0000\u0000\u0000\u0423\u042e\u0003\u00c4b\u0000\u0424"+
		"\u042e\u0003\u00c6c\u0000\u0425\u042e\u0003\u00c8d\u0000\u0426\u042e\u0003"+
		"\u00ccf\u0000\u0427\u042e\u0003\u00ceg\u0000\u0428\u042e\u0003\u00d0h"+
		"\u0000\u0429\u042e\u0003\u00d8l\u0000\u042a\u042e\u00032\u0019\u0000\u042b"+
		"\u042e\u0003\u0012\t\u0000\u042c\u042e\u0003\u0286\u0143\u0000\u042d\u0423"+
		"\u0001\u0000\u0000\u0000\u042d\u0424\u0001\u0000\u0000\u0000\u042d\u0425"+
		"\u0001\u0000\u0000\u0000\u042d\u0426\u0001\u0000\u0000\u0000\u042d\u0427"+
		"\u0001\u0000\u0000\u0000\u042d\u0428\u0001\u0000\u0000\u0000\u042d\u0429"+
		"\u0001\u0000\u0000\u0000\u042d\u042a\u0001\u0000\u0000\u0000\u042d\u042b"+
		"\u0001\u0000\u0000\u0000\u042d\u042c\u0001\u0000\u0000\u0000\u042e)\u0001"+
		"\u0000\u0000\u0000\u042f\u043a\u0003\u00c4b\u0000\u0430\u043a\u0003\u00c6"+
		"c\u0000\u0431\u043a\u0003\u00c8d\u0000\u0432\u043a\u0003\u00ccf\u0000"+
		"\u0433\u043a\u0003\u00ceg\u0000\u0434\u043a\u0003\u00d0h\u0000\u0435\u043a"+
		"\u0003\u00d8l\u0000\u0436\u043a\u00030\u0018\u0000\u0437\u043a\u0003\u0010"+
		"\b\u0000\u0438\u043a\u0003\u0286\u0143\u0000\u0439\u042f\u0001\u0000\u0000"+
		"\u0000\u0439\u0430\u0001\u0000\u0000\u0000\u0439\u0431\u0001\u0000\u0000"+
		"\u0000\u0439\u0432\u0001\u0000\u0000\u0000\u0439\u0433\u0001\u0000\u0000"+
		"\u0000\u0439\u0434\u0001\u0000\u0000\u0000\u0439\u0435\u0001\u0000\u0000"+
		"\u0000\u0439\u0436\u0001\u0000\u0000\u0000\u0439\u0437\u0001\u0000\u0000"+
		"\u0000\u0439\u0438\u0001\u0000\u0000\u0000\u043a+\u0001\u0000\u0000\u0000"+
		"\u043b\u043c\u0005w\u0000\u0000\u043c\u043d\u0005\u0135\u0000\u0000\u043d"+
		"\u043e\u0003\u02c2\u0161\u0000\u043e\u043f\u0005\u0208\u0000\u0000\u043f"+
		"-\u0001\u0000\u0000\u0000\u0440\u0441\u0005\u000e\u0000\u0000\u0441\u0442"+
		"\u0005\u0135\u0000\u0000\u0442\u0443\u0003\u02c2\u0161\u0000\u0443\u0445"+
		"\u0005D\u0000\u0000\u0444\u0446\u0005c\u0000\u0000\u0445\u0444\u0001\u0000"+
		"\u0000\u0000\u0445\u0446\u0001\u0000\u0000\u0000\u0446\u044a\u0001\u0000"+
		"\u0000\u0000\u0447\u0449\u0003\u00b2Y\u0000\u0448\u0447\u0001\u0000\u0000"+
		"\u0000\u0449\u044c\u0001\u0000\u0000\u0000\u044a\u0448\u0001\u0000\u0000"+
		"\u0000\u044a\u044b\u0001\u0000\u0000\u0000\u044b\u044f\u0001\u0000\u0000"+
		"\u0000\u044c\u044a\u0001\u0000\u0000\u0000\u044d\u044e\u0005\u0149\u0000"+
		"\u0000\u044e\u0450\u0005\u0167\u0000\u0000\u044f\u044d\u0001\u0000\u0000"+
		"\u0000\u044f\u0450\u0001\u0000\u0000\u0000\u0450\u0451\u0001\u0000\u0000"+
		"\u0000\u0451\u0452\u0005\u0208\u0000\u0000\u0452/\u0001\u0000\u0000\u0000"+
		"\u0453\u0456\u0005T\u0000\u0000\u0454\u0455\u0005\u0113\u0000\u0000\u0455"+
		"\u0457\u0005\u0142\u0000\u0000\u0456\u0454\u0001\u0000\u0000\u0000\u0456"+
		"\u0457\u0001\u0000\u0000\u0000\u0457\u0459\u0001\u0000\u0000\u0000\u0458"+
		"\u0453\u0001\u0000\u0000\u0000\u0458\u0459\u0001\u0000\u0000\u0000\u0459"+
		"\u045a\u0001\u0000\u0000\u0000\u045a\u045b\u00032\u0019\u0000\u045b1\u0001"+
		"\u0000\u0000\u0000\u045c\u045d\u0005\u0135\u0000\u0000\u045d\u0469\u0003"+
		"\u02c2\u0161\u0000\u045e\u045f\u0005\u01fc\u0000\u0000\u045f\u0464\u0003"+
		"\u00be_\u0000\u0460\u0461\u0005\u0202\u0000\u0000\u0461\u0463\u0003\u00be"+
		"_\u0000\u0462\u0460\u0001\u0000\u0000\u0000\u0463\u0466\u0001\u0000\u0000"+
		"\u0000\u0464\u0462\u0001\u0000\u0000\u0000\u0464\u0465\u0001\u0000\u0000"+
		"\u0000\u0465\u0467\u0001\u0000\u0000\u0000\u0466\u0464\u0001\u0000\u0000"+
		"\u0000\u0467\u0468\u0005\u01fd\u0000\u0000\u0468\u046a\u0001\u0000\u0000"+
		"\u0000\u0469\u045e\u0001\u0000\u0000\u0000\u0469\u046a\u0001\u0000\u0000"+
		"\u0000\u046a\u047a\u0001\u0000\u0000\u0000\u046b\u046d\u0003\u00b0X\u0000"+
		"\u046c\u046b\u0001\u0000\u0000\u0000\u046c\u046d\u0001\u0000\u0000\u0000"+
		"\u046d\u046e\u0001\u0000\u0000\u0000\u046e\u0478\u0003\n\u0005\u0000\u046f"+
		"\u0471\u0003\u00c2a\u0000\u0470\u046f\u0001\u0000\u0000\u0000\u0471\u0474"+
		"\u0001\u0000\u0000\u0000\u0472\u0470\u0001\u0000\u0000\u0000\u0472\u0473"+
		"\u0001\u0000\u0000\u0000\u0473\u0475\u0001\u0000\u0000\u0000\u0474\u0472"+
		"\u0001\u0000\u0000\u0000\u0475\u0479\u0003\u010c\u0086\u0000\u0476\u0479"+
		"\u0003\u00b4Z\u0000\u0477\u0479\u0005\u008f\u0000\u0000\u0478\u0472\u0001"+
		"\u0000\u0000\u0000\u0478\u0476\u0001\u0000\u0000\u0000\u0478\u0477\u0001"+
		"\u0000\u0000\u0000\u0479\u047b\u0001\u0000\u0000\u0000\u047a\u046c\u0001"+
		"\u0000\u0000\u0000\u047a\u047b\u0001\u0000\u0000\u0000\u047b\u047c\u0001"+
		"\u0000\u0000\u0000\u047c\u047d\u0005\u0208\u0000\u0000\u047d3\u0001\u0000"+
		"\u0000\u0000\u047e\u047f\u0005w\u0000\u0000\u047f\u0480\u0005\u0199\u0000"+
		"\u0000\u0480\u0481\u0003\u02c4\u0162\u0000\u0481\u0482\u0005\u0208\u0000"+
		"\u0000\u04825\u0001\u0000\u0000\u0000\u0483\u0484\u0005\u000e\u0000\u0000"+
		"\u0484\u0485\u0005\u0199\u0000\u0000\u0485\u0498\u0003\u02c4\u0162\u0000"+
		"\u0486\u0499\u0007\u0006\u0000\u0000\u0487\u0488\u0005\u0141\u0000\u0000"+
		"\u0488\u0489\u0005\u0192\u0000\u0000\u0489\u0499\u0003\u02c4\u0162\u0000"+
		"\u048a\u048c\u0005D\u0000\u0000\u048b\u048d\u0005c\u0000\u0000\u048c\u048b"+
		"\u0001\u0000\u0000\u0000\u048c\u048d\u0001\u0000\u0000\u0000\u048d\u0491"+
		"\u0001\u0000\u0000\u0000\u048e\u0490\u0003\u00b2Y\u0000\u048f\u048e\u0001"+
		"\u0000\u0000\u0000\u0490\u0493\u0001\u0000\u0000\u0000\u0491\u048f\u0001"+
		"\u0000\u0000\u0000\u0491\u0492\u0001\u0000\u0000\u0000\u0492\u0496\u0001"+
		"\u0000\u0000\u0000\u0493\u0491\u0001\u0000\u0000\u0000\u0494\u0495\u0005"+
		"\u0149\u0000\u0000\u0495\u0497\u0005\u0167\u0000\u0000\u0496\u0494\u0001"+
		"\u0000\u0000\u0000\u0496\u0497\u0001\u0000\u0000\u0000\u0497\u0499\u0001"+
		"\u0000\u0000\u0000\u0498\u0486\u0001\u0000\u0000\u0000\u0498\u0487\u0001"+
		"\u0000\u0000\u0000\u0498\u048a\u0001\u0000\u0000\u0000\u0499\u049a\u0001"+
		"\u0000\u0000\u0000\u049a\u049b\u0005\u0208\u0000\u0000\u049b7\u0001\u0000"+
		"\u0000\u0000\u049c\u049f\u0005T\u0000\u0000\u049d\u049e\u0005\u0113\u0000"+
		"\u0000\u049e\u04a0\u0005\u0142\u0000\u0000\u049f\u049d\u0001\u0000\u0000"+
		"\u0000\u049f\u04a0\u0001\u0000\u0000\u0000\u04a0\u04a1\u0001\u0000\u0000"+
		"\u0000\u04a1\u04a2\u0005\u0199\u0000\u0000\u04a2\u04a6\u0003\u02c4\u0162"+
		"\u0000\u04a3\u04a7\u0003>\u001f\u0000\u04a4\u04a7\u0003B!\u0000\u04a5"+
		"\u04a7\u0003D\"\u0000\u04a6\u04a3\u0001\u0000\u0000\u0000\u04a6\u04a4"+
		"\u0001\u0000\u0000\u0000\u04a6\u04a5\u0001\u0000\u0000\u0000\u04a7\u04a9"+
		"\u0001\u0000\u0000\u0000\u04a8\u04aa\u0003:\u001d\u0000\u04a9\u04a8\u0001"+
		"\u0000\u0000\u0000\u04a9\u04aa\u0001\u0000\u0000\u0000\u04aa\u04ac\u0001"+
		"\u0000\u0000\u0000\u04ab\u04ad\u0007\u0006\u0000\u0000\u04ac\u04ab\u0001"+
		"\u0000\u0000\u0000\u04ac\u04ad\u0001\u0000\u0000\u0000\u04ad\u04af\u0001"+
		"\u0000\u0000\u0000\u04ae\u04b0\u0003<\u001e\u0000\u04af\u04ae\u0001\u0000"+
		"\u0000\u0000\u04af\u04b0\u0001\u0000\u0000\u0000\u04b0\u04b1\u0001\u0000"+
		"\u0000\u0000\u04b1\u04b2\u0003F#\u0000\u04b2\u04b3\u0005\u0208\u0000\u0000"+
		"\u04b39\u0001\u0000\u0000\u0000\u04b4\u04b5\u0005\u009a\u0000\u0000\u04b5"+
		"\u04ba\u0003\u02c4\u0162\u0000\u04b6\u04b7\u0005\u0202\u0000\u0000\u04b7"+
		"\u04b9\u0003\u02c4\u0162\u0000\u04b8\u04b6\u0001\u0000\u0000\u0000\u04b9"+
		"\u04bc\u0001\u0000\u0000\u0000\u04ba\u04b8\u0001\u0000\u0000\u0000\u04ba"+
		"\u04bb\u0001\u0000\u0000\u0000\u04bb;\u0001\u0000\u0000\u0000\u04bc\u04ba"+
		"\u0001\u0000\u0000\u0000\u04bd\u04be\u0005\u01b8\u0000\u0000\u04be\u04bf"+
		"\u0005\u01fc\u0000\u0000\u04bf\u04c0\u0003\u01fc\u00fe\u0000\u04c0\u04c1"+
		"\u0005\u01fd\u0000\u0000\u04c1=\u0001\u0000\u0000\u0000\u04c2\u04c7\u0005"+
		"\u001f\u0000\u0000\u04c3\u04c7\u0005\n\u0000\u0000\u04c4\u04c5\u0005\u00bb"+
		"\u0000\u0000\u04c5\u04c7\u0005\u010b\u0000\u0000\u04c6\u04c2\u0001\u0000"+
		"\u0000\u0000\u04c6\u04c3\u0001\u0000\u0000\u0000\u04c6\u04c4\u0001\u0000"+
		"\u0000\u0000\u04c7\u04c8\u0001\u0000\u0000\u0000\u04c8\u04ca\u0003P(\u0000"+
		"\u04c9\u04cb\u0003V+\u0000\u04ca\u04c9\u0001\u0000\u0000\u0000\u04ca\u04cb"+
		"\u0001\u0000\u0000\u0000\u04cb\u04cd\u0001\u0000\u0000\u0000\u04cc\u04ce"+
		"\u0003@ \u0000\u04cd\u04cc\u0001\u0000\u0000\u0000\u04cd\u04ce\u0001\u0000"+
		"\u0000\u0000\u04ce?\u0001\u0000\u0000\u0000\u04cf\u04d0\u0005\u009b\u0000"+
		"\u0000\u04d0\u04d1\u0005y\u0000\u0000\u04d1\u04d2\u0005\u014f\u0000\u0000"+
		"\u04d2A\u0001\u0000\u0000\u0000\u04d3\u04d4\u0005\u009b\u0000\u0000\u04d4"+
		"\u04d6\u0003P(\u0000\u04d5\u04d7\u0003V+\u0000\u04d6\u04d5\u0001\u0000"+
		"\u0000\u0000\u04d6\u04d7\u0001\u0000\u0000\u0000\u04d7C\u0001\u0000\u0000"+
		"\u0000\u04d8\u04d9\u0007\u0007\u0000\u0000\u04d9\u04de\u0003N\'\u0000"+
		"\u04da\u04db\u0005\u0113\u0000\u0000\u04db\u04dd\u0003N\'\u0000\u04dc"+
		"\u04da\u0001\u0000\u0000\u0000\u04dd\u04e0\u0001\u0000\u0000\u0000\u04de"+
		"\u04dc\u0001\u0000\u0000\u0000\u04de\u04df\u0001\u0000\u0000\u0000\u04df"+
		"\u04e1\u0001\u0000\u0000\u0000\u04e0\u04de\u0001\u0000\u0000\u0000\u04e1"+
		"\u04e9\u0005\u010f\u0000\u0000\u04e2\u04ea\u0005]\u0000\u0000\u04e3\u04e4"+
		"\u0003\u02a4\u0152\u0000\u04e4\u04e5\u0005\u01f5\u0000\u0000\u04e5\u04e7"+
		"\u0001\u0000\u0000\u0000\u04e6\u04e3\u0001\u0000\u0000\u0000\u04e6\u04e7"+
		"\u0001\u0000\u0000\u0000\u04e7\u04e8\u0001\u0000\u0000\u0000\u04e8\u04ea"+
		"\u0005\u0156\u0000\u0000\u04e9\u04e2\u0001\u0000\u0000\u0000\u04e9\u04e6"+
		"\u0001\u0000\u0000\u0000\u04eaE\u0001\u0000\u0000\u0000\u04eb\u04ec\u0005"+
		"E\u0000\u0000\u04ec\u04f1\u0005\u0199\u0000\u0000\u04ed\u04ee\u00051\u0000"+
		"\u0000\u04ee\u04f1\u0003\u02fa\u017d\u0000\u04ef\u04f1\u0003\u0116\u008b"+
		"\u0000\u04f0\u04eb\u0001\u0000\u0000\u0000\u04f0\u04ed\u0001\u0000\u0000"+
		"\u0000\u04f0\u04ef\u0001\u0000\u0000\u0000\u04f1G\u0001\u0000\u0000\u0000"+
		"\u04f2\u04f4\u0003\u02a6\u0153\u0000\u04f3\u04f5\u0003\u02da\u016d\u0000"+
		"\u04f4\u04f3\u0001\u0000\u0000\u0000\u04f4\u04f5\u0001\u0000\u0000\u0000"+
		"\u04f5I\u0001\u0000\u0000\u0000\u04f6\u04f7\u0005E\u0000\u0000\u04f7\u04fb"+
		"\u0005\u0199\u0000\u0000\u04f8\u04fa\u0003\u00c2a\u0000\u04f9\u04f8\u0001"+
		"\u0000\u0000\u0000\u04fa\u04fd\u0001\u0000\u0000\u0000\u04fb\u04f9\u0001"+
		"\u0000\u0000\u0000\u04fb\u04fc\u0001\u0000\u0000\u0000\u04fc\u04ff\u0001"+
		"\u0000\u0000\u0000\u04fd\u04fb\u0001\u0000\u0000\u0000\u04fe\u0500\u0003"+
		"L&\u0000\u04ff\u04fe\u0001\u0000\u0000\u0000\u0500\u0501\u0001\u0000\u0000"+
		"\u0000\u0501\u04ff\u0001\u0000\u0000\u0000\u0501\u0502\u0001\u0000\u0000"+
		"\u0000\u0502\u0503\u0001\u0000\u0000\u0000\u0503\u0504\u0005\u0080\u0000"+
		"\u0000\u0504\u0505\u0003\u02c4\u0162\u0000\u0505K\u0001\u0000\u0000\u0000"+
		"\u0506\u0507\u0005\u001f\u0000\u0000\u0507\u0508\u0005\u017b\u0000\u0000"+
		"\u0508\u0509\u0005\u00c2\u0000\u0000\u0509\u050a\u0003\u0116\u008b\u0000"+
		"\u050a\u050b\u0005\u001f\u0000\u0000\u050b\u050c\u0005\u017b\u0000\u0000"+
		"\u050c\u050d\u0005\u0208\u0000\u0000\u050d\u052b\u0001\u0000\u0000\u0000"+
		"\u050e\u050f\u0005\u001f\u0000\u0000\u050f\u0510\u0005y\u0000\u0000\u0510"+
		"\u0511\u0005\u014f\u0000\u0000\u0511\u0512\u0005\u00c2\u0000\u0000\u0512"+
		"\u0513\u0003\u0116\u008b\u0000\u0513\u0514\u0005\u001f\u0000\u0000\u0514"+
		"\u0515\u0005y\u0000\u0000\u0515\u0516\u0005\u014f\u0000\u0000\u0516\u0517"+
		"\u0005\u0208\u0000\u0000\u0517\u052b\u0001\u0000\u0000\u0000\u0518\u0519"+
		"\u0005\n\u0000\u0000\u0519\u051a\u0005\u017b\u0000\u0000\u051a\u051b\u0005"+
		"\u00c2\u0000\u0000\u051b\u051c\u0003\u0116\u008b\u0000\u051c\u051d\u0005"+
		"\n\u0000\u0000\u051d\u051e\u0005\u017b\u0000\u0000\u051e\u051f\u0005\u0208"+
		"\u0000\u0000\u051f\u052b\u0001\u0000\u0000\u0000\u0520\u0521\u0005\n\u0000"+
		"\u0000\u0521\u0522\u0005y\u0000\u0000\u0522\u0523\u0005\u014f\u0000\u0000"+
		"\u0523\u0524\u0005\u00c2\u0000\u0000\u0524\u0525\u0003\u0116\u008b\u0000"+
		"\u0525\u0526\u0005\n\u0000\u0000\u0526\u0527\u0005y\u0000\u0000\u0527"+
		"\u0528\u0005\u014f\u0000\u0000\u0528\u0529\u0005\u0208\u0000\u0000\u0529"+
		"\u052b\u0001\u0000\u0000\u0000\u052a\u0506\u0001\u0000\u0000\u0000\u052a"+
		"\u050e\u0001\u0000\u0000\u0000\u052a\u0518\u0001\u0000\u0000\u0000\u052a"+
		"\u0520\u0001\u0000\u0000\u0000\u052bM\u0001\u0000\u0000\u0000\u052c\u0547"+
		"\u0005\u000e\u0000\u0000\u052d\u0547\u0005\u000f\u0000\u0000\u052e\u052f"+
		"\u0005\u0015\u0000\u0000\u052f\u0547\u0005\u017e\u0000\u0000\u0530\u0547"+
		"\u0005\u0019\u0000\u0000\u0531\u0547\u0005@\u0000\u0000\u0532\u0547\u0005"+
		"T\u0000\u0000\u0533\u0534\u0005s\u0000\u0000\u0534\u0547\u0005\u017e\u0000"+
		"\u0000\u0535\u0547\u0005w\u0000\u0000\u0536\u0547\u0005\u00a2\u0000\u0000"+
		"\u0537\u0547\u0005\u00f9\u0000\u0000\u0538\u0547\u0005\u0141\u0000\u0000"+
		"\u0539\u0547\u0005\u014b\u0000\u0000\u053a\u0547\u0005\u019c\u0000\u0000"+
		"\u053b\u0547\u0005b\u0000\u0000\u053c\u0547\u0005\u017a\u0000\u0000\u053d"+
		"\u0547\u0005\u016a\u0000\u0000\u053e\u0547\u0005`\u0000\u0000\u053f\u0547"+
		"\u0005\u00d9\u0000\u0000\u0540\u0547\u0005\u00d8\u0000\u0000\u0541\u0547"+
		"\u0005\u0163\u0000\u0000\u0542\u0547\u0005\u0185\u0000\u0000\u0543\u0547"+
		"\u0005]\u0000\u0000\u0544\u0547\u0005\u0156\u0000\u0000\u0545\u0547\u0005"+
		"\u009a\u0000\u0000\u0546\u052c\u0001\u0000\u0000\u0000\u0546\u052d\u0001"+
		"\u0000\u0000\u0000\u0546\u052e\u0001\u0000\u0000\u0000\u0546\u0530\u0001"+
		"\u0000\u0000\u0000\u0546\u0531\u0001\u0000\u0000\u0000\u0546\u0532\u0001"+
		"\u0000\u0000\u0000\u0546\u0533\u0001\u0000\u0000\u0000\u0546\u0535\u0001"+
		"\u0000\u0000\u0000\u0546\u0536\u0001\u0000\u0000\u0000\u0546\u0537\u0001"+
		"\u0000\u0000\u0000\u0546\u0538\u0001\u0000\u0000\u0000\u0546\u0539\u0001"+
		"\u0000\u0000\u0000\u0546\u053a\u0001\u0000\u0000\u0000\u0546\u053b\u0001"+
		"\u0000\u0000\u0000\u0546\u053c\u0001\u0000\u0000\u0000\u0546\u053d\u0001"+
		"\u0000\u0000\u0000\u0546\u053e\u0001\u0000\u0000\u0000\u0546\u053f\u0001"+
		"\u0000\u0000\u0000\u0546\u0540\u0001\u0000\u0000\u0000\u0546\u0541\u0001"+
		"\u0000\u0000\u0000\u0546\u0542\u0001\u0000\u0000\u0000\u0546\u0543\u0001"+
		"\u0000\u0000\u0000\u0546\u0544\u0001\u0000\u0000\u0000\u0546\u0545\u0001"+
		"\u0000\u0000\u0000\u0547O\u0001\u0000\u0000\u0000\u0548\u054d\u0003R)"+
		"\u0000\u0549\u054a\u0005\u0113\u0000\u0000\u054a\u054c\u0003R)\u0000\u054b"+
		"\u0549\u0001\u0000\u0000\u0000\u054c\u054f\u0001\u0000\u0000\u0000\u054d"+
		"\u054b\u0001\u0000\u0000\u0000\u054d\u054e\u0001\u0000\u0000\u0000\u054e"+
		"\u0550\u0001\u0000\u0000\u0000\u054f\u054d\u0001\u0000\u0000\u0000\u0550"+
		"\u0552\u0005\u010f\u0000\u0000\u0551\u0553\u0003T*\u0000\u0552\u0551\u0001"+
		"\u0000\u0000\u0000\u0552\u0553\u0001\u0000\u0000\u0000\u0553\u0554\u0001"+
		"\u0000\u0000\u0000\u0554\u0555\u0003\u02d4\u016a\u0000\u0555Q\u0001\u0000"+
		"\u0000\u0000\u0556\u0560\u0007\b\u0000\u0000\u0557\u0558\u0005\u010b\u0000"+
		"\u0000\u0558\u055d\u0003\u02d2\u0169\u0000\u0559\u055a\u0005\u0202\u0000"+
		"\u0000\u055a\u055c\u0003\u02d2\u0169\u0000\u055b\u0559\u0001\u0000\u0000"+
		"\u0000\u055c\u055f\u0001\u0000\u0000\u0000\u055d\u055b\u0001\u0000\u0000"+
		"\u0000\u055d\u055e\u0001\u0000\u0000\u0000\u055e\u0561\u0001\u0000\u0000"+
		"\u0000\u055f\u055d\u0001\u0000\u0000\u0000\u0560\u0557\u0001\u0000\u0000"+
		"\u0000\u0560\u0561\u0001\u0000\u0000\u0000\u0561S\u0001\u0000\u0000\u0000"+
		"\u0562\u0563\u0005\u00f5\u0000\u0000\u0563\u0564\u0005\u0186\u0000\u0000"+
		"\u0564\u0565\u0003\u02d4\u016a\u0000\u0565\u0566\u0005\u010b\u0000\u0000"+
		"\u0566U\u0001\u0000\u0000\u0000\u0567\u0569\u0005\u013e\u0000\u0000\u0568"+
		"\u056a\u0003X,\u0000\u0569\u0568\u0001\u0000\u0000\u0000\u056a\u056b\u0001"+
		"\u0000\u0000\u0000\u056b\u0569\u0001\u0000\u0000\u0000\u056b\u056c\u0001"+
		"\u0000\u0000\u0000\u056cW\u0001\u0000\u0000\u0000\u056d\u056e\u0007\t"+
		"\u0000\u0000\u056e\u056f\u0003\u028a\u0145\u0000\u056fY\u0001\u0000\u0000"+
		"\u0000\u0570\u0571\u0005w\u0000\u0000\u0571\u0573\u0005\u019d\u0000\u0000"+
		"\u0572\u0574\u0005(\u0000\u0000\u0573\u0572\u0001\u0000\u0000\u0000\u0573"+
		"\u0574\u0001\u0000\u0000\u0000\u0574\u0575\u0001\u0000\u0000\u0000\u0575"+
		"\u0577\u0003\u02ba\u015d\u0000\u0576\u0578\u0007\n\u0000\u0000\u0577\u0576"+
		"\u0001\u0000\u0000\u0000\u0577\u0578\u0001\u0000\u0000\u0000\u0578\u0579"+
		"\u0001\u0000\u0000\u0000\u0579\u057a\u0005\u0208\u0000\u0000\u057a[\u0001"+
		"\u0000\u0000\u0000\u057b\u057c\u0005\u000e\u0000\u0000\u057c\u057d\u0005"+
		"\u019d\u0000\u0000\u057d\u0583\u0003\u02ba\u015d\u0000\u057e\u0584\u0003"+
		"^/\u0000\u057f\u0584\u0003`0\u0000\u0580\u0584\u0003b1\u0000\u0581\u0584"+
		"\u0003j5\u0000\u0582\u0584\u0003\u008cF\u0000\u0583\u057e\u0001\u0000"+
		"\u0000\u0000\u0583\u057f\u0001\u0000\u0000\u0000\u0583\u0580\u0001\u0000"+
		"\u0000\u0000\u0583\u0581\u0001\u0000\u0000\u0000\u0583\u0582\u0001\u0000"+
		"\u0000\u0000\u0584\u0586\u0001\u0000\u0000\u0000\u0585\u0587\u0003l6\u0000"+
		"\u0586\u0585\u0001\u0000\u0000\u0000\u0586\u0587\u0001\u0000\u0000\u0000"+
		"\u0587\u0588\u0001\u0000\u0000\u0000\u0588\u0589\u0005\u0208\u0000\u0000"+
		"\u0589]\u0001\u0000\u0000\u0000\u058a\u058c\u0005D\u0000\u0000\u058b\u058d"+
		"\u0005c\u0000\u0000\u058c\u058b\u0001\u0000\u0000\u0000\u058c\u058d\u0001"+
		"\u0000\u0000\u0000\u058d\u058f\u0001\u0000\u0000\u0000\u058e\u0590\u0007"+
		"\u000b\u0000\u0000\u058f\u058e\u0001\u0000\u0000\u0000\u058f\u0590\u0001"+
		"\u0000\u0000\u0000\u0590\u0594\u0001\u0000\u0000\u0000\u0591\u0593\u0003"+
		"\u00b2Y\u0000\u0592\u0591\u0001\u0000\u0000\u0000\u0593\u0596\u0001\u0000"+
		"\u0000\u0000\u0594\u0592\u0001\u0000\u0000\u0000\u0594\u0595\u0001\u0000"+
		"\u0000\u0000\u0595\u0599\u0001\u0000\u0000\u0000\u0596\u0594\u0001\u0000"+
		"\u0000\u0000\u0597\u0598\u0005\u0149\u0000\u0000\u0598\u059a\u0005\u0167"+
		"\u0000\u0000\u0599\u0597\u0001\u0000\u0000\u0000\u0599\u059a\u0001\u0000"+
		"\u0000\u0000\u059a_\u0001\u0000\u0000\u0000\u059b\u059d\u0005\u0142\u0000"+
		"\u0000\u059c\u059e\u0003\u00b0X\u0000\u059d\u059c\u0001\u0000\u0000\u0000"+
		"\u059d\u059e\u0001\u0000\u0000\u0000\u059e\u059f\u0001\u0000\u0000\u0000"+
		"\u059f\u05a0\u0005\u0013\u0000\u0000\u05a0\u05a1\u0005\u010a\u0000\u0000"+
		"\u05a1\u05a2\u0005\u01fc\u0000\u0000\u05a2\u05a7\u0003\u008eG\u0000\u05a3"+
		"\u05a4\u0005\u0202\u0000\u0000\u05a4\u05a6\u0003\u008eG\u0000\u05a5\u05a3"+
		"\u0001\u0000\u0000\u0000\u05a6\u05a9\u0001\u0000\u0000\u0000\u05a7\u05a5"+
		"\u0001\u0000\u0000\u0000\u05a7\u05a8\u0001\u0000\u0000\u0000\u05a8\u05aa"+
		"\u0001\u0000\u0000\u0000\u05a9\u05a7\u0001\u0000\u0000\u0000\u05aa\u05ab"+
		"\u0005\u01fd\u0000\u0000\u05aba\u0001\u0000\u0000\u0000\u05ac\u05b1\u0003"+
		"d2\u0000\u05ad\u05ae\u0005\u0202\u0000\u0000\u05ae\u05b0\u0003d2\u0000"+
		"\u05af\u05ad\u0001\u0000\u0000\u0000\u05b0\u05b3\u0001\u0000\u0000\u0000"+
		"\u05b1\u05af\u0001\u0000\u0000\u0000\u05b1\u05b2\u0001\u0000\u0000\u0000"+
		"\u05b2c\u0001\u0000\u0000\u0000\u05b3\u05b1\u0001\u0000\u0000\u0000\u05b4"+
		"\u05b7\u0007\f\u0000\u0000\u05b5\u05b8\u0003\u009eO\u0000\u05b6\u05b8"+
		"\u0003\u0096K\u0000\u05b7\u05b5\u0001\u0000\u0000\u0000\u05b7\u05b6\u0001"+
		"\u0000\u0000\u0000\u05b8e\u0001\u0000\u0000\u0000\u05b9\u05ba\u0007\r"+
		"\u0000\u0000\u05ba\u05c7\u0005\u0018\u0000\u0000\u05bb\u05c8\u0003h4\u0000"+
		"\u05bc\u05bd\u0005\u01fc\u0000\u0000\u05bd\u05c2\u0003h4\u0000\u05be\u05bf"+
		"\u0005\u0202\u0000\u0000\u05bf\u05c1\u0003h4\u0000\u05c0\u05be\u0001\u0000"+
		"\u0000\u0000\u05c1\u05c4\u0001\u0000\u0000\u0000\u05c2\u05c0\u0001\u0000"+
		"\u0000\u0000\u05c2\u05c3\u0001\u0000\u0000\u0000\u05c3\u05c5\u0001\u0000"+
		"\u0000\u0000\u05c4\u05c2\u0001\u0000\u0000\u0000\u05c5\u05c6\u0005\u01fd"+
		"\u0000\u0000\u05c6\u05c8\u0001\u0000\u0000\u0000\u05c7\u05bb\u0001\u0000"+
		"\u0000\u0000\u05c7\u05bc\u0001\u0000\u0000\u0000\u05c8g\u0001\u0000\u0000"+
		"\u0000\u05c9\u05cb\u0003\u029c\u014e\u0000\u05ca\u05cc\u0003\u02e4\u0172"+
		"\u0000\u05cb\u05ca\u0001\u0000\u0000\u0000\u05cb\u05cc\u0001\u0000\u0000"+
		"\u0000\u05cci\u0001\u0000\u0000\u0000\u05cd\u05d3\u0005\u00ea\u0000\u0000"+
		"\u05ce\u05cf\u0005\u00d3\u0000\u0000\u05cf\u05d4\u0003\u0200\u0100\u0000"+
		"\u05d0\u05d1\u0005z\u0000\u0000\u05d1\u05d2\u0005\u019d\u0000\u0000\u05d2"+
		"\u05d4\u0003\u02e4\u0172\u0000\u05d3\u05ce\u0001\u0000\u0000\u0000\u05d3"+
		"\u05d0\u0001\u0000\u0000\u0000\u05d4k\u0001\u0000\u0000\u0000\u05d5\u05e6"+
		"\u0005\u00c1\u0000\u0000\u05d6\u05e0\u00053\u0000\u0000\u05d7\u05d8\u0005"+
		"O\u0000\u0000\u05d8\u05d9\u0005\u0192\u0000\u0000\u05d9\u05e1\u0005\u0182"+
		"\u0000\u0000\u05da\u05dc\u0005\u0103\u0000\u0000\u05db\u05da\u0001\u0000"+
		"\u0000\u0000\u05db\u05dc\u0001\u0000\u0000\u0000\u05dc\u05dd\u0001\u0000"+
		"\u0000\u0000\u05dd\u05de\u0005\u00ae\u0000\u0000\u05de\u05df\u0005\u0186"+
		"\u0000\u0000\u05df\u05e1\u0005\\\u0000\u0000\u05e0\u05d7\u0001\u0000\u0000"+
		"\u0000\u05e0\u05db\u0001\u0000\u0000\u0000\u05e0\u05e1\u0001\u0000\u0000"+
		"\u0000\u05e1\u05e3\u0001\u0000\u0000\u0000\u05e2\u05e4\u0003n7\u0000\u05e3"+
		"\u05e2\u0001\u0000\u0000\u0000\u05e3\u05e4\u0001\u0000\u0000\u0000\u05e4"+
		"\u05e6\u0001\u0000\u0000\u0000\u05e5\u05d5\u0001\u0000\u0000\u0000\u05e5"+
		"\u05d6\u0001\u0000\u0000\u0000\u05e6m\u0001\u0000\u0000\u0000\u05e7\u05e9"+
		"\u0005\u009d\u0000\u0000\u05e8\u05e7\u0001\u0000\u0000\u0000\u05e8\u05e9"+
		"\u0001\u0000\u0000\u0000\u05e9\u05ea\u0001\u0000\u0000\u0000\u05ea\u05eb"+
		"\u0005\u0088\u0000\u0000\u05eb\u05ec\u0005\u00c0\u0000\u0000\u05ec\u05ed"+
		"\u0003\u02d4\u016a\u0000\u05edo\u0001\u0000\u0000\u0000\u05ee\u05f1\u0005"+
		"T\u0000\u0000\u05ef\u05f0\u0005\u0113\u0000\u0000\u05f0\u05f2\u0005\u0142"+
		"\u0000\u0000\u05f1\u05ef\u0001\u0000\u0000\u0000\u05f1\u05f2\u0001\u0000"+
		"\u0000\u0000\u05f2\u05f3\u0001\u0000\u0000\u0000\u05f3\u05f6\u0005\u019d"+
		"\u0000\u0000\u05f4\u05f7\u0003r9\u0000\u05f5\u05f7\u0003~?\u0000\u05f6"+
		"\u05f4\u0001\u0000\u0000\u0000\u05f6\u05f5\u0001\u0000\u0000\u0000\u05f7"+
		"\u05f8\u0001\u0000\u0000\u0000\u05f8\u05f9\u0005\u0208\u0000\u0000\u05f9"+
		"q\u0001\u0000\u0000\u0000\u05fa\u05fd\u0003\u02ba\u015d\u0000\u05fb\u05fc"+
		"\u0005\u010d\u0000\u0000\u05fc\u05fe\u0005\u01f8\u0000\u0000\u05fd\u05fb"+
		"\u0001\u0000\u0000\u0000\u05fd\u05fe\u0001\u0000\u0000\u0000\u05fe\u0600"+
		"\u0001\u0000\u0000\u0000\u05ff\u0601\u0003t:\u0000\u0600\u05ff\u0001\u0000"+
		"\u0000\u0000\u0600\u0601\u0001\u0000\u0000\u0000\u0601s\u0001\u0000\u0000"+
		"\u0000\u0602\u0604\u0003\u00b0X\u0000\u0603\u0602\u0001\u0000\u0000\u0000"+
		"\u0603\u0604\u0001\u0000\u0000\u0000\u0604\u0607\u0001\u0000\u0000\u0000"+
		"\u0605\u0608\u0003v;\u0000\u0606\u0608\u0003x<\u0000\u0607\u0605\u0001"+
		"\u0000\u0000\u0000\u0607\u0606\u0001\u0000\u0000\u0000\u0608\u060a\u0001"+
		"\u0000\u0000\u0000\u0609\u060b\u0003|>\u0000\u060a\u0609\u0001\u0000\u0000"+
		"\u0000\u060a\u060b\u0001\u0000\u0000\u0000\u060b\u0617\u0001\u0000\u0000"+
		"\u0000\u060c\u060d\u0005\u01fc\u0000\u0000\u060d\u0612\u0003\u008eG\u0000"+
		"\u060e\u060f\u0005\u0202\u0000\u0000\u060f\u0611\u0003\u008eG\u0000\u0610"+
		"\u060e\u0001\u0000\u0000\u0000\u0611\u0614\u0001\u0000\u0000\u0000\u0612"+
		"\u0610\u0001\u0000\u0000\u0000\u0612\u0613\u0001\u0000\u0000\u0000\u0613"+
		"\u0615\u0001\u0000\u0000\u0000\u0614\u0612\u0001\u0000\u0000\u0000\u0615"+
		"\u0616\u0005\u01fd\u0000\u0000\u0616\u0618\u0001\u0000\u0000\u0000\u0617"+
		"\u060c\u0001\u0000\u0000\u0000\u0617\u0618\u0001\u0000\u0000\u0000\u0618"+
		"\u061c\u0001\u0000\u0000\u0000\u0619\u061b\u0003\u008cF\u0000\u061a\u0619"+
		"\u0001\u0000\u0000\u0000\u061b\u061e\u0001\u0000\u0000\u0000\u061c\u061a"+
		"\u0001\u0000\u0000\u0000\u061c\u061d\u0001\u0000\u0000\u0000\u061du\u0001"+
		"\u0000\u0000\u0000\u061e\u061c\u0001\u0000\u0000\u0000\u061f\u0623\u0003"+
		"\n\u0005\u0000\u0620\u0624\u0005\u010a\u0000\u0000\u0621\u0624\u0003\u00de"+
		"o\u0000\u0622\u0624\u0003z=\u0000\u0623\u0620\u0001\u0000\u0000\u0000"+
		"\u0623\u0621\u0001\u0000\u0000\u0000\u0623\u0622\u0001\u0000\u0000\u0000"+
		"\u0624w\u0001\u0000\u0000\u0000\u0625\u0626\u0005\u019f\u0000\u0000\u0626"+
		"\u0627\u0003\u02e4\u0172\u0000\u0627y\u0001\u0000\u0000\u0000\u0628\u0629"+
		"\u0005\u0186\u0000\u0000\u0629\u062a\u0005\u010b\u0000\u0000\u062a\u062d"+
		"\u0003\u02e4\u0172\u0000\u062b\u062c\u0005\u0103\u0000\u0000\u062c\u062e"+
		"\u0005\u0105\u0000\u0000\u062d\u062b\u0001\u0000\u0000\u0000\u062d\u062e"+
		"\u0001\u0000\u0000\u0000\u062e{\u0001\u0000\u0000\u0000\u062f\u0630\u0005"+
		"\u008f\u0000\u0000\u0630\u0631\u0005\u00ed\u0000\u0000\u0631\u0632\u0003"+
		"\u0200\u0100\u0000\u0632\u0633\u0005\u00c8\u0000\u0000\u0633\u0634\u0005"+
		"\u00c5\u0000\u0000\u0634\u0635\u0005\u01aa\u0000\u0000\u0635\u0636\u0007"+
		"\u000e\u0000\u0000\u0636}\u0001\u0000\u0000\u0000\u0637\u0638\u0005(\u0000"+
		"\u0000\u0638\u0639\u0003\u02ba\u015d\u0000\u0639\u063b\u0003\n\u0005\u0000"+
		"\u063a\u063c\u0003\u0080@\u0000\u063b\u063a\u0001\u0000\u0000\u0000\u063c"+
		"\u063d\u0001\u0000\u0000\u0000\u063d\u063b\u0001\u0000\u0000\u0000\u063d"+
		"\u063e\u0001\u0000\u0000\u0000\u063e\u063f\u0001\u0000\u0000\u0000\u063f"+
		"\u0640\u0005\u0080\u0000\u0000\u0640\u007f\u0001\u0000\u0000\u0000\u0641"+
		"\u0644\u0003\u0082A\u0000\u0642\u0644\u0003\u0084B\u0000\u0643\u0641\u0001"+
		"\u0000\u0000\u0000\u0643\u0642\u0001\u0000\u0000\u0000\u0644\u0081\u0001"+
		"\u0000\u0000\u0000\u0645\u0646\u0007\u000f\u0000\u0000\u0646\u0647\u0005"+
		"\u00e1\u0000\u0000\u0647\u0648\u0003\u0088D\u0000\u0648\u0083\u0001\u0000"+
		"\u0000\u0000\u0649\u064d\u0007\u0010\u0000\u0000\u064a\u064e\u0003\u0086"+
		"C\u0000\u064b\u064e\u0003\u0088D\u0000\u064c\u064e\u0003\u008aE\u0000"+
		"\u064d\u064a\u0001\u0000\u0000\u0000\u064d\u064b\u0001\u0000\u0000\u0000"+
		"\u064d\u064c\u0001\u0000\u0000\u0000\u064e\u0085\u0001\u0000\u0000\u0000"+
		"\u064f\u0650\u0005\u0135\u0000\u0000\u0650\u0651\u0003\u02c2\u0161\u0000"+
		"\u0651\u0652\u0005\u01fc\u0000\u0000\u0652\u0657\u0003\u00a4R\u0000\u0653"+
		"\u0654\u0005\u0202\u0000\u0000\u0654\u0656\u0003\u00a4R\u0000\u0655\u0653"+
		"\u0001\u0000\u0000\u0000\u0656\u0659\u0001\u0000\u0000\u0000\u0657\u0655"+
		"\u0001\u0000\u0000\u0000\u0657\u0658\u0001\u0000\u0000\u0000\u0658\u065a"+
		"\u0001\u0000\u0000\u0000\u0659\u0657\u0001\u0000\u0000\u0000\u065a\u065b"+
		"\u0005\u01fd\u0000\u0000\u065b\u0666\u0003\n\u0005\u0000\u065c\u0667\u0003"+
		"\u00b4Z\u0000\u065d\u065f\u0003\u00c2a\u0000\u065e\u065d\u0001\u0000\u0000"+
		"\u0000\u065f\u0662\u0001\u0000\u0000\u0000\u0660\u065e\u0001\u0000\u0000"+
		"\u0000\u0660\u0661\u0001\u0000\u0000\u0000\u0661\u0663\u0001\u0000\u0000"+
		"\u0000\u0662\u0660\u0001\u0000\u0000\u0000\u0663\u0664\u0003\u010c\u0086"+
		"\u0000\u0664\u0665\u0005\u0208\u0000\u0000\u0665\u0667\u0001\u0000\u0000"+
		"\u0000\u0666\u065c\u0001\u0000\u0000\u0000\u0666\u0660\u0001\u0000\u0000"+
		"\u0000\u0667\u0087\u0001\u0000\u0000\u0000\u0668\u0669\u0005\u00a0\u0000"+
		"\u0000\u0669\u0675\u0003\u02c0\u0160\u0000\u066a\u066b\u0005\u01fc\u0000"+
		"\u0000\u066b\u0670\u0003\u00a4R\u0000\u066c\u066d\u0005\u0202\u0000\u0000"+
		"\u066d\u066f\u0003\u00a4R\u0000\u066e\u066c\u0001\u0000\u0000\u0000\u066f"+
		"\u0672\u0001\u0000\u0000\u0000\u0670\u066e\u0001\u0000\u0000\u0000\u0670"+
		"\u0671\u0001\u0000\u0000\u0000\u0671\u0673\u0001\u0000\u0000\u0000\u0672"+
		"\u0670\u0001\u0000\u0000\u0000\u0673\u0674\u0005\u01fd\u0000\u0000\u0674"+
		"\u0676\u0001\u0000\u0000\u0000\u0675\u066a\u0001\u0000\u0000\u0000\u0675"+
		"\u0676\u0001\u0000\u0000\u0000\u0676\u0677\u0001\u0000\u0000\u0000\u0677"+
		"\u0678\u0005\u0147\u0000\u0000\u0678\u0679\u0003\u02e4\u0172\u0000\u0679"+
		"\u0684\u0003\n\u0005\u0000\u067a\u0685\u0003\u00b4Z\u0000\u067b\u067d"+
		"\u0003\u00c2a\u0000\u067c\u067b\u0001\u0000\u0000\u0000\u067d\u0680\u0001"+
		"\u0000\u0000\u0000\u067e\u067c\u0001\u0000\u0000\u0000\u067e\u067f\u0001"+
		"\u0000\u0000\u0000\u067f\u0681\u0001\u0000\u0000\u0000\u0680\u067e\u0001"+
		"\u0000\u0000\u0000\u0681\u0682\u0003\u010c\u0086\u0000\u0682\u0683\u0005"+
		"\u0208\u0000\u0000\u0683\u0685\u0001\u0000\u0000\u0000\u0684\u067a\u0001"+
		"\u0000\u0000\u0000\u0684\u067e\u0001\u0000\u0000\u0000\u0685\u0089\u0001"+
		"\u0000\u0000\u0000\u0686\u0688\u0005\u0095\u0000\u0000\u0687\u0686\u0001"+
		"\u0000\u0000\u0000\u0687\u0688\u0001\u0000\u0000\u0000\u0688\u068a\u0001"+
		"\u0000\u0000\u0000\u0689\u068b\u0005\u00ba\u0000\u0000\u068a\u0689\u0001"+
		"\u0000\u0000\u0000\u068a\u068b\u0001\u0000\u0000\u0000\u068b\u068c\u0001"+
		"\u0000\u0000\u0000\u068c\u068d\u0005K\u0000\u0000\u068d\u068e\u0005\u00a0"+
		"\u0000\u0000\u068e\u06a0\u0003\u02e4\u0172\u0000\u068f\u0690\u0005\u01fc"+
		"\u0000\u0000\u0690\u0691\u0005\u015e\u0000\u0000\u0691\u0692\u0005\u00ac"+
		"\u0000\u0000\u0692\u0693\u0005\u0118\u0000\u0000\u0693\u0694\u0003\u02e4"+
		"\u0172\u0000\u0694\u0695\u0005\u0202\u0000\u0000\u0695\u0696\u0001\u0000"+
		"\u0000\u0000\u0696\u069b\u0003\u00a4R\u0000\u0697\u0698\u0005\u0202\u0000"+
		"\u0000\u0698\u069a\u0003\u00a4R\u0000\u0699\u0697\u0001\u0000\u0000\u0000"+
		"\u069a\u069d\u0001\u0000\u0000\u0000\u069b\u0699\u0001\u0000\u0000\u0000"+
		"\u069b\u069c\u0001\u0000\u0000\u0000\u069c\u069e\u0001\u0000\u0000\u0000"+
		"\u069d\u069b\u0001\u0000\u0000\u0000\u069e\u069f\u0005\u01fd\u0000\u0000"+
		"\u069f\u06a1\u0001\u0000\u0000\u0000\u06a0\u068f\u0001\u0000\u0000\u0000"+
		"\u06a0\u06a1\u0001\u0000\u0000";
	private static final String _serializedATNSegment1 =
		"\u0000\u06a1\u06a2\u0001\u0000\u0000\u0000\u06a2\u06a3\u0005\u0147\u0000"+
		"\u0000\u06a3\u06a4\u0005\u015e\u0000\u0000\u06a4\u06a5\u0005\u0013\u0000"+
		"\u0000\u06a5\u06a6\u0005\u0145\u0000\u0000\u06a6\u06b1\u0003\n\u0005\u0000"+
		"\u06a7\u06b2\u0003\u00b4Z\u0000\u06a8\u06aa\u0003\u00c2a\u0000\u06a9\u06a8"+
		"\u0001\u0000\u0000\u0000\u06aa\u06ad\u0001\u0000\u0000\u0000\u06ab\u06a9"+
		"\u0001\u0000\u0000\u0000\u06ab\u06ac\u0001\u0000\u0000\u0000\u06ac\u06ae"+
		"\u0001\u0000\u0000\u0000\u06ad\u06ab\u0001\u0000\u0000\u0000\u06ae\u06af"+
		"\u0003\u010c\u0086\u0000\u06af\u06b0\u0005\u0208\u0000\u0000\u06b0\u06b2"+
		"\u0001\u0000\u0000\u0000\u06b1\u06a7\u0001\u0000\u0000\u0000\u06b1\u06ab"+
		"\u0001\u0000\u0000\u0000\u06b2\u008b\u0001\u0000\u0000\u0000\u06b3\u06b5"+
		"\u0005\u0103\u0000\u0000\u06b4\u06b3\u0001\u0000\u0000\u0000\u06b4\u06b5"+
		"\u0001\u0000\u0000\u0000\u06b5\u06b6\u0001\u0000\u0000\u0000\u06b6\u06b7"+
		"\u0007\u0011\u0000\u0000\u06b7\u008d\u0001\u0000\u0000\u0000\u06b8\u06b9"+
		"\u0003\u02fa\u017d\u0000\u06b9\u06bb\u0003\u02e4\u0172\u0000\u06ba\u06bc"+
		"\u0003\u0090H\u0000\u06bb\u06ba\u0001\u0000\u0000\u0000\u06bb\u06bc\u0001"+
		"\u0000\u0000\u0000\u06bc\u06bf\u0001\u0000\u0000\u0000\u06bd\u06bf\u0003"+
		"\u0092I\u0000\u06be\u06b8\u0001\u0000\u0000\u0000\u06be\u06bd\u0001\u0000"+
		"\u0000\u0000\u06bf\u008f\u0001\u0000\u0000\u0000\u06c0\u06c1\u0005\u008f"+
		"\u0000\u0000\u06c1\u06c2\u0005\u00ed\u0000\u0000\u06c2\u06c3\u0003\u0200"+
		"\u0100\u0000\u06c3\u0091\u0001\u0000\u0000\u0000\u06c4\u06c6\u0003\u008c"+
		"F\u0000\u06c5\u06c4\u0001\u0000\u0000\u0000\u06c5\u06c6\u0001\u0000\u0000"+
		"\u0000\u06c6\u06c8\u0001\u0000\u0000\u0000\u06c7\u06c9\u0003\u0094J\u0000"+
		"\u06c8\u06c7\u0001\u0000\u0000\u0000\u06c9\u06ca\u0001\u0000\u0000\u0000"+
		"\u06ca\u06c8\u0001\u0000\u0000\u0000\u06ca\u06cb\u0001\u0000\u0000\u0000"+
		"\u06cb\u06ce\u0001\u0000\u0000\u0000\u06cc\u06cd\u0005\u0202\u0000\u0000"+
		"\u06cd\u06cf\u0003\u00a0P\u0000\u06ce\u06cc\u0001\u0000\u0000\u0000\u06ce"+
		"\u06cf\u0001\u0000\u0000\u0000\u06cf\u0093\u0001\u0000\u0000\u0000\u06d0"+
		"\u06d4\u0003\u0096K\u0000\u06d1\u06d4\u0003\u009cN\u0000\u06d2\u06d4\u0003"+
		"\u009eO\u0000\u06d3\u06d0\u0001\u0000\u0000\u0000\u06d3\u06d1\u0001\u0000"+
		"\u0000\u0000\u06d3\u06d2\u0001\u0000\u0000\u0000\u06d4\u0095\u0001\u0000"+
		"\u0000\u0000\u06d5\u06d8\u0007\u0010\u0000\u0000\u06d6\u06d9\u0003\u0098"+
		"L\u0000\u06d7\u06d9\u0003\u009aM\u0000\u06d8\u06d6\u0001\u0000\u0000\u0000"+
		"\u06d8\u06d7\u0001\u0000\u0000\u0000\u06d9\u0097\u0001\u0000\u0000\u0000"+
		"\u06da\u06db\u0005\u0135\u0000\u0000\u06db\u06dc\u0003\u02c2\u0161\u0000"+
		"\u06dc\u06dd\u0005\u01fc\u0000\u0000\u06dd\u06e2\u0003\u00a4R\u0000\u06de"+
		"\u06df\u0005\u0202\u0000\u0000\u06df\u06e1\u0003\u00a4R\u0000\u06e0\u06de"+
		"\u0001\u0000\u0000\u0000\u06e1\u06e4\u0001\u0000\u0000\u0000\u06e2\u06e0"+
		"\u0001\u0000\u0000\u0000\u06e2\u06e3\u0001\u0000\u0000\u0000\u06e3\u06e5"+
		"\u0001\u0000\u0000\u0000\u06e4\u06e2\u0001\u0000\u0000\u0000\u06e5\u06e9"+
		"\u0005\u01fd\u0000\u0000\u06e6\u06e7\u0003\n\u0005\u0000\u06e7\u06e8\u0003"+
		"\u00b4Z\u0000\u06e8\u06ea\u0001\u0000\u0000\u0000\u06e9\u06e6\u0001\u0000"+
		"\u0000\u0000\u06e9\u06ea\u0001\u0000\u0000\u0000\u06ea\u0099\u0001\u0000"+
		"\u0000\u0000\u06eb\u06ec\u0005\u00a0\u0000\u0000\u06ec\u06f8\u0003\u02c0"+
		"\u0160\u0000\u06ed\u06ee\u0005\u01fc\u0000\u0000\u06ee\u06f3\u0003\u00a4"+
		"R\u0000\u06ef\u06f0\u0005\u0202\u0000\u0000\u06f0\u06f2\u0003\u00a4R\u0000"+
		"\u06f1\u06ef\u0001\u0000\u0000\u0000\u06f2\u06f5\u0001\u0000\u0000\u0000"+
		"\u06f3\u06f1\u0001\u0000\u0000\u0000\u06f3\u06f4\u0001\u0000\u0000\u0000"+
		"\u06f4\u06f6\u0001\u0000\u0000\u0000\u06f5\u06f3\u0001\u0000\u0000\u0000"+
		"\u06f6\u06f7\u0005\u01fd\u0000\u0000\u06f7\u06f9\u0001\u0000\u0000\u0000"+
		"\u06f8\u06ed\u0001\u0000\u0000\u0000\u06f8\u06f9\u0001\u0000\u0000\u0000"+
		"\u06f9\u06fa\u0001\u0000\u0000\u0000\u06fa\u06ff\u0005\u0147\u0000\u0000"+
		"\u06fb\u0700\u0003\u02e4\u0172\u0000\u06fc\u06fd\u0005\u015e\u0000\u0000"+
		"\u06fd\u06fe\u0005\u0013\u0000\u0000\u06fe\u0700\u0005\u0145\u0000\u0000"+
		"\u06ff\u06fb\u0001\u0000\u0000\u0000\u06ff\u06fc\u0001\u0000\u0000\u0000"+
		"\u0700\u070a\u0001\u0000\u0000\u0000\u0701\u0702\u0003\n\u0005\u0000\u0702"+
		"\u0703\u0003\u00b4Z\u0000\u0703\u070b\u0001\u0000\u0000\u0000\u0704\u0706"+
		"\u0005\u008f\u0000\u0000\u0705\u0707\u0005\u01b0\u0000\u0000\u0706\u0705"+
		"\u0001\u0000\u0000\u0000\u0706\u0707\u0001\u0000\u0000\u0000\u0707\u0708"+
		"\u0001\u0000\u0000\u0000\u0708\u0709\u0005\u00ed\u0000\u0000\u0709\u070b"+
		"\u0003\u0200\u0100\u0000\u070a\u0701\u0001\u0000\u0000\u0000\u070a\u0704"+
		"\u0001\u0000\u0000\u0000\u070a\u070b\u0001\u0000\u0000\u0000\u070b\u009b"+
		"\u0001\u0000\u0000\u0000\u070c\u070e\u0005\u0095\u0000\u0000\u070d\u070c"+
		"\u0001\u0000\u0000\u0000\u070d\u070e\u0001\u0000\u0000\u0000\u070e\u0710"+
		"\u0001\u0000\u0000\u0000\u070f\u0711\u0005\u00ba\u0000\u0000\u0710\u070f"+
		"\u0001\u0000\u0000\u0000\u0710\u0711\u0001\u0000\u0000\u0000\u0711\u0712"+
		"\u0001\u0000\u0000\u0000\u0712\u0713\u0005K\u0000\u0000\u0713\u0714\u0005"+
		"\u00a0\u0000\u0000\u0714\u0726\u0003\u02e4\u0172\u0000\u0715\u0716\u0005"+
		"\u01fc\u0000\u0000\u0716\u0717\u0005\u015e\u0000\u0000\u0717\u0718\u0005"+
		"\u00ac\u0000\u0000\u0718\u0719\u0005\u0118\u0000\u0000\u0719\u071a\u0003"+
		"\u02e4\u0172\u0000\u071a\u071b\u0005\u0202\u0000\u0000\u071b\u071c\u0001"+
		"\u0000\u0000\u0000\u071c\u0721\u0003\u00a4R\u0000\u071d\u071e\u0005\u0202"+
		"\u0000\u0000\u071e\u0720\u0003\u00a4R\u0000\u071f\u071d\u0001\u0000\u0000"+
		"\u0000\u0720\u0723\u0001\u0000\u0000\u0000\u0721\u071f\u0001\u0000\u0000"+
		"\u0000\u0721\u0722\u0001\u0000\u0000\u0000\u0722\u0724\u0001\u0000\u0000"+
		"\u0000\u0723\u0721\u0001\u0000\u0000\u0000\u0724\u0725\u0005\u01fd\u0000"+
		"\u0000\u0725\u0727\u0001\u0000\u0000\u0000\u0726\u0715\u0001\u0000\u0000"+
		"\u0000\u0726\u0727\u0001\u0000\u0000\u0000\u0727\u0728\u0001\u0000\u0000"+
		"\u0000\u0728\u0729\u0005\u0147\u0000\u0000\u0729\u072a\u0005\u015e\u0000"+
		"\u0000\u072a\u072b\u0005\u0013\u0000\u0000\u072b\u072f\u0005\u0145\u0000"+
		"\u0000\u072c\u072d\u0003\n\u0005\u0000\u072d\u072e\u0003\u00b4Z\u0000"+
		"\u072e\u0730\u0001\u0000\u0000\u0000\u072f\u072c\u0001\u0000\u0000\u0000"+
		"\u072f\u0730\u0001\u0000\u0000\u0000\u0730\u009d\u0001\u0000\u0000\u0000"+
		"\u0731\u0732\u0007\u000f\u0000\u0000\u0732\u0733\u0005\u00e1\u0000\u0000"+
		"\u0733\u0734\u0003\u009aM\u0000\u0734\u009f\u0001\u0000\u0000\u0000\u0735"+
		"\u0736\u0005\u0130\u0000\u0000\u0736\u0737\u0005\u0144\u0000\u0000\u0737"+
		"\u0738\u0005\u01fc\u0000\u0000\u0738\u073d\u0003\u00a2Q\u0000\u0739\u073a"+
		"\u0005\u0202\u0000\u0000\u073a\u073c\u0003\u00a2Q\u0000\u073b\u0739\u0001"+
		"\u0000\u0000\u0000\u073c\u073f\u0001\u0000\u0000\u0000\u073d\u073b\u0001"+
		"\u0000\u0000\u0000\u073d\u073e\u0001\u0000\u0000\u0000\u073e\u0740\u0001"+
		"\u0000\u0000\u0000\u073f\u073d\u0001\u0000\u0000\u0000\u0740\u0741\u0005"+
		"\u01fd\u0000\u0000\u0741\u00a1\u0001\u0000\u0000\u0000\u0742\u0745\u0003"+
		"\u02fa\u017d\u0000\u0743\u0745\u0005i\u0000\u0000\u0744\u0742\u0001\u0000"+
		"\u0000\u0000\u0744\u0743\u0001\u0000\u0000\u0000\u0745\u00a3\u0001\u0000"+
		"\u0000\u0000\u0746\u0747\u0003\u02ac\u0156\u0000\u0747\u0748\u0003\u02e4"+
		"\u0172\u0000\u0748\u00a5\u0001\u0000\u0000\u0000\u0749\u074a\u0005w\u0000"+
		"\u0000\u074a\u074b\u0005\u015f\u0000\u0000\u074b\u074c\u0003\u02bc\u015e"+
		"\u0000\u074c\u074d\u0005\u0208\u0000\u0000\u074d\u00a7\u0001\u0000\u0000"+
		"\u0000\u074e\u074f\u0005\u000e\u0000\u0000\u074f\u0750\u0005\u015f\u0000"+
		"\u0000\u0750\u0752\u0003\u02bc\u015e\u0000\u0751\u0753\u0003\u00acV\u0000"+
		"\u0752\u0751\u0001\u0000\u0000\u0000\u0753\u0754\u0001\u0000\u0000\u0000"+
		"\u0754\u0752\u0001\u0000\u0000\u0000\u0754\u0755\u0001\u0000\u0000\u0000"+
		"\u0755\u0756\u0001\u0000\u0000\u0000\u0756\u0757\u0005\u0208\u0000\u0000"+
		"\u0757\u00a9\u0001\u0000\u0000\u0000\u0758\u0759\u0005T\u0000\u0000\u0759"+
		"\u075a\u0005\u015f\u0000\u0000\u075a\u075f\u0003\u02bc\u015e\u0000\u075b"+
		"\u075e\u0003\u00aeW\u0000\u075c\u075e\u0003\u00acV\u0000\u075d\u075b\u0001"+
		"\u0000\u0000\u0000\u075d\u075c\u0001\u0000\u0000\u0000\u075e\u0761\u0001"+
		"\u0000\u0000\u0000\u075f\u075d\u0001\u0000\u0000\u0000\u075f\u0760\u0001"+
		"\u0000\u0000\u0000\u0760\u0762\u0001\u0000\u0000\u0000\u0761\u075f\u0001"+
		"\u0000\u0000\u0000\u0762\u0763\u0005\u0208\u0000\u0000\u0763\u00ab\u0001"+
		"\u0000\u0000\u0000\u0764\u0765\u0005\u00af\u0000\u0000\u0765\u0766\u0005"+
		"-\u0000\u0000\u0766\u0775\u0005\u01f6\u0000\u0000\u0767\u0768\u0005\u00df"+
		"\u0000\u0000\u0768\u0775\u0005\u01f6\u0000\u0000\u0769\u0775\u0005\u00fe"+
		"\u0000\u0000\u076a\u076b\u0005\u00e5\u0000\u0000\u076b\u0775\u0005\u01f6"+
		"\u0000\u0000\u076c\u0775\u0005\u00ff\u0000\u0000\u076d\u0775\u0005[\u0000"+
		"\u0000\u076e\u0775\u0005\u00fc\u0000\u0000\u076f\u0770\u00050\u0000\u0000"+
		"\u0770\u0775\u0005\u01f6\u0000\u0000\u0771\u0775\u0005\u00fa\u0000\u0000"+
		"\u0772\u0775\u0005\u0115\u0000\u0000\u0773\u0775\u0005\u0101\u0000\u0000"+
		"\u0774\u0764\u0001\u0000\u0000\u0000\u0774\u0767\u0001\u0000\u0000\u0000"+
		"\u0774\u0769\u0001\u0000\u0000\u0000\u0774\u076a\u0001\u0000\u0000\u0000"+
		"\u0774\u076c\u0001\u0000\u0000\u0000\u0774\u076d\u0001\u0000\u0000\u0000"+
		"\u0774\u076e\u0001\u0000\u0000\u0000\u0774\u076f\u0001\u0000\u0000\u0000"+
		"\u0774\u0771\u0001\u0000\u0000\u0000\u0774\u0772\u0001\u0000\u0000\u0000"+
		"\u0774\u0773\u0001\u0000\u0000\u0000\u0775\u00ad\u0001\u0000\u0000\u0000"+
		"\u0776\u0777\u0005\u0179\u0000\u0000\u0777\u0778\u0005\u01bc\u0000\u0000"+
		"\u0778\u0779\u0005\u01f6\u0000\u0000\u0779\u00af\u0001\u0000\u0000\u0000"+
		"\u077a\u077b\u0005\u001a\u0000\u0000\u077b\u077c\u0007\u0012\u0000\u0000"+
		"\u077c\u00b1\u0001\u0000\u0000\u0000\u077d\u077e\u0003\u02fa\u017d\u0000"+
		"\u077e\u077f\u0005\u0213\u0000\u0000\u077f\u0780\u0003\u0200\u0100\u0000"+
		"\u0780\u00b3\u0001\u0000\u0000\u0000\u0781\u0784\u0005\u00c8\u0000\u0000"+
		"\u0782\u0785\u0003\u00b6[\u0000\u0783\u0785\u0003\u00b8\\\u0000\u0784"+
		"\u0782\u0001\u0000\u0000\u0000\u0784\u0783\u0001\u0000\u0000\u0000\u0785"+
		"\u00b5\u0001\u0000\u0000\u0000\u0786\u0787\u0005\u00c5\u0000\u0000\u0787"+
		"\u0788\u0005\u00ed\u0000\u0000\u0788\u0789\u0005\u01f8\u0000\u0000\u0789"+
		"\u00b7\u0001\u0000\u0000\u0000\u078a\u078d\u0005/\u0000\u0000\u078b\u078c"+
		"\u0005\u00ed\u0000\u0000\u078c\u078e\u0005\u01f8\u0000\u0000\u078d\u078b"+
		"\u0001\u0000\u0000\u0000\u078d\u078e\u0001\u0000\u0000\u0000\u078e\u078f"+
		"\u0001\u0000\u0000\u0000\u078f\u0790\u0005\u00ce\u0000\u0000\u0790\u0792"+
		"\u0003\u02fa\u017d\u0000\u0791\u0793\u0003\u00ba]\u0000\u0792\u0791\u0001"+
		"\u0000\u0000\u0000\u0792\u0793\u0001\u0000\u0000\u0000\u0793\u0796\u0001"+
		"\u0000\u0000\u0000\u0794\u0795\u0005\u01bc\u0000\u0000\u0795\u0797\u0005"+
		"M\u0000\u0000\u0796\u0794\u0001\u0000\u0000\u0000\u0796\u0797\u0001\u0000"+
		"\u0000\u0000\u0797\u0799\u0001\u0000\u0000\u0000\u0798\u079a\u0003\u00bc"+
		"^\u0000\u0799\u0798\u0001\u0000\u0000\u0000\u0799\u079a\u0001\u0000\u0000"+
		"\u0000\u079a\u00b9\u0001\u0000\u0000\u0000\u079b\u079c\u0005\u000b\u0000"+
		"\u0000\u079c\u079d\u0005\u00ac\u0000\u0000\u079d\u079e\u0005\u01fc\u0000"+
		"\u0000\u079e\u07a3\u0003\u0200\u0100\u0000\u079f\u07a0\u0005\u0202\u0000"+
		"\u0000\u07a0\u07a2\u0003\u0200\u0100\u0000\u07a1\u079f\u0001\u0000\u0000"+
		"\u0000\u07a2\u07a5\u0001\u0000\u0000\u0000\u07a3\u07a1\u0001\u0000\u0000"+
		"\u0000\u07a3\u07a4\u0001\u0000\u0000\u0000\u07a4\u07a6\u0001\u0000\u0000"+
		"\u0000\u07a5\u07a3\u0001\u0000\u0000\u0000\u07a6\u07a7\u0005\u01fd\u0000"+
		"\u0000\u07a7\u00bb\u0001\u0000\u0000\u0000\u07a8\u07a9\u0005\u011e\u0000"+
		"\u0000\u07a9\u07b5\u0005\u01fc\u0000\u0000\u07aa\u07af\u0003\u0200\u0100"+
		"\u0000\u07ab\u07ac\u0005\u0202\u0000\u0000\u07ac\u07ae\u0003\u0200\u0100"+
		"\u0000\u07ad\u07ab\u0001\u0000\u0000\u0000\u07ae\u07b1\u0001\u0000\u0000"+
		"\u0000\u07af\u07ad\u0001\u0000\u0000\u0000\u07af\u07b0\u0001\u0000\u0000"+
		"\u0000\u07b0\u07b6\u0001\u0000\u0000\u0000\u07b1\u07af\u0001\u0000\u0000"+
		"\u0000\u07b2\u07b3\u0005\u01f5\u0000\u0000\u07b3\u07b4\u0005\u01f5\u0000"+
		"\u0000\u07b4\u07b6\u0005\u01f5\u0000\u0000\u07b5\u07aa\u0001\u0000\u0000"+
		"\u0000\u07b5\u07b2\u0001\u0000\u0000\u0000\u07b6\u07b7\u0001\u0000\u0000"+
		"\u0000\u07b7\u07b8\u0005\u01fd\u0000\u0000\u07b8\u00bd\u0001\u0000\u0000"+
		"\u0000\u07b9\u07bd\u0003\u02ac\u0156\u0000\u07ba\u07bc\u0007\u0013\u0000"+
		"\u0000\u07bb\u07ba\u0001\u0000\u0000\u0000\u07bc\u07bf\u0001\u0000\u0000"+
		"\u0000\u07bd\u07bb\u0001\u0000\u0000\u0000\u07bd\u07be\u0001\u0000\u0000"+
		"\u0000\u07be\u07c1\u0001\u0000\u0000\u0000\u07bf\u07bd\u0001\u0000\u0000"+
		"\u0000\u07c0\u07c2\u0003\u02e4\u0172\u0000\u07c1\u07c0\u0001\u0000\u0000"+
		"\u0000\u07c1\u07c2\u0001\u0000\u0000\u0000\u07c2\u07c4\u0001\u0000\u0000"+
		"\u0000\u07c3\u07c5\u0003\u00c0`\u0000\u07c4\u07c3\u0001\u0000\u0000\u0000"+
		"\u07c4\u07c5\u0001\u0000\u0000\u0000\u07c5\u00bf\u0001\u0000\u0000\u0000"+
		"\u07c6\u07c7\u0007\u0014\u0000\u0000\u07c7\u07c8\u0003\u0200\u0100\u0000"+
		"\u07c8\u00c1\u0001\u0000\u0000\u0000\u07c9\u07d4\u0003\u00c4b\u0000\u07ca"+
		"\u07d4\u0003\u00c6c\u0000\u07cb\u07d4\u0003\u00c8d\u0000\u07cc\u07d4\u0003"+
		"\u00ccf\u0000\u07cd\u07d4\u0003\u00ceg\u0000\u07ce\u07d4\u0003\u00d0h"+
		"\u0000\u07cf\u07d4\u0003\u00d8l\u0000\u07d0\u07d4\u00030\u0018\u0000\u07d1"+
		"\u07d4\u0003\u0010\b\u0000\u07d2\u07d4\u0003\u0286\u0143\u0000\u07d3\u07c9"+
		"\u0001\u0000\u0000\u0000\u07d3\u07ca\u0001\u0000\u0000\u0000\u07d3\u07cb"+
		"\u0001\u0000\u0000\u0000\u07d3\u07cc\u0001\u0000\u0000\u0000\u07d3\u07cd"+
		"\u0001\u0000\u0000\u0000\u07d3\u07ce\u0001\u0000\u0000\u0000\u07d3\u07cf"+
		"\u0001\u0000\u0000\u0000\u07d3\u07d0\u0001\u0000\u0000\u0000\u07d3\u07d1"+
		"\u0001\u0000\u0000\u0000\u07d3\u07d2\u0001\u0000\u0000\u0000\u07d4\u00c3"+
		"\u0001\u0000\u0000\u0000\u07d5\u07d7\u0003\u02c6\u0163\u0000\u07d6\u07d8"+
		"\u0005H\u0000\u0000\u07d7\u07d6\u0001\u0000\u0000\u0000\u07d7\u07d8\u0001"+
		"\u0000\u0000\u0000\u07d8\u07d9\u0001\u0000\u0000\u0000\u07d9\u07dc\u0003"+
		"\u02e4\u0172\u0000\u07da\u07db\u0005\u0103\u0000\u0000\u07db\u07dd\u0005"+
		"\u0105\u0000\u0000\u07dc\u07da\u0001\u0000\u0000\u0000\u07dc\u07dd\u0001"+
		"\u0000\u0000\u0000\u07dd\u07df\u0001\u0000\u0000\u0000\u07de\u07e0\u0003"+
		"\u00c0`\u0000\u07df\u07de\u0001\u0000\u0000\u0000\u07df\u07e0\u0001\u0000"+
		"\u0000\u0000\u07e0\u07e1\u0001\u0000\u0000\u0000\u07e1\u07e2\u0005\u0208"+
		"\u0000\u0000\u07e2\u00c5\u0001\u0000\u0000\u0000\u07e3\u07e4\u0005\u0183"+
		"\u0000\u0000\u07e4\u07e5\u0003\u02ba\u015d\u0000\u07e5\u07e6\u0005\u00c2"+
		"\u0000\u0000\u07e6\u07ec\u0003\u02e4\u0172\u0000\u07e7\u07e8\u0005\u0137"+
		"\u0000\u0000\u07e8\u07e9\u0003\u0200\u0100\u0000\u07e9\u07ea\u0005\u0001"+
		"\u0000\u0000\u07ea\u07eb\u0003\u0200\u0100\u0000\u07eb\u07ed\u0001\u0000"+
		"\u0000\u0000\u07ec\u07e7\u0001\u0000\u0000\u0000\u07ec\u07ed\u0001\u0000"+
		"\u0000\u0000\u07ed\u07f0\u0001\u0000\u0000\u0000\u07ee\u07ef\u0005\u0103"+
		"\u0000\u0000\u07ef\u07f1\u0005\u0105\u0000\u0000\u07f0\u07ee\u0001\u0000"+
		"\u0000\u0000\u07f0\u07f1\u0001\u0000\u0000\u0000\u07f1\u07f2\u0001\u0000"+
		"\u0000\u0000\u07f2\u07f3\u0005\u0208\u0000\u0000\u07f3\u00c7\u0001\u0000"+
		"\u0000\u0000\u07f4\u07f5\u0005Y\u0000\u0000\u07f5\u0801\u0003\u02ca\u0165"+
		"\u0000\u07f6\u07f7\u0005\u01fc\u0000\u0000\u07f7\u07fc\u0003\u00cae\u0000"+
		"\u07f8\u07f9\u0005\u0202\u0000\u0000\u07f9\u07fb\u0003\u00cae\u0000\u07fa"+
		"\u07f8\u0001\u0000\u0000\u0000\u07fb\u07fe\u0001\u0000\u0000\u0000\u07fc"+
		"\u07fa\u0001\u0000\u0000\u0000\u07fc\u07fd\u0001\u0000\u0000\u0000\u07fd"+
		"\u07ff\u0001\u0000\u0000\u0000\u07fe\u07fc\u0001\u0000\u0000\u0000\u07ff"+
		"\u0800\u0005\u01fd\u0000\u0000\u0800\u0802\u0001\u0000\u0000\u0000\u0801"+
		"\u07f6\u0001\u0000\u0000\u0000\u0801\u0802\u0001\u0000\u0000\u0000\u0802"+
		"\u0805\u0001\u0000\u0000\u0000\u0803\u0804\u0005\u0147\u0000\u0000\u0804"+
		"\u0806\u0003\u02e4\u0172\u0000\u0805\u0803\u0001\u0000\u0000\u0000\u0805"+
		"\u0806\u0001\u0000\u0000\u0000\u0806\u0809\u0001\u0000\u0000\u0000\u0807"+
		"\u0808\u0005\u00c2\u0000\u0000\u0808\u080a\u0003\u013c\u009e\u0000\u0809"+
		"\u0807\u0001\u0000\u0000\u0000\u0809\u080a\u0001\u0000\u0000\u0000\u080a"+
		"\u080b\u0001\u0000\u0000\u0000\u080b\u080c\u0005\u0208\u0000\u0000\u080c"+
		"\u00c9\u0001\u0000\u0000\u0000\u080d\u0812\u0003\u02ac\u0156\u0000\u080e"+
		"\u0810\u0005\u00ac\u0000\u0000\u080f\u080e\u0001\u0000\u0000\u0000\u080f"+
		"\u0810\u0001\u0000\u0000\u0000\u0810\u0811\u0001\u0000\u0000\u0000\u0811"+
		"\u0813\u0003\u02e4\u0172\u0000\u0812\u080f\u0001\u0000\u0000\u0000\u0812"+
		"\u0813\u0001\u0000\u0000\u0000\u0813\u0815\u0001\u0000\u0000\u0000\u0814"+
		"\u0816\u0003\u00c0`\u0000\u0815\u0814\u0001\u0000\u0000\u0000\u0815\u0816"+
		"\u0001\u0000\u0000\u0000\u0816\u00cb\u0001\u0000\u0000\u0000\u0817\u0818"+
		"\u0003\u02be\u015f\u0000\u0818\u0819\u0005\u0086\u0000\u0000\u0819\u081a"+
		"\u0005\u0208\u0000\u0000\u081a\u00cd\u0001\u0000\u0000\u0000\u081b\u083d"+
		"\u0005\u0130\u0000\u0000\u081c\u083e\u0005\u0162\u0000\u0000\u081d\u083e"+
		"\u0005\u001d\u0000\u0000\u081e\u081f\u0005\u0087\u0000\u0000\u081f\u0820"+
		"\u0005\u01fc\u0000\u0000\u0820\u0821\u0003\u02be\u015f\u0000\u0821\u0823"+
		"\u0005\u0202\u0000\u0000\u0822\u0824\u0005\u0201\u0000\u0000\u0823\u0822"+
		"\u0001\u0000\u0000\u0000\u0823\u0824\u0001\u0000\u0000\u0000\u0824\u0825"+
		"\u0001\u0000\u0000\u0000\u0825\u0826\u0003\u02f6\u017b\u0000\u0826\u0827"+
		"\u0005\u01fd\u0000\u0000\u0827\u083e\u0001\u0000\u0000\u0000\u0828\u0829"+
		"\u0005\u00b6\u0000\u0000\u0829\u082a\u0005\u01fc\u0000\u0000\u082a\u082b"+
		"\u0003\u02fa\u017d\u0000\u082b\u082c\u0005\u0202\u0000\u0000\u082c\u082d"+
		"\u0003\u0200\u0100\u0000\u082d\u082e\u0005\u01fd\u0000\u0000\u082e\u083e"+
		"\u0001\u0000\u0000\u0000\u082f\u0830\u0005\u0144\u0000\u0000\u0830\u0833"+
		"\u0005\u01fc\u0000\u0000\u0831\u0834\u0003\u02fa\u017d\u0000\u0832\u0834"+
		"\u0005i\u0000\u0000\u0833\u0831\u0001\u0000\u0000\u0000\u0833\u0832\u0001"+
		"\u0000\u0000\u0000\u0834\u0837\u0001\u0000\u0000\u0000\u0835\u0836\u0005"+
		"\u0202\u0000\u0000\u0836\u0838\u0003\u02fa\u017d\u0000\u0837\u0835\u0001"+
		"\u0000\u0000\u0000\u0838\u0839\u0001\u0000\u0000\u0000\u0839\u0837\u0001"+
		"\u0000\u0000\u0000\u0839\u083a\u0001\u0000\u0000\u0000\u083a\u083b\u0001"+
		"\u0000\u0000\u0000\u083b\u083c\u0005\u01fd\u0000\u0000\u083c\u083e\u0001"+
		"\u0000\u0000\u0000\u083d\u081c\u0001\u0000\u0000\u0000\u083d\u081d\u0001"+
		"\u0000\u0000\u0000\u083d\u081e\u0001\u0000\u0000\u0000\u083d\u0828\u0001"+
		"\u0000\u0000\u0000\u083d\u082f\u0001\u0000\u0000\u0000\u083e\u083f\u0001"+
		"\u0000\u0000\u0000\u083f\u0840\u0005\u0208\u0000\u0000\u0840\u00cf\u0001"+
		"\u0000\u0000\u0000\u0841\u0844\u0003\u00d2i\u0000\u0842\u0844\u0003\u00d6"+
		"k\u0000\u0843\u0841\u0001\u0000\u0000\u0000\u0843\u0842\u0001\u0000\u0000"+
		"\u0000\u0844\u00d1\u0001\u0000\u0000\u0000\u0845\u0846\u0005\u019d\u0000"+
		"\u0000\u0846\u0847\u0003\u02ba\u015d\u0000\u0847\u085a\u0005\u00c2\u0000"+
		"\u0000\u0848\u0849\u0005\u013b\u0000\u0000\u0849\u084a\u0005\u01fc\u0000"+
		"\u0000\u084a\u084f\u0003\u00d4j\u0000\u084b\u084c\u0005\u0202\u0000\u0000"+
		"\u084c\u084e\u0003\u00d4j\u0000\u084d\u084b\u0001\u0000\u0000\u0000\u084e"+
		"\u0851\u0001\u0000\u0000\u0000\u084f\u084d\u0001\u0000\u0000\u0000\u084f"+
		"\u0850\u0001\u0000\u0000\u0000\u0850\u0852\u0001\u0000\u0000\u0000\u0851"+
		"\u084f\u0001\u0000\u0000\u0000\u0852\u0853\u0005\u01fd\u0000\u0000\u0853"+
		"\u085b\u0001\u0000\u0000\u0000\u0854\u0855\u0005\u013c\u0000\u0000\u0855"+
		"\u0858\u0005Y\u0000\u0000\u0856\u0857\u0005\u0147\u0000\u0000\u0857\u0859"+
		"\u0003\u02e4\u0172\u0000\u0858\u0856\u0001\u0000\u0000\u0000\u0858\u0859"+
		"\u0001\u0000\u0000\u0000\u0859\u085b\u0001\u0000\u0000\u0000\u085a\u0848"+
		"\u0001\u0000\u0000\u0000\u085a\u0854\u0001\u0000\u0000\u0000\u085b\u085c"+
		"\u0001\u0000\u0000\u0000\u085c\u085d\u0005\u0208\u0000\u0000\u085d\u00d3"+
		"\u0001\u0000\u0000\u0000\u085e\u0860\u0003\u02d2\u0169\u0000\u085f\u0861"+
		"\u0003\u02e4\u0172\u0000\u0860\u085f\u0001\u0000\u0000\u0000\u0860\u0861"+
		"\u0001\u0000\u0000\u0000\u0861\u0864\u0001\u0000\u0000\u0000\u0862\u0863"+
		"\u0005\u0103\u0000\u0000\u0863\u0865\u0005\u0105\u0000\u0000\u0864\u0862"+
		"\u0001\u0000\u0000\u0000\u0864\u0865\u0001\u0000\u0000\u0000\u0865\u0867"+
		"\u0001\u0000\u0000\u0000\u0866\u0868\u0003\u00c0`\u0000\u0867\u0866\u0001"+
		"\u0000\u0000\u0000\u0867\u0868\u0001\u0000\u0000\u0000\u0868\u00d5\u0001"+
		"\u0000\u0000\u0000\u0869\u086a\u0003\u02cc\u0166\u0000\u086a\u086d\u0003"+
		"\u02ba\u015d\u0000\u086b\u086c\u0005\u0204\u0000\u0000\u086c\u086e\u0003"+
		"\u02d0\u0168\u0000\u086d\u086b\u0001\u0000\u0000\u0000\u086d\u086e\u0001"+
		"\u0000\u0000\u0000\u086e\u0874\u0001\u0000\u0000\u0000\u086f\u0875\u0005"+
		"\u0124\u0000\u0000\u0870\u0872\u0005\u0125\u0000\u0000\u0871\u0873\u0003"+
		"\u00c0`\u0000\u0872\u0871\u0001\u0000\u0000\u0000\u0872\u0873\u0001\u0000"+
		"\u0000\u0000\u0873\u0875\u0001\u0000\u0000\u0000\u0874\u086f\u0001\u0000"+
		"\u0000\u0000\u0874\u0870\u0001\u0000\u0000\u0000\u0875\u0876\u0001\u0000"+
		"\u0000\u0000\u0876\u0877\u0005\u0208\u0000\u0000\u0877\u00d7\u0001\u0000"+
		"\u0000\u0000\u0878\u087b\u0003\u00dam\u0000\u0879\u087b\u0003\u00e0p\u0000"+
		"\u087a\u0878\u0001\u0000\u0000\u0000\u087a\u0879\u0001\u0000\u0000\u0000"+
		"\u087b\u087c\u0001\u0000\u0000\u0000\u087c\u087d\u0005\u0208\u0000\u0000"+
		"\u087d\u00d9\u0001\u0000\u0000\u0000\u087e\u087f\u0005\u019d\u0000\u0000"+
		"\u087f\u0880\u0003\u02ba\u015d\u0000\u0880\u088c\u0005\u00c2\u0000\u0000"+
		"\u0881\u0882\u0005\u0186\u0000\u0000\u0882\u0883\u0005\u010b\u0000\u0000"+
		"\u0883\u0885\u0003\u02e4\u0172\u0000\u0884\u0886\u0003\u00dcn\u0000\u0885"+
		"\u0884\u0001\u0000\u0000\u0000\u0885\u0886\u0001\u0000\u0000\u0000\u0886"+
		"\u0889\u0001\u0000\u0000\u0000\u0887\u0888\u0005\u0103\u0000\u0000\u0888"+
		"\u088a\u0005\u0105\u0000\u0000\u0889\u0887\u0001\u0000\u0000\u0000\u0889"+
		"\u088a\u0001\u0000\u0000\u0000\u088a\u088d\u0001\u0000\u0000\u0000\u088b"+
		"\u088d\u0003\u00deo\u0000\u088c\u0881\u0001\u0000\u0000\u0000\u088c\u088b"+
		"\u0001\u0000\u0000\u0000\u088d\u00db\u0001\u0000\u0000\u0000\u088e\u0891"+
		"\u0005\u00b2\u0000\u0000\u088f\u0891\u0005\u00b1\u0000\u0000\u0890\u088e"+
		"\u0001\u0000\u0000\u0000\u0890\u088f\u0001\u0000\u0000\u0000\u0891\u0892"+
		"\u0001\u0000\u0000\u0000\u0892\u0893\u0005-\u0000\u0000\u0893\u0894\u0003"+
		"\u02e4\u0172\u0000\u0894\u00dd\u0001\u0000\u0000\u0000\u0895\u0899\u0005"+
		"\u01b1\u0000\u0000\u0896\u0897\u0005\u01b2\u0000\u0000\u0897\u0899\u0005"+
		"\u0012\u0000\u0000\u0898\u0895\u0001\u0000\u0000\u0000\u0898\u0896\u0001"+
		"\u0000\u0000\u0000\u0899\u089a\u0001\u0000\u0000\u0000\u089a\u089b\u0005"+
		"\u01fc\u0000\u0000\u089b\u089c\u0003\u0200\u0100\u0000\u089c\u089d\u0005"+
		"\u01fd\u0000\u0000\u089d\u089e\u0005\u010b\u0000\u0000\u089e\u08a1\u0003"+
		"\u02e4\u0172\u0000\u089f\u08a0\u0005\u0103\u0000\u0000\u08a0\u08a2\u0005"+
		"\u0105\u0000\u0000\u08a1\u089f\u0001\u0000\u0000\u0000\u08a1\u08a2\u0001"+
		"\u0000\u0000\u0000\u08a2\u00df\u0001\u0000\u0000\u0000\u08a3\u08a4\u0003"+
		"\u02a2\u0151\u0000\u08a4\u08a5\u0003\u02e4\u0172\u0000\u08a5\u00e1\u0001"+
		"\u0000\u0000\u0000\u08a6\u08a7\u0003\u00e6s\u0000\u08a7\u08a8\u0005\u0208"+
		"\u0000\u0000\u08a8\u08ac\u0001\u0000\u0000\u0000\u08a9\u08ac\u0003\u00e4"+
		"r\u0000\u08aa\u08ac\u0003\u0286\u0143\u0000\u08ab\u08a6\u0001\u0000\u0000"+
		"\u0000\u08ab\u08a9\u0001\u0000\u0000\u0000\u08ab\u08aa\u0001\u0000\u0000"+
		"\u0000\u08ac\u08ad\u0001\u0000\u0000\u0000\u08ad\u08ab\u0001\u0000\u0000"+
		"\u0000\u08ad\u08ae\u0001\u0000\u0000\u0000\u08ae\u00e3\u0001\u0000\u0000"+
		"\u0000\u08af\u08b0\u0005\u020a\u0000\u0000\u08b0\u08b1\u0005\u020a\u0000"+
		"\u0000\u08b1\u08b2\u0003\u02b8\u015c\u0000\u08b2\u08b3\u0005\u0210\u0000"+
		"\u0000\u08b3\u08b4\u0005\u0210\u0000\u0000\u08b4\u00e5\u0001\u0000\u0000"+
		"\u0000\u08b5\u08b6\u0005T\u0000\u0000\u08b6\u08d1\u0003\u0000\u0000\u0000"+
		"\u08b7\u08b8\u0005\u000e\u0000\u0000\u08b8\u08d1\u0003\u0000\u0000\u0000"+
		"\u08b9\u08ba\u0005\u00a2\u0000\u0000\u08ba\u08d1\u0003\u0000\u0000\u0000"+
		"\u08bb\u08bc\u0005\u019c\u0000\u0000\u08bc\u08d1\u0003\u0000\u0000\u0000"+
		"\u08bd\u08be\u0005\u0130\u0000\u0000\u08be\u08d1\u0003\u0000\u0000\u0000"+
		"\u08bf\u08d1\u0003\u010c\u0086\u0000\u08c0\u08d1\u0003\u0118\u008c\u0000"+
		"\u08c1\u08d1\u0003\u00e8t\u0000\u08c2\u08d1\u0003\u00eau\u0000\u08c3\u08d1"+
		"\u0003\u00ecv\u0000\u08c4\u08d1\u0003\u00eew\u0000\u08c5\u08d1\u0003\u00f0"+
		"x\u0000\u08c6\u08d1\u0003\u00f6{\u0000\u08c7\u08d1\u0003\u00fa}\u0000"+
		"\u08c8\u08d1\u0003\u0104\u0082\u0000\u08c9\u08d1\u0003\u0106\u0083\u0000"+
		"\u08ca\u08d1\u0003\u0108\u0084\u0000\u08cb\u08d1\u0003\u0236\u011b\u0000"+
		"\u08cc\u08d1\u0003\u011a\u008d\u0000\u08cd\u08d1\u0003\u010a\u0085\u0000"+
		"\u08ce\u08d1\u0003\u0110\u0088\u0000\u08cf\u08d1\u0003\u010e\u0087\u0000"+
		"\u08d0\u08b5\u0001\u0000\u0000\u0000\u08d0\u08b7\u0001\u0000\u0000\u0000"+
		"\u08d0\u08b9\u0001\u0000\u0000\u0000\u08d0\u08bb\u0001\u0000\u0000\u0000"+
		"\u08d0\u08bd\u0001\u0000\u0000\u0000\u08d0\u08bf\u0001\u0000\u0000\u0000"+
		"\u08d0\u08c0\u0001\u0000\u0000\u0000\u08d0\u08c1\u0001\u0000\u0000\u0000"+
		"\u08d0\u08c2\u0001\u0000\u0000\u0000\u08d0\u08c3\u0001\u0000\u0000\u0000"+
		"\u08d0\u08c4\u0001\u0000\u0000\u0000\u08d0\u08c5\u0001\u0000\u0000\u0000"+
		"\u08d0\u08c6\u0001\u0000\u0000\u0000\u08d0\u08c7\u0001\u0000\u0000\u0000"+
		"\u08d0\u08c8\u0001\u0000\u0000\u0000\u08d0\u08c9\u0001\u0000\u0000\u0000"+
		"\u08d0\u08ca\u0001\u0000\u0000\u0000\u08d0\u08cb\u0001\u0000\u0000\u0000"+
		"\u08d0\u08cc\u0001\u0000\u0000\u0000\u08d0\u08cd\u0001\u0000\u0000\u0000"+
		"\u08d0\u08ce\u0001\u0000\u0000\u0000\u08d0\u08cf\u0001\u0000\u0000\u0000"+
		"\u08d1\u00e7\u0001\u0000\u0000\u0000\u08d2\u08d6\u0003\u01f6\u00fb\u0000"+
		"\u08d3\u08d6\u0003\u02ee\u0177\u0000\u08d4\u08d6\u0003\u02ec\u0176\u0000"+
		"\u08d5\u08d2\u0001\u0000\u0000\u0000\u08d5\u08d3\u0001\u0000\u0000\u0000"+
		"\u08d5\u08d4\u0001\u0000\u0000\u0000\u08d6\u08d7\u0001\u0000\u0000\u0000"+
		"\u08d7\u08d8\u0005\u0205\u0000\u0000\u08d8\u08d9\u0003\u0200\u0100\u0000"+
		"\u08d9\u00e9\u0001\u0000\u0000\u0000\u08da\u08dc\u0005N\u0000\u0000\u08db"+
		"\u08dd\u0003\u02b8\u015c\u0000\u08dc\u08db\u0001\u0000\u0000\u0000\u08dc"+
		"\u08dd\u0001\u0000\u0000\u0000\u08dd\u08e0\u0001\u0000\u0000\u0000\u08de"+
		"\u08df\u0005\u01b8\u0000\u0000\u08df\u08e1\u0003\u01fc\u00fe\u0000\u08e0"+
		"\u08de\u0001\u0000\u0000\u0000\u08e0\u08e1\u0001\u0000\u0000\u0000\u08e1"+
		"\u00eb\u0001\u0000\u0000\u0000\u08e2\u08e4\u0005\u008d\u0000\u0000\u08e3"+
		"\u08e5\u0003\u02b8\u015c\u0000\u08e4\u08e3\u0001\u0000\u0000\u0000\u08e4"+
		"\u08e5\u0001\u0000\u0000\u0000\u08e5\u08e8\u0001\u0000\u0000\u0000\u08e6"+
		"\u08e7\u0005\u01b8\u0000\u0000\u08e7\u08e9\u0003\u01fc\u00fe\u0000\u08e8"+
		"\u08e6\u0001\u0000\u0000\u0000\u08e8\u08e9\u0001\u0000\u0000\u0000\u08e9"+
		"\u00ed\u0001\u0000\u0000\u0000\u08ea\u08eb\u0005\u00a1\u0000\u0000\u08eb"+
		"\u08ec\u0003\u02b8\u015c\u0000\u08ec\u00ef\u0001\u0000\u0000\u0000\u08ed"+
		"\u08ee\u0005\u00a9\u0000\u0000\u08ee\u08ef\u0003\u01fc\u00fe\u0000\u08ef"+
		"\u08f0\u0005\u0188\u0000\u0000\u08f0\u08f4\u0003\u00e2q\u0000\u08f1\u08f3"+
		"\u0003\u00f2y\u0000\u08f2\u08f1\u0001\u0000\u0000\u0000\u08f3\u08f6\u0001"+
		"\u0000\u0000\u0000\u08f4\u08f2\u0001\u0000\u0000\u0000\u08f4\u08f5\u0001"+
		"\u0000\u0000\u0000\u08f5\u08f8\u0001\u0000\u0000\u0000\u08f6\u08f4\u0001"+
		"\u0000\u0000\u0000\u08f7\u08f9\u0003\u00f4z\u0000\u08f8\u08f7\u0001\u0000"+
		"\u0000\u0000\u08f8\u08f9\u0001\u0000\u0000\u0000\u08f9\u08fa\u0001\u0000"+
		"\u0000\u0000\u08fa\u08fb\u0005\u0080\u0000\u0000\u08fb\u08fc\u0005\u00a9"+
		"\u0000\u0000\u08fc\u00f1\u0001\u0000\u0000\u0000\u08fd\u08fe\u0005|\u0000"+
		"\u0000\u08fe\u08ff\u0003\u01fc\u00fe\u0000\u08ff\u0900\u0005\u0188\u0000"+
		"\u0000\u0900\u0901\u0003\u00e2q\u0000\u0901\u00f3\u0001\u0000\u0000\u0000"+
		"\u0902\u0903\u0005{\u0000\u0000\u0903\u0904\u0003\u00e2q\u0000\u0904\u00f5"+
		"\u0001\u0000\u0000\u0000\u0905\u0907\u0003\u02b8\u015c\u0000\u0906\u0905"+
		"\u0001\u0000\u0000\u0000\u0906\u0907\u0001\u0000\u0000\u0000\u0907\u090c"+
		"\u0001\u0000\u0000\u0000\u0908\u0909\u0005\u01bb\u0000\u0000\u0909\u090d"+
		"\u0003\u01fc\u00fe\u0000\u090a\u090b\u0005\u009b\u0000\u0000\u090b\u090d"+
		"\u0003\u00f8|\u0000\u090c\u0908\u0001\u0000\u0000\u0000\u090c\u090a\u0001"+
		"\u0000\u0000\u0000\u090c\u090d\u0001\u0000\u0000\u0000\u090d\u090e\u0001"+
		"\u0000\u0000\u0000\u090e\u090f\u0005\u00db\u0000\u0000\u090f\u0910\u0003"+
		"\u00e2q\u0000\u0910\u0911\u0005\u0080\u0000\u0000\u0911\u0913\u0005\u00db"+
		"\u0000\u0000\u0912\u0914\u0003\u02b8\u015c\u0000\u0913\u0912\u0001\u0000"+
		"\u0000\u0000\u0913\u0914\u0001\u0000\u0000\u0000\u0914\u00f7\u0001\u0000"+
		"\u0000\u0000\u0915\u0916\u0003\u02c8\u0164\u0000\u0916\u0918\u0005\u00ac"+
		"\u0000\u0000\u0917\u0919\u0005\u014a\u0000\u0000\u0918\u0917\u0001\u0000"+
		"\u0000\u0000\u0918\u0919\u0001\u0000\u0000\u0000\u0919\u091a\u0001\u0000"+
		"\u0000\u0000\u091a\u091b\u0003\u0100\u0080\u0000\u091b\u091c\u0005\u0001"+
		"\u0000\u0000\u091c\u091d\u0003\u0102\u0081\u0000\u091d\u092b\u0001\u0000"+
		"\u0000\u0000\u091e\u091f\u0003\u02cc\u0166\u0000\u091f\u0928\u0005\u00ac"+
		"\u0000\u0000\u0920\u0922\u0003\u02ca\u0165\u0000\u0921\u0923\u0003\u01fa"+
		"\u00fd\u0000\u0922\u0921\u0001\u0000\u0000\u0000\u0922\u0923\u0001\u0000"+
		"\u0000\u0000\u0923\u0929\u0001\u0000\u0000\u0000\u0924\u0925\u0005\u01fc"+
		"\u0000\u0000\u0925\u0926\u0003\u013c\u009e\u0000\u0926\u0927\u0005\u01fd"+
		"\u0000\u0000\u0927\u0929\u0001\u0000\u0000\u0000\u0928\u0920\u0001\u0000"+
		"\u0000\u0000\u0928\u0924\u0001\u0000\u0000\u0000\u0929\u092b\u0001\u0000"+
		"\u0000\u0000\u092a\u0915\u0001\u0000\u0000\u0000\u092a\u091e\u0001\u0000"+
		"\u0000\u0000\u092b\u00f9\u0001\u0000\u0000\u0000\u092c\u092d\u0005\u009c"+
		"\u0000\u0000\u092d\u092e\u0003\u02c8\u0164\u0000\u092e\u092f\u0005\u00ac"+
		"\u0000\u0000\u092f\u0930\u0003\u00fc~\u0000\u0930\u0933\u0003\u011a\u008d"+
		"\u0000\u0931\u0932\u0005\u0154\u0000\u0000\u0932\u0934\u0005\u0088\u0000"+
		"\u0000\u0933\u0931\u0001\u0000\u0000\u0000\u0933\u0934\u0001\u0000\u0000"+
		"\u0000\u0934\u00fb\u0001\u0000\u0000\u0000\u0935\u0936\u0003\u0100\u0080"+
		"\u0000\u0936\u0937\u0005\u0001\u0000\u0000\u0937\u0938\u0003\u0102\u0081"+
		"\u0000\u0938\u0943\u0001\u0000\u0000\u0000\u0939\u093a\u0005\u00b4\u0000"+
		"\u0000\u093a\u093b\u0005\u010b\u0000\u0000\u093b\u093d\u0003\u02ce\u0167"+
		"\u0000\u093c\u093e\u0003\u00fe\u007f\u0000\u093d\u093c\u0001\u0000\u0000"+
		"\u0000\u093d\u093e\u0001\u0000\u0000\u0000\u093e\u0943\u0001\u0000\u0000"+
		"\u0000\u093f\u0940\u0005\u01ad\u0000\u0000\u0940\u0941\u0005\u010b\u0000"+
		"\u0000\u0941\u0943\u0003\u02c8\u0164\u0000\u0942\u0935\u0001\u0000\u0000"+
		"\u0000\u0942\u0939\u0001\u0000\u0000\u0000\u0942\u093f\u0001\u0000\u0000"+
		"\u0000\u0943\u00fd\u0001\u0000\u0000\u0000\u0944\u0945\u0005!\u0000\u0000"+
		"\u0945\u0946\u0003\u0100\u0080\u0000\u0946\u0947\u0005\u0010\u0000\u0000"+
		"\u0947\u0948\u0003\u0102\u0081\u0000\u0948\u00ff\u0001\u0000\u0000\u0000"+
		"\u0949\u094a\u0003\u021c\u010e\u0000\u094a\u0101\u0001\u0000\u0000\u0000"+
		"\u094b\u094c\u0003\u021c\u010e\u0000\u094c\u0103\u0001\u0000\u0000\u0000"+
		"\u094d\u094e\u0005\u0105\u0000\u0000\u094e\u0105\u0001\u0000\u0000\u0000"+
		"\u094f\u0951\u0005\u0136\u0000\u0000\u0950\u0952\u0003\u02be\u015f\u0000"+
		"\u0951\u0950\u0001\u0000\u0000\u0000\u0951\u0952\u0001\u0000\u0000\u0000"+
		"\u0952\u0107\u0001\u0000\u0000\u0000\u0953\u0955\u0005\u0147\u0000\u0000"+
		"\u0954\u0956\u0003\u01fc\u00fe\u0000\u0955\u0954\u0001\u0000\u0000\u0000"+
		"\u0955\u0956\u0001\u0000\u0000\u0000\u0956\u0109\u0001\u0000\u0000\u0000"+
		"\u0957\u0959\u00051\u0000\u0000\u0958\u0957\u0001\u0000\u0000\u0000\u0958"+
		"\u0959\u0001\u0000\u0000\u0000\u0959\u095a\u0001\u0000\u0000\u0000\u095a"+
		"\u095c\u0003\u02a6\u0153\u0000\u095b\u095d\u0003\u02da\u016d\u0000\u095c"+
		"\u095b\u0001\u0000\u0000\u0000\u095c\u095d\u0001\u0000\u0000\u0000\u095d"+
		"\u010b\u0001\u0000\u0000\u0000\u095e\u095f\u0005 \u0000\u0000\u095f\u0961"+
		"\u0003\u00e2q\u0000\u0960\u0962\u0003\u0112\u0089\u0000\u0961\u0960\u0001"+
		"\u0000\u0000\u0000\u0961\u0962\u0001\u0000\u0000\u0000\u0962\u0963\u0001"+
		"\u0000\u0000\u0000\u0963\u0965\u0005\u0080\u0000\u0000\u0964\u0966\u0003"+
		"\u02b8\u015c\u0000\u0965\u0964\u0001\u0000\u0000\u0000\u0965\u0966\u0001"+
		"\u0000\u0000\u0000\u0966\u010d\u0001\u0000\u0000\u0000\u0967\u0968\u0003"+
		"\u01f6\u00fb\u0000\u0968\u0969\u0005\u01f5\u0000\u0000\u0969\u0973\u0005"+
		"m\u0000\u0000\u096a\u0970\u0005\u01fc\u0000\u0000\u096b\u096e\u0003\u0200"+
		"\u0100\u0000\u096c\u096d\u0005\u0202\u0000\u0000\u096d\u096f\u0003\u0200"+
		"\u0100\u0000\u096e\u096c\u0001\u0000\u0000\u0000\u096e\u096f\u0001\u0000"+
		"\u0000\u0000\u096f\u0971\u0001\u0000\u0000\u0000\u0970\u096b\u0001\u0000"+
		"\u0000\u0000\u0970\u0971\u0001\u0000\u0000\u0000\u0971\u0972\u0001\u0000"+
		"\u0000\u0000\u0972\u0974\u0005\u01fd\u0000\u0000\u0973\u096a\u0001\u0000"+
		"\u0000\u0000\u0973\u0974\u0001\u0000\u0000\u0000\u0974\u098e\u0001\u0000"+
		"\u0000\u0000\u0975\u0976\u0003\u01f6\u00fb\u0000\u0976\u0977\u0005\u01f5"+
		"\u0000\u0000\u0977\u0981\u0005\u0090\u0000\u0000\u0978\u097e\u0005\u01fc"+
		"\u0000\u0000\u0979\u097c\u0003\u0200\u0100\u0000\u097a\u097b\u0005\u0202"+
		"\u0000\u0000\u097b\u097d\u0003\u0200\u0100\u0000\u097c\u097a\u0001\u0000"+
		"\u0000\u0000\u097c\u097d\u0001\u0000\u0000\u0000\u097d\u097f\u0001\u0000"+
		"\u0000\u0000\u097e\u0979\u0001\u0000\u0000\u0000\u097e\u097f\u0001\u0000"+
		"\u0000\u0000\u097f\u0980\u0001\u0000\u0000\u0000\u0980\u0982\u0005\u01fd"+
		"\u0000\u0000\u0981\u0978\u0001\u0000\u0000\u0000\u0981\u0982\u0001\u0000"+
		"\u0000\u0000\u0982\u098e\u0001\u0000\u0000\u0000\u0983\u0984\u0003\u01f6"+
		"\u00fb\u0000\u0984\u0985\u0005\u01f5\u0000\u0000\u0985\u098b\u0005\u019a"+
		"\u0000\u0000\u0986\u0988\u0005\u01fc\u0000\u0000\u0987\u0989\u0003\u0200"+
		"\u0100\u0000\u0988\u0987\u0001\u0000\u0000\u0000\u0988\u0989\u0001\u0000"+
		"\u0000\u0000\u0989\u098a\u0001\u0000\u0000\u0000\u098a\u098c\u0005\u01fd"+
		"\u0000\u0000\u098b\u0986\u0001\u0000\u0000\u0000\u098b\u098c\u0001\u0000"+
		"\u0000\u0000\u098c\u098e\u0001\u0000\u0000\u0000\u098d\u0967\u0001\u0000"+
		"\u0000\u0000\u098d\u0975\u0001\u0000\u0000\u0000\u098d\u0983\u0001\u0000"+
		"\u0000\u0000\u098e\u010f\u0001\u0000\u0000\u0000\u098f\u0990\u0005\u012a"+
		"\u0000\u0000\u0990\u0991\u0005\u014f\u0000\u0000\u0991\u0992\u0005\u01fc"+
		"\u0000\u0000\u0992\u0993\u0003\u0200\u0100\u0000\u0993\u0994\u0005\u01fd"+
		"\u0000\u0000\u0994\u0111\u0001\u0000\u0000\u0000\u0995\u0997\u0005\u0086"+
		"\u0000\u0000\u0996\u0998\u0003\u0114\u008a\u0000\u0997\u0996\u0001\u0000"+
		"\u0000\u0000\u0998\u0999\u0001\u0000\u0000\u0000\u0999\u0997\u0001\u0000"+
		"\u0000\u0000\u0999\u099a\u0001\u0000\u0000\u0000\u099a\u0113\u0001\u0000"+
		"\u0000\u0000\u099b\u099c\u0005\u01b8\u0000\u0000\u099c\u09a1\u0003\u02be"+
		"\u015f\u0000\u099d\u099e\u0005\u0113\u0000\u0000\u099e\u09a0\u0003\u02be"+
		"\u015f\u0000\u099f\u099d\u0001\u0000\u0000\u0000\u09a0\u09a3\u0001\u0000"+
		"\u0000\u0000\u09a1\u099f\u0001\u0000\u0000\u0000\u09a1\u09a2\u0001\u0000"+
		"\u0000\u0000\u09a2\u09a4\u0001\u0000\u0000\u0000\u09a3\u09a1\u0001\u0000"+
		"\u0000\u0000\u09a4\u09a5\u0005\u0188\u0000\u0000\u09a5\u09a6\u0003\u00e2"+
		"q\u0000\u09a6\u0115\u0001\u0000\u0000\u0000\u09a7\u09a9\u0003\b\u0004"+
		"\u0000\u09a8\u09a7\u0001\u0000\u0000\u0000\u09a8\u09a9\u0001\u0000\u0000"+
		"\u0000\u09a9\u09aa\u0001\u0000\u0000\u0000\u09aa\u09ab\u0003\u010c\u0086"+
		"\u0000\u09ab\u0117\u0001\u0000\u0000\u0000\u09ac\u09ae\u0003\b\u0004\u0000"+
		"\u09ad\u09ac\u0001\u0000\u0000\u0000\u09ad\u09ae\u0001\u0000\u0000\u0000"+
		"\u09ae\u09af\u0001\u0000\u0000\u0000\u09af\u09b0\u0003\u010c\u0086\u0000"+
		"\u09b0\u0119\u0001\u0000\u0000\u0000\u09b1\u09b6\u0003\u011c\u008e\u0000"+
		"\u09b2\u09b6\u0003\u0120\u0090\u0000\u09b3\u09b6\u0003\u0122\u0091\u0000"+
		"\u09b4\u09b6\u0003\u012c\u0096\u0000\u09b5\u09b1\u0001\u0000\u0000\u0000"+
		"\u09b5\u09b2\u0001\u0000\u0000\u0000\u09b5\u09b3\u0001\u0000\u0000\u0000"+
		"\u09b5\u09b4\u0001\u0000\u0000\u0000\u09b6\u011b\u0001\u0000\u0000\u0000"+
		"\u09b7\u09b8\u0005\u008b\u0000\u0000\u09b8\u09b9\u0005\u00ab\u0000\u0000"+
		"\u09b9\u09c3\u0003\u0200\u0100\u0000\u09ba\u09bc\u0003\u0296\u014b\u0000"+
		"\u09bb\u09bd\u0003\u0262\u0131\u0000\u09bc\u09bb\u0001\u0000\u0000\u0000"+
		"\u09bc\u09bd\u0001\u0000\u0000\u0000\u09bd\u09c4\u0001\u0000\u0000\u0000"+
		"\u09be\u09c0\u0003\u0262\u0131\u0000\u09bf\u09c1\u0003\u011e\u008f\u0000"+
		"\u09c0\u09bf\u0001\u0000\u0000\u0000\u09c0\u09c1\u0001\u0000\u0000\u0000"+
		"\u09c1\u09c4\u0001\u0000\u0000\u0000\u09c2\u09c4\u0003\u011e\u008f\u0000"+
		"\u09c3\u09ba\u0001\u0000\u0000\u0000\u09c3\u09be\u0001\u0000\u0000\u0000"+
		"\u09c3\u09c2\u0001\u0000\u0000\u0000\u09c3\u09c4\u0001\u0000\u0000\u0000"+
		"\u09c4\u011d\u0001\u0000\u0000\u0000\u09c5\u09c6\u0007\u0015\u0000\u0000"+
		"\u09c6\u09c7\u0003\u0296\u014b\u0000\u09c7\u011f\u0001\u0000\u0000\u0000"+
		"\u09c8\u09d0\u0003\u01ca\u00e5\u0000\u09c9\u09d0\u0003\u01d6\u00eb\u0000"+
		"\u09ca\u09d0\u0003\u013c\u009e\u0000\u09cb\u09d0\u0003\u01b0\u00d8\u0000"+
		"\u09cc\u09d0\u0003\u01b6\u00db\u0000\u09cd\u09d0\u0003\u01b8\u00dc\u0000"+
		"\u09ce\u09d0\u0003\u013a\u009d\u0000\u09cf\u09c8\u0001\u0000\u0000\u0000"+
		"\u09cf\u09c9\u0001\u0000\u0000\u0000\u09cf\u09ca\u0001\u0000\u0000\u0000"+
		"\u09cf\u09cb\u0001\u0000\u0000\u0000\u09cf\u09cc\u0001\u0000\u0000\u0000"+
		"\u09cf\u09cd\u0001\u0000\u0000\u0000\u09cf\u09ce\u0001\u0000\u0000\u0000"+
		"\u09d0\u0121\u0001\u0000\u0000\u0000\u09d1\u09d6\u0003\u0124\u0092\u0000"+
		"\u09d2\u09d6\u0003\u0126\u0093\u0000\u09d3\u09d6\u0003\u0128\u0094\u0000"+
		"\u09d4\u09d6\u0003\u012a\u0095\u0000\u09d5\u09d1\u0001\u0000\u0000\u0000"+
		"\u09d5\u09d2\u0001\u0000\u0000\u0000\u09d5\u09d3\u0001\u0000\u0000\u0000"+
		"\u09d5\u09d4\u0001\u0000\u0000\u0000\u09d6\u0123\u0001\u0000\u0000\u0000"+
		"\u09d7\u09d8\u0005<\u0000\u0000\u09d8\u09d9\u0003\u02ca\u0165\u0000\u09d9"+
		"\u0125\u0001\u0000\u0000\u0000\u09da\u09db\u0005\u0111\u0000\u0000\u09db"+
		"\u09dd\u0003\u02ca\u0165\u0000\u09dc\u09de\u0003\u01fa\u00fd\u0000\u09dd"+
		"\u09dc\u0001\u0000\u0000\u0000\u09dd\u09de\u0001\u0000\u0000\u0000\u09de"+
		"\u0127\u0001\u0000\u0000\u0000\u09df\u09e0\u0005\u0094\u0000\u0000\u09e0"+
		"\u09fc\u0003\u02ca\u0165\u0000\u09e1\u09e2\u0005\u00c0\u0000\u0000\u09e2"+
		"\u09e7\u0003\u02c6\u0163\u0000\u09e3\u09e4\u0005\u0202\u0000\u0000\u09e4"+
		"\u09e6\u0003\u02c6\u0163\u0000\u09e5\u09e3\u0001\u0000\u0000\u0000\u09e6"+
		"\u09e9\u0001\u0000\u0000\u0000\u09e7\u09e5\u0001\u0000\u0000\u0000\u09e7"+
		"\u09e8\u0001\u0000\u0000\u0000\u09e8\u09fd\u0001\u0000\u0000\u0000\u09e9"+
		"\u09e7\u0001\u0000\u0000\u0000\u09ea\u09eb\u0005,\u0000\u0000\u09eb\u09ec"+
		"\u0005>\u0000\u0000\u09ec\u09ed\u0005\u00c0\u0000\u0000\u09ed\u09f2\u0003"+
		"\u02c6\u0163\u0000\u09ee\u09ef\u0005\u0202\u0000\u0000\u09ef\u09f1\u0003"+
		"\u02c6\u0163\u0000\u09f0\u09ee\u0001\u0000\u0000\u0000\u09f1\u09f4\u0001"+
		"\u0000\u0000\u0000\u09f2\u09f0\u0001\u0000\u0000\u0000\u09f2\u09f3\u0001"+
		"\u0000\u0000\u0000\u09f3\u09fa\u0001\u0000\u0000\u0000\u09f4\u09f2\u0001"+
		"\u0000\u0000\u0000\u09f5\u09f8\u0005\u00d3\u0000\u0000\u09f6\u09f9\u0003"+
		"\u02c6\u0163\u0000\u09f7\u09f9\u0003\u02f6\u017b\u0000\u09f8\u09f6\u0001"+
		"\u0000\u0000\u0000\u09f8\u09f7\u0001\u0000\u0000\u0000\u09f9\u09fb\u0001"+
		"\u0000\u0000\u0000\u09fa\u09f5\u0001\u0000\u0000\u0000\u09fa\u09fb\u0001"+
		"\u0000\u0000\u0000\u09fb\u09fd\u0001\u0000\u0000\u0000\u09fc\u09e1\u0001"+
		"\u0000\u0000\u0000\u09fc\u09ea\u0001\u0000\u0000\u0000\u09fd\u0129\u0001"+
		"\u0000\u0000\u0000\u09fe\u09ff\u0005\u0111\u0000\u0000\u09ff\u0a00\u0003"+
		"\u02c6\u0163\u0000\u0a00\u0a03\u0005\u009b\u0000\u0000\u0a01\u0a04\u0003"+
		"\u013c\u009e\u0000\u0a02\u0a04\u0003\u0200\u0100\u0000\u0a03\u0a01\u0001"+
		"\u0000\u0000\u0000\u0a03\u0a02\u0001\u0000\u0000\u0000\u0a04\u0a06\u0001"+
		"\u0000\u0000\u0000\u0a05\u0a07\u0003\u0262\u0131\u0000\u0a06\u0a05\u0001"+
		"\u0000\u0000\u0000\u0a06\u0a07\u0001\u0000\u0000\u0000\u0a07\u012b\u0001"+
		"\u0000\u0000\u0000\u0a08\u0a0e\u0003\u012e\u0097\u0000\u0a09\u0a0e\u0003"+
		"\u0130\u0098\u0000\u0a0a\u0a0e\u0003\u0132\u0099\u0000\u0a0b\u0a0e\u0003"+
		"\u0136\u009b\u0000\u0a0c\u0a0e\u0003\u0138\u009c\u0000\u0a0d\u0a08\u0001"+
		"\u0000\u0000\u0000\u0a0d\u0a09\u0001\u0000\u0000\u0000\u0a0d\u0a0a\u0001"+
		"\u0000\u0000\u0000\u0a0d\u0a0b\u0001\u0000\u0000\u0000\u0a0d\u0a0c\u0001"+
		"\u0000\u0000\u0000\u0a0e\u012d\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0005"+
		"\u0165\u0000\u0000\u0a10\u0a1e\u0005\u0196\u0000\u0000\u0a11\u0a12\u0005"+
		"\u0139\u0000\u0000\u0a12\u0a1f\u0007\u0016\u0000\u0000\u0a13\u0a14\u0005"+
		"\u00c3\u0000\u0000\u0a14\u0a18\u0005\u00cd\u0000\u0000\u0a15\u0a19\u0005"+
		"\u0161\u0000\u0000\u0a16\u0a17\u0005\u0139\u0000\u0000\u0a17\u0a19\u0005"+
		"B\u0000\u0000\u0a18\u0a15\u0001\u0000\u0000\u0000\u0a18\u0a16\u0001\u0000"+
		"\u0000\u0000\u0a19\u0a1f\u0001\u0000\u0000\u0000\u0a1a\u0a1b\u0005\u01a9"+
		"\u0000\u0000\u0a1b\u0a1c\u0005\u014d\u0000\u0000\u0a1c\u0a1d\u0005\u015c"+
		"\u0000\u0000\u0a1d\u0a1f\u0003\u02a0\u0150\u0000\u0a1e\u0a11\u0001\u0000"+
		"\u0000\u0000\u0a1e\u0a13\u0001\u0000\u0000\u0000\u0a1e\u0a1a\u0001\u0000"+
		"\u0000\u0000\u0a1e\u0a1f\u0001\u0000\u0000\u0000\u0a1f\u0a22\u0001\u0000"+
		"\u0000\u0000\u0a20\u0a21\u0005\u00ed\u0000\u0000\u0a21\u0a23\u0003\u02f8"+
		"\u017c\u0000\u0a22\u0a20\u0001\u0000\u0000\u0000\u0a22\u0a23\u0001\u0000"+
		"\u0000\u0000\u0a23\u012f\u0001\u0000\u0000\u0000\u0a24\u0a25\u0005\u0165"+
		"\u0000\u0000\u0a25\u0a2f\u0007\u0017\u0000\u0000\u0a26\u0a30\u0005\r\u0000"+
		"\u0000\u0a27\u0a2c\u0003\u02b6\u015b\u0000\u0a28\u0a29\u0005\u0202\u0000"+
		"\u0000\u0a29\u0a2b\u0003\u02b6\u015b\u0000\u0a2a\u0a28\u0001\u0000\u0000"+
		"\u0000\u0a2b\u0a2e\u0001\u0000\u0000\u0000\u0a2c\u0a2a\u0001\u0000\u0000"+
		"\u0000\u0a2c\u0a2d\u0001\u0000\u0000\u0000\u0a2d\u0a30\u0001\u0000\u0000"+
		"\u0000\u0a2e\u0a2c\u0001\u0000\u0000\u0000\u0a2f\u0a26\u0001\u0000\u0000"+
		"\u0000\u0a2f\u0a27\u0001\u0000\u0000\u0000\u0a30\u0a31\u0001\u0000\u0000"+
		"\u0000\u0a31\u0a32\u0007\u0018\u0000\u0000\u0a32\u0131\u0001\u0000\u0000"+
		"\u0000\u0a33\u0a35\u0005A\u0000\u0000\u0a34\u0a36\u0005\u01be\u0000\u0000"+
		"\u0a35\u0a34\u0001\u0000\u0000\u0000\u0a35\u0a36\u0001\u0000\u0000\u0000"+
		"\u0a36\u0a44\u0001\u0000\u0000\u0000\u0a37\u0a38\u0005@\u0000\u0000\u0a38"+
		"\u0a45\u0003\u0200\u0100\u0000\u0a39\u0a42\u0005\u009d\u0000\u0000\u0a3a"+
		"\u0a3b\u0005P\u0000\u0000\u0a3b\u0a43\u0003\u0200\u0100\u0000\u0a3c\u0a43"+
		"\u0005Q\u0000\u0000\u0a3d\u0a40\u0003\u0200\u0100\u0000\u0a3e\u0a3f\u0005"+
		"\u0202\u0000\u0000\u0a3f\u0a41\u0003\u0200\u0100\u0000\u0a40\u0a3e\u0001"+
		"\u0000\u0000\u0000\u0a40\u0a41\u0001\u0000\u0000\u0000\u0a41\u0a43\u0001"+
		"\u0000\u0000\u0000\u0a42\u0a3a\u0001\u0000\u0000\u0000\u0a42\u0a3c\u0001"+
		"\u0000\u0000\u0000\u0a42\u0a3d\u0001\u0000\u0000\u0000\u0a43\u0a45\u0001"+
		"\u0000\u0000\u0000\u0a44\u0a37\u0001\u0000\u0000\u0000\u0a44\u0a39\u0001"+
		"\u0000\u0000\u0000\u0a44\u0a45\u0001\u0000\u0000\u0000\u0a45\u0a47\u0001"+
		"\u0000\u0000\u0000\u0a46\u0a48\u0003\u0134\u009a\u0000\u0a47\u0a46\u0001"+
		"\u0000\u0000\u0000\u0a47\u0a48\u0001\u0000\u0000\u0000\u0a48\u0133\u0001"+
		"\u0000\u0000\u0000\u0a49\u0a4b\u0005\u01bf\u0000\u0000\u0a4a\u0a4c\u0007"+
		"\u0019\u0000\u0000\u0a4b\u0a4a\u0001\u0000\u0000\u0000\u0a4b\u0a4c\u0001"+
		"\u0000\u0000\u0000\u0a4c\u0a4e\u0001\u0000\u0000\u0000\u0a4d\u0a4f\u0007"+
		"\u001a\u0000\u0000\u0a4e\u0a4d\u0001\u0000\u0000\u0000\u0a4e\u0a4f\u0001"+
		"\u0000\u0000\u0000\u0a4f\u0135\u0001\u0000\u0000\u0000\u0a50\u0a52\u0005"+
		"\u014d\u0000\u0000\u0a51\u0a53\u0005\u01be\u0000\u0000\u0a52\u0a51\u0001"+
		"\u0000\u0000\u0000\u0a52\u0a53\u0001\u0000\u0000\u0000\u0a53\u0a5b\u0001"+
		"\u0000\u0000\u0000\u0a54\u0a56\u0005\u0192\u0000\u0000\u0a55\u0a57\u0005"+
		"\u0155\u0000\u0000\u0a56\u0a55\u0001\u0000\u0000\u0000\u0a56\u0a57\u0001"+
		"\u0000\u0000\u0000\u0a57\u0a58\u0001\u0000\u0000\u0000\u0a58\u0a5c\u0003"+
		"\u029e\u014f\u0000\u0a59\u0a5a\u0005\u009d\u0000\u0000\u0a5a\u0a5c\u0003"+
		"\u02f8\u017c\u0000\u0a5b\u0a54\u0001\u0000\u0000\u0000\u0a5b\u0a59\u0001"+
		"\u0000\u0000\u0000\u0a5b\u0a5c\u0001\u0000\u0000\u0000\u0a5c\u0137\u0001"+
		"\u0000\u0000\u0000\u0a5d\u0a5e\u0005\u0155\u0000\u0000\u0a5e\u0a5f\u0003"+
		"\u029e\u014f\u0000\u0a5f\u0139\u0001\u0000\u0000\u0000\u0a60\u0a61\u0005"+
		"\u008e\u0000\u0000\u0a61\u0a66\u0005\u012c\u0000\u0000\u0a62\u0a63\u0005"+
		"\u0165\u0000\u0000\u0a63\u0a64\u0005\u017c\u0000\u0000\u0a64\u0a65\u0005"+
		"\u0213\u0000\u0000\u0a65\u0a67\u0003\u02f8\u017c\u0000\u0a66\u0a62\u0001"+
		"\u0000\u0000\u0000\u0a66\u0a67\u0001\u0000\u0000\u0000\u0a67\u0a6a\u0001"+
		"\u0000\u0000\u0000\u0a68\u0a69\u0005\u00c0\u0000\u0000\u0a69\u0a6b\u0003"+
		"\u02d4\u016a\u0000\u0a6a\u0a68\u0001\u0000\u0000\u0000\u0a6a\u0a6b\u0001"+
		"\u0000\u0000\u0000\u0a6b\u0a6c\u0001\u0000\u0000\u0000\u0a6c\u0a72\u0005"+
		"\u009b\u0000\u0000\u0a6d\u0a73\u0003\u013c\u009e\u0000\u0a6e\u0a73\u0003"+
		"\u01b0\u00d8\u0000\u0a6f\u0a73\u0003\u01b6\u00db\u0000\u0a70\u0a73\u0003"+
		"\u01b8\u00dc\u0000\u0a71\u0a73\u0003\u01ca\u00e5\u0000\u0a72\u0a6d\u0001"+
		"\u0000\u0000\u0000\u0a72\u0a6e\u0001\u0000\u0000\u0000\u0a72\u0a6f\u0001"+
		"\u0000\u0000\u0000\u0a72\u0a70\u0001\u0000\u0000\u0000\u0a72\u0a71\u0001"+
		"\u0000\u0000\u0000\u0a73\u013b\u0001\u0000\u0000\u0000\u0a74\u0a79\u0003"+
		"\u0146\u00a3\u0000\u0a75\u0a78\u0003\u01aa\u00d5\u0000\u0a76\u0a78\u0003"+
		"\u01a6\u00d3\u0000\u0a77\u0a75\u0001\u0000\u0000\u0000\u0a77\u0a76\u0001"+
		"\u0000\u0000\u0000\u0a78\u0a7b\u0001\u0000\u0000\u0000\u0a79\u0a77\u0001"+
		"\u0000\u0000\u0000\u0a79\u0a7a\u0001\u0000\u0000\u0000\u0a7a\u013d\u0001"+
		"\u0000\u0000\u0000\u0a7b\u0a79\u0001\u0000\u0000\u0000\u0a7c\u0a7d\u0005"+
		"\u01bc\u0000\u0000\u0a7d\u0a82\u0003\u0140\u00a0\u0000\u0a7e\u0a7f\u0005"+
		"\u0202\u0000\u0000\u0a7f\u0a81\u0003\u0140\u00a0\u0000\u0a80\u0a7e\u0001"+
		"\u0000\u0000\u0000\u0a81\u0a84\u0001\u0000\u0000\u0000\u0a82\u0a80\u0001"+
		"\u0000\u0000\u0000\u0a82\u0a83\u0001\u0000\u0000\u0000\u0a83\u013f\u0001"+
		"\u0000\u0000\u0000\u0a84\u0a82\u0001\u0000\u0000\u0000\u0a85\u0a91\u0003"+
		"\u02b4\u015a\u0000\u0a86\u0a87\u0005\u01fc\u0000\u0000\u0a87\u0a8c\u0003"+
		"\u02d2\u0169\u0000\u0a88\u0a89\u0005\u0202\u0000\u0000\u0a89\u0a8b\u0003"+
		"\u02d2\u0169\u0000\u0a8a\u0a88\u0001\u0000\u0000\u0000\u0a8b\u0a8e\u0001"+
		"\u0000\u0000\u0000\u0a8c\u0a8a\u0001\u0000\u0000\u0000\u0a8c\u0a8d\u0001"+
		"\u0000\u0000\u0000\u0a8d\u0a8f\u0001\u0000\u0000\u0000\u0a8e\u0a8c\u0001"+
		"\u0000\u0000\u0000\u0a8f\u0a90\u0005\u01fd\u0000\u0000\u0a90\u0a92\u0001"+
		"\u0000\u0000\u0000\u0a91\u0a86\u0001\u0000\u0000\u0000\u0a91\u0a92\u0001"+
		"\u0000\u0000\u0000\u0a92\u0a93\u0001\u0000\u0000\u0000\u0a93\u0a94\u0005"+
		"\u0013\u0000\u0000\u0a94\u0a95\u0005\u01fc\u0000\u0000\u0a95\u0a97\u0003"+
		"\u0146\u00a3\u0000\u0a96\u0a98\u0003\u01a6\u00d3\u0000\u0a97\u0a96\u0001"+
		"\u0000\u0000\u0000\u0a97\u0a98\u0001\u0000\u0000\u0000\u0a98\u0a99\u0001"+
		"\u0000\u0000\u0000\u0a99\u0a9b\u0005\u01fd\u0000\u0000\u0a9a\u0a9c\u0003"+
		"\u0142\u00a1\u0000\u0a9b\u0a9a\u0001\u0000\u0000\u0000\u0a9b\u0a9c\u0001"+
		"\u0000\u0000\u0000\u0a9c\u0a9e\u0001\u0000\u0000\u0000\u0a9d\u0a9f\u0003"+
		"\u0144\u00a2\u0000\u0a9e\u0a9d\u0001\u0000\u0000\u0000\u0a9e\u0a9f\u0001"+
		"\u0000\u0000\u0000\u0a9f\u0141\u0001\u0000\u0000\u0000\u0aa0\u0aa1\u0005"+
		"\u0159\u0000\u0000\u0aa1\u0aa2\u0007\u001b\u0000\u0000\u0aa2\u0aa3\u0005"+
		"\u0096\u0000\u0000\u0aa3\u0aa4\u0005-\u0000\u0000\u0aa4\u0aa6\u0003\u02d2"+
		"\u0169\u0000\u0aa5\u0aa7\u0005\u0014\u0000\u0000\u0aa6\u0aa5\u0001\u0000"+
		"\u0000\u0000\u0aa6\u0aa7\u0001\u0000\u0000\u0000\u0aa7\u0aa9\u0001\u0000"+
		"\u0000\u0000\u0aa8\u0aaa\u0005o\u0000\u0000\u0aa9\u0aa8\u0001\u0000\u0000"+
		"\u0000\u0aa9\u0aaa\u0001\u0000\u0000\u0000\u0aaa\u0aad\u0001\u0000\u0000"+
		"\u0000\u0aab\u0aac\u0005\u0106\u0000\u0000\u0aac\u0aae\u0005\u0096\u0000"+
		"\u0000\u0aad\u0aab\u0001\u0000\u0000\u0000\u0aad\u0aae\u0001\u0000\u0000"+
		"\u0000\u0aae\u0ab1\u0001\u0000\u0000\u0000\u0aaf\u0ab0\u0005\u0106\u0000"+
		"\u0000\u0ab0\u0ab2\u0005\u00c9\u0000\u0000\u0ab1\u0aaf\u0001\u0000\u0000"+
		"\u0000\u0ab1\u0ab2\u0001\u0000\u0000\u0000\u0ab2\u0ac5\u0001\u0000\u0000"+
		"\u0000\u0ab3\u0ab4\u0005\u0202\u0000\u0000\u0ab4\u0ab6\u0003\u02d2\u0169"+
		"\u0000\u0ab5\u0ab7\u0005\u0014\u0000\u0000\u0ab6\u0ab5\u0001\u0000\u0000"+
		"\u0000\u0ab6\u0ab7\u0001\u0000\u0000\u0000\u0ab7\u0ab9\u0001\u0000\u0000"+
		"\u0000\u0ab8\u0aba\u0005o\u0000\u0000\u0ab9\u0ab8\u0001\u0000\u0000\u0000"+
		"\u0ab9\u0aba\u0001\u0000\u0000\u0000\u0aba\u0abd\u0001\u0000\u0000\u0000"+
		"\u0abb\u0abc\u0005\u0106\u0000\u0000\u0abc\u0abe\u0005\u0096\u0000\u0000"+
		"\u0abd\u0abb\u0001\u0000\u0000\u0000\u0abd\u0abe\u0001\u0000\u0000\u0000"+
		"\u0abe\u0ac1\u0001\u0000\u0000\u0000\u0abf\u0ac0\u0005\u0106\u0000\u0000"+
		"\u0ac0\u0ac2\u0005\u00c9\u0000\u0000\u0ac1\u0abf\u0001\u0000\u0000\u0000"+
		"\u0ac1\u0ac2\u0001\u0000\u0000\u0000\u0ac2\u0ac4\u0001\u0000\u0000\u0000"+
		"\u0ac3\u0ab3\u0001\u0000\u0000\u0000\u0ac4\u0ac7\u0001\u0000\u0000\u0000"+
		"\u0ac5\u0ac3\u0001\u0000\u0000\u0000\u0ac5\u0ac6\u0001\u0000\u0000\u0000"+
		"\u0ac6\u0ac8\u0001\u0000\u0000\u0000\u0ac7\u0ac5\u0001\u0000\u0000\u0000"+
		"\u0ac8\u0ac9\u0005\u0165\u0000\u0000\u0ac9\u0aca\u0003\u02d2\u0169\u0000"+
		"\u0aca\u0143\u0001\u0000\u0000\u0000\u0acb\u0acc\u0005[\u0000\u0000\u0acc"+
		"\u0ad1\u0003\u02d2\u0169\u0000\u0acd\u0ace\u0005\u0202\u0000\u0000\u0ace"+
		"\u0ad0\u0003\u02d2\u0169\u0000\u0acf\u0acd\u0001\u0000\u0000\u0000\u0ad0"+
		"\u0ad3\u0001\u0000\u0000\u0000\u0ad1\u0acf\u0001\u0000\u0000\u0000\u0ad1"+
		"\u0ad2\u0001\u0000\u0000\u0000\u0ad2\u0ad4\u0001\u0000\u0000\u0000\u0ad3"+
		"\u0ad1\u0001\u0000\u0000\u0000\u0ad4\u0ad5\u0005\u0165\u0000\u0000\u0ad5"+
		"\u0ad6\u0003\u02d2\u0169\u0000\u0ad6\u0ad7\u0005\u0192\u0000\u0000\u0ad7"+
		"\u0ad8\u0003\u0200\u0100\u0000\u0ad8\u0ad9\u0005i\u0000\u0000\u0ad9\u0ada"+
		"\u0003\u0200\u0100\u0000\u0ada\u0145\u0001\u0000\u0000\u0000\u0adb\u0adf"+
		"\u0003\u014a\u00a5\u0000\u0adc\u0ade\u0003\u0148\u00a4\u0000\u0add\u0adc"+
		"\u0001\u0000\u0000\u0000\u0ade\u0ae1\u0001\u0000\u0000\u0000\u0adf\u0add"+
		"\u0001\u0000\u0000\u0000\u0adf\u0ae0\u0001\u0000\u0000\u0000\u0ae0\u0147"+
		"\u0001\u0000\u0000\u0000\u0ae1\u0adf\u0001\u0000\u0000\u0000\u0ae2\u0ae4"+
		"\u0005\u01a0\u0000\u0000\u0ae3\u0ae5\u0005\r\u0000\u0000\u0ae4\u0ae3\u0001"+
		"\u0000\u0000\u0000\u0ae4\u0ae5\u0001\u0000\u0000\u0000\u0ae5\u0ae9\u0001"+
		"\u0000\u0000\u0000\u0ae6\u0ae9\u0005\u00be\u0000\u0000\u0ae7\u0ae9\u0005"+
		"\u00e3\u0000\u0000\u0ae8\u0ae2\u0001\u0000\u0000\u0000\u0ae8\u0ae6\u0001"+
		"\u0000\u0000\u0000\u0ae8\u0ae7\u0001\u0000\u0000\u0000\u0ae9\u0aea\u0001"+
		"\u0000\u0000\u0000\u0aea\u0aeb\u0003\u014a\u00a5\u0000\u0aeb\u0149\u0001"+
		"\u0000\u0000\u0000\u0aec\u0af2\u0003\u014c\u00a6\u0000\u0aed\u0aee\u0005"+
		"\u01fc\u0000\u0000\u0aee\u0aef\u0003\u0146\u00a3\u0000\u0aef\u0af0\u0005"+
		"\u01fd\u0000\u0000\u0af0\u0af2\u0001\u0000\u0000\u0000\u0af1\u0aec\u0001"+
		"\u0000\u0000\u0000\u0af1\u0aed\u0001\u0000\u0000\u0000\u0af2\u014b\u0001"+
		"\u0000\u0000\u0000\u0af3\u0af5\u0003\u013e\u009f\u0000\u0af4\u0af3\u0001"+
		"\u0000\u0000\u0000\u0af4\u0af5\u0001\u0000\u0000\u0000\u0af5\u0af6\u0001"+
		"\u0000\u0000\u0000\u0af6\u0af8\u0005\u015d\u0000\u0000\u0af7\u0af9\u0007"+
		"\u001c\u0000\u0000\u0af8\u0af7\u0001\u0000\u0000\u0000\u0af8\u0af9\u0001"+
		"\u0000\u0000\u0000\u0af9\u0b03\u0001\u0000\u0000\u0000\u0afa\u0b04\u0005"+
		"\u01ff\u0000\u0000\u0afb\u0b00\u0003\u014e\u00a7\u0000\u0afc\u0afd\u0005"+
		"\u0202\u0000\u0000\u0afd\u0aff\u0003\u014e\u00a7\u0000\u0afe\u0afc\u0001"+
		"\u0000\u0000\u0000\u0aff\u0b02\u0001\u0000\u0000\u0000\u0b00\u0afe\u0001"+
		"\u0000\u0000\u0000\u0b00\u0b01\u0001\u0000\u0000\u0000\u0b01\u0b04\u0001"+
		"\u0000\u0000\u0000\u0b02\u0b00\u0001\u0000\u0000\u0000\u0b03\u0afa\u0001"+
		"\u0000\u0000\u0000\u0b03\u0afb\u0001\u0000\u0000\u0000\u0b04\u0b06\u0001"+
		"\u0000\u0000\u0000\u0b05\u0b07\u0003\u0296\u014b\u0000\u0b06\u0b05\u0001"+
		"\u0000\u0000\u0000\u0b06\u0b07\u0001\u0000\u0000\u0000\u0b07\u0b08\u0001"+
		"\u0000\u0000\u0000\u0b08\u0b0a\u0003\u0150\u00a8\u0000\u0b09\u0b0b\u0003"+
		"\u0290\u0148\u0000\u0b0a\u0b09\u0001\u0000\u0000\u0000\u0b0a\u0b0b\u0001"+
		"\u0000\u0000\u0000\u0b0b\u0b0d\u0001\u0000\u0000\u0000\u0b0c\u0b0e\u0003"+
		"\u0178\u00bc\u0000\u0b0d\u0b0c\u0001\u0000\u0000\u0000\u0b0d\u0b0e\u0001"+
		"\u0000\u0000\u0000\u0b0e\u0b10\u0001\u0000\u0000\u0000\u0b0f\u0b11\u0003"+
		"\u017c\u00be\u0000\u0b10\u0b0f\u0001\u0000\u0000\u0000\u0b10\u0b11\u0001"+
		"\u0000\u0000\u0000\u0b11\u0b13\u0001\u0000\u0000\u0000\u0b12\u0b14\u0003"+
		"\u01a6\u00d3\u0000\u0b13\u0b12\u0001\u0000\u0000\u0000\u0b13\u0b14\u0001"+
		"\u0000\u0000\u0000\u0b14\u0b16\u0001\u0000\u0000\u0000\u0b15\u0b17\u0003"+
		"\u0188\u00c4\u0000\u0b16\u0b15\u0001\u0000\u0000\u0000\u0b16\u0b17\u0001"+
		"\u0000\u0000\u0000\u0b17\u0b19\u0001\u0000\u0000\u0000\u0b18\u0b1a\u0005"+
		"\u0208\u0000\u0000\u0b19\u0b18\u0001\u0000\u0000\u0000\u0b19\u0b1a\u0001"+
		"\u0000\u0000\u0000\u0b1a\u014d\u0001\u0000\u0000\u0000\u0b1b\u0b1d\u0003"+
		"\u0152\u00a9\u0000\u0b1c\u0b1e\u0003\u028a\u0145\u0000\u0b1d\u0b1c\u0001"+
		"\u0000\u0000\u0000\u0b1d\u0b1e\u0001\u0000\u0000\u0000\u0b1e\u014f\u0001"+
		"\u0000\u0000\u0000\u0b1f\u0b20\u0005\u009e\u0000\u0000\u0b20\u0b21\u0003"+
		"\u0154\u00aa\u0000\u0b21\u0151\u0001\u0000\u0000\u0000\u0b22\u0b23\u0003"+
		"\u02d4\u016a\u0000\u0b23\u0b24\u0005\u01f5\u0000\u0000\u0b24\u0b25\u0005"+
		"\u01ff\u0000\u0000\u0b25\u0b28\u0001\u0000\u0000\u0000\u0b26\u0b28\u0003"+
		"\u0200\u0100\u0000\u0b27\u0b22\u0001\u0000\u0000\u0000\u0b27\u0b26\u0001"+
		"\u0000\u0000\u0000\u0b28\u0153\u0001\u0000\u0000\u0000\u0b29\u0b2e\u0003"+
		"\u0156\u00ab\u0000\u0b2a\u0b2b\u0005\u0202\u0000\u0000\u0b2b\u0b2d\u0003"+
		"\u0156\u00ab\u0000\u0b2c\u0b2a\u0001\u0000\u0000\u0000\u0b2d\u0b30\u0001"+
		"\u0000\u0000\u0000\u0b2e\u0b2c\u0001\u0000\u0000\u0000\u0b2e\u0b2f\u0001"+
		"\u0000\u0000\u0000\u0b2f\u0155\u0001\u0000\u0000\u0000\u0b30\u0b2e\u0001"+
		"\u0000\u0000\u0000\u0b31\u0b35\u0003\u0158\u00ac\u0000\u0b32\u0b34\u0003"+
		"\u015a\u00ad\u0000\u0b33\u0b32\u0001\u0000\u0000\u0000\u0b34\u0b37\u0001"+
		"\u0000\u0000\u0000\u0b35\u0b33\u0001\u0000\u0000\u0000\u0b35\u0b36\u0001"+
		"\u0000\u0000\u0000\u0b36\u0b3a\u0001\u0000\u0000\u0000\u0b37\u0b35\u0001"+
		"\u0000\u0000\u0000\u0b38\u0b3b\u0003\u0166\u00b3\u0000\u0b39\u0b3b\u0003"+
		"\u0172\u00b9\u0000\u0b3a\u0b38\u0001\u0000\u0000\u0000\u0b3a\u0b39\u0001"+
		"\u0000\u0000\u0000\u0b3a\u0b3b\u0001\u0000\u0000\u0000\u0b3b\u0157\u0001"+
		"\u0000\u0000\u0000\u0b3c\u0b3f\u0003\u01e8\u00f4\u0000\u0b3d\u0b40\u0003"+
		"\u0166\u00b3\u0000\u0b3e\u0b40\u0003\u0172\u00b9\u0000\u0b3f\u0b3d\u0001"+
		"\u0000\u0000\u0000\u0b3f\u0b3e\u0001\u0000\u0000\u0000\u0b3f\u0b40\u0001"+
		"\u0000\u0000\u0000\u0b40\u0b5a\u0001\u0000\u0000\u0000\u0b41\u0b42\u0005"+
		"\u01fc\u0000\u0000\u0b42\u0b46\u0003\u0156\u00ab\u0000\u0b43\u0b45\u0003"+
		"\u0148\u00a4\u0000\u0b44\u0b43\u0001\u0000\u0000\u0000\u0b45\u0b48\u0001"+
		"\u0000\u0000\u0000\u0b46\u0b44\u0001\u0000\u0000\u0000\u0b46\u0b47\u0001"+
		"\u0000\u0000\u0000\u0b47\u0b49\u0001\u0000\u0000\u0000\u0b48\u0b46\u0001"+
		"\u0000\u0000\u0000\u0b49\u0b4c\u0005\u01fd\u0000\u0000\u0b4a\u0b4d\u0003"+
		"\u0166\u00b3\u0000\u0b4b\u0b4d\u0003\u0172\u00b9\u0000\u0b4c\u0b4a\u0001"+
		"\u0000\u0000\u0000\u0b4c\u0b4b\u0001\u0000\u0000\u0000\u0b4c\u0b4d\u0001"+
		"\u0000\u0000\u0000\u0b4d\u0b5a\u0001\u0000\u0000\u0000\u0b4e\u0b4f\u0005"+
		"\u0110\u0000\u0000\u0b4f\u0b50\u0005\u01fc\u0000\u0000\u0b50\u0b51\u0003"+
		"\u01e8\u00f4\u0000\u0b51\u0b52\u0005\u01fd\u0000\u0000\u0b52\u0b5a\u0001"+
		"\u0000\u0000\u0000\u0b53\u0b56\u0003\u01e8\u00f4\u0000\u0b54\u0b57\u0003"+
		"\u0166\u00b3\u0000\u0b55\u0b57\u0003\u0172\u00b9\u0000\u0b56\u0b54\u0001"+
		"\u0000\u0000\u0000\u0b56\u0b55\u0001\u0000\u0000\u0000\u0b56\u0b57\u0001"+
		"\u0000\u0000\u0000\u0b57\u0b5a\u0001\u0000\u0000\u0000\u0b58\u0b5a\u0003"+
		"\u0250\u0128\u0000\u0b59\u0b3c\u0001\u0000\u0000\u0000\u0b59\u0b41\u0001"+
		"\u0000\u0000\u0000\u0b59\u0b4e\u0001\u0000\u0000\u0000\u0b59\u0b53\u0001"+
		"\u0000\u0000\u0000\u0b59\u0b58\u0001\u0000\u0000\u0000\u0b5a\u0b5e\u0001"+
		"\u0000\u0000\u0000\u0b5b\u0b5d\u0003\u0164\u00b2\u0000\u0b5c\u0b5b\u0001"+
		"\u0000\u0000\u0000\u0b5d\u0b60\u0001\u0000\u0000\u0000\u0b5e\u0b5c\u0001"+
		"\u0000\u0000\u0000\u0b5e\u0b5f\u0001\u0000\u0000\u0000\u0b5f\u0b62\u0001"+
		"\u0000\u0000\u0000\u0b60\u0b5e\u0001\u0000\u0000\u0000\u0b61\u0b63\u0003"+
		"\u028c\u0146\u0000\u0b62\u0b61\u0001\u0000\u0000\u0000\u0b62\u0b63\u0001"+
		"\u0000\u0000\u0000\u0b63\u0159\u0001\u0000\u0000\u0000\u0b64\u0b66\u0003"+
		"\u0162\u00b1\u0000\u0b65\u0b64\u0001\u0000\u0000\u0000\u0b65\u0b66\u0001"+
		"\u0000\u0000\u0000\u0b66\u0b68\u0001\u0000\u0000\u0000\u0b67\u0b69\u0007"+
		"\u001d\u0000\u0000\u0b68\u0b67\u0001\u0000\u0000\u0000\u0b68\u0b69\u0001"+
		"\u0000\u0000\u0000\u0b69\u0b6c\u0001\u0000\u0000\u0000\u0b6a\u0b6d\u0005"+
		"\u00b7\u0000\u0000\u0b6b\u0b6d\u0003\u0160\u00b0\u0000\u0b6c\u0b6a\u0001"+
		"\u0000\u0000\u0000\u0b6c\u0b6b\u0001\u0000\u0000\u0000\u0b6c\u0b6d\u0001"+
		"\u0000\u0000\u0000\u0b6d\u0b6e\u0001\u0000\u0000\u0000\u0b6e\u0b6f\u0005"+
		"\u00c6\u0000\u0000\u0b6f\u0b71\u0003\u0158\u00ac\u0000\u0b70\u0b72\u0003"+
		"\u0162\u00b1\u0000\u0b71\u0b70\u0001\u0000\u0000\u0000\u0b71\u0b72\u0001"+
		"\u0000\u0000\u0000\u0b72\u0b77\u0001\u0000\u0000\u0000\u0b73\u0b76\u0003"+
		"\u015c\u00ae\u0000\u0b74\u0b76\u0003\u015e\u00af\u0000\u0b75\u0b73\u0001"+
		"\u0000\u0000\u0000\u0b75\u0b74\u0001\u0000\u0000\u0000\u0b76\u0b79\u0001"+
		"\u0000\u0000\u0000\u0b77\u0b75\u0001\u0000\u0000\u0000\u0b77\u0b78\u0001"+
		"\u0000\u0000\u0000\u0b78\u015b\u0001\u0000\u0000\u0000\u0b79\u0b77\u0001"+
		"\u0000\u0000\u0000\u0b7a\u0b7b\u0005\u010f\u0000\u0000\u0b7b\u0b7c\u0003"+
		"\u01fc\u00fe\u0000\u0b7c\u015d\u0001\u0000\u0000\u0000\u0b7d\u0b7e\u0005"+
		"\u01aa\u0000\u0000\u0b7e\u0b7f\u0005\u01fc\u0000\u0000\u0b7f\u0b84\u0003"+
		"\u02d2\u0169\u0000\u0b80\u0b81\u0005\u0202\u0000\u0000\u0b81\u0b83\u0003"+
		"\u02d2\u0169\u0000\u0b82\u0b80\u0001\u0000\u0000\u0000\u0b83\u0b86\u0001"+
		"\u0000\u0000\u0000\u0b84\u0b82\u0001\u0000\u0000\u0000\u0b84\u0b85\u0001"+
		"\u0000\u0000\u0000\u0b85\u0b87\u0001\u0000\u0000\u0000\u0b86\u0b84\u0001"+
		"\u0000\u0000\u0000\u0b87\u0b88\u0005\u01fd\u0000\u0000\u0b88\u015f\u0001"+
		"\u0000\u0000\u0000\u0b89\u0b8b\u0007\u001e\u0000\u0000\u0b8a\u0b8c\u0005"+
		"\u0119\u0000\u0000\u0b8b\u0b8a\u0001\u0000\u0000\u0000\u0b8b\u0b8c\u0001"+
		"\u0000\u0000\u0000\u0b8c\u0161\u0001\u0000\u0000\u0000\u0b8d\u0b8e\u0005"+
		"\u0120\u0000\u0000\u0b8e\u0b9c\u0005-\u0000\u0000\u0b8f\u0b90\u0005\u01fc"+
		"\u0000\u0000\u0b90\u0b91\u0003\u0146\u00a3\u0000\u0b91\u0b92\u0005\u01fd"+
		"\u0000\u0000\u0b92\u0b9d\u0001\u0000\u0000\u0000\u0b93\u0b9d\u0003\u01fa"+
		"\u00fd\u0000\u0b94\u0b99\u0003\u0200\u0100\u0000\u0b95\u0b96\u0005\u0202"+
		"\u0000\u0000\u0b96\u0b98\u0003\u0200\u0100\u0000\u0b97\u0b95\u0001\u0000"+
		"\u0000\u0000\u0b98\u0b9b\u0001\u0000\u0000\u0000\u0b99\u0b97\u0001\u0000"+
		"\u0000\u0000\u0b99\u0b9a\u0001\u0000\u0000\u0000\u0b9a\u0b9d\u0001\u0000"+
		"\u0000\u0000\u0b9b\u0b99\u0001\u0000\u0000\u0000\u0b9c\u0b8f\u0001\u0000"+
		"\u0000\u0000\u0b9c\u0b93\u0001\u0000\u0000\u0000\u0b9c\u0b94\u0001\u0000"+
		"\u0000\u0000\u0b9d\u0163\u0001\u0000\u0000\u0000\u0b9e\u0b9f\u0005\u01b4"+
		"\u0000\u0000\u0b9f\u0ba0\u0005!\u0000\u0000\u0ba0\u0ba1\u0007\u001f\u0000"+
		"\u0000\u0ba1\u0ba7\u0003\u0200\u0100\u0000\u0ba2\u0ba3\u0005\u0013\u0000"+
		"\u0000\u0ba3\u0ba4\u0005\u010b\u0000\u0000\u0ba4\u0ba5\u0007 \u0000\u0000"+
		"\u0ba5\u0ba7\u0003\u0200\u0100\u0000\u0ba6\u0b9e\u0001\u0000\u0000\u0000"+
		"\u0ba6\u0ba2\u0001\u0000\u0000\u0000\u0ba7\u0165\u0001\u0000\u0000\u0000"+
		"\u0ba8\u0baa\u0005\u012b\u0000\u0000\u0ba9\u0bab\u0005\u01c0\u0000\u0000"+
		"\u0baa\u0ba9\u0001\u0000\u0000\u0000\u0baa\u0bab\u0001\u0000\u0000\u0000"+
		"\u0bab\u0bac\u0001\u0000\u0000\u0000\u0bac\u0bad\u0005\u01fc\u0000\u0000"+
		"\u0bad\u0bb2\u0003\u0168\u00b4\u0000\u0bae\u0baf\u0005\u0202\u0000\u0000"+
		"\u0baf\u0bb1\u0003\u0168\u00b4\u0000\u0bb0\u0bae\u0001\u0000\u0000\u0000"+
		"\u0bb1\u0bb4\u0001\u0000\u0000\u0000\u0bb2\u0bb0\u0001\u0000\u0000\u0000"+
		"\u0bb2\u0bb3\u0001\u0000\u0000\u0000\u0bb3\u0bb5\u0001\u0000\u0000\u0000"+
		"\u0bb4\u0bb2\u0001\u0000\u0000\u0000\u0bb5\u0bb6\u0003\u016a\u00b5\u0000"+
		"\u0bb6\u0bb7\u0003\u016c\u00b6\u0000\u0bb7\u0bb8\u0005\u01fd\u0000\u0000"+
		"\u0bb8\u0167\u0001\u0000\u0000\u0000\u0bb9\u0bba\u0003\u02b2\u0159\u0000"+
		"\u0bba\u0bbb\u0005\u01fc\u0000\u0000\u0bbb\u0bbc\u0003\u0200\u0100\u0000"+
		"\u0bbc\u0bbe\u0005\u01fd\u0000\u0000\u0bbd\u0bbf\u0003\u028a\u0145\u0000"+
		"\u0bbe\u0bbd\u0001\u0000\u0000\u0000\u0bbe\u0bbf\u0001\u0000\u0000\u0000"+
		"\u0bbf\u0169\u0001\u0000\u0000\u0000\u0bc0\u0bcd\u0005\u009b\u0000\u0000"+
		"\u0bc1\u0bce\u0003\u02d2\u0169\u0000\u0bc2\u0bc3\u0005\u01fc\u0000\u0000"+
		"\u0bc3\u0bc8\u0003\u02d2\u0169\u0000\u0bc4\u0bc5\u0005\u0202\u0000\u0000"+
		"\u0bc5\u0bc7\u0003\u02d2\u0169\u0000\u0bc6\u0bc4\u0001\u0000\u0000\u0000"+
		"\u0bc7\u0bca\u0001\u0000\u0000\u0000\u0bc8\u0bc6\u0001\u0000\u0000\u0000"+
		"\u0bc8\u0bc9\u0001\u0000\u0000\u0000\u0bc9\u0bcb\u0001\u0000\u0000\u0000"+
		"\u0bca\u0bc8\u0001\u0000\u0000\u0000\u0bcb\u0bcc\u0005\u01fd\u0000\u0000"+
		"\u0bcc\u0bce\u0001\u0000\u0000\u0000\u0bcd\u0bc1\u0001\u0000\u0000\u0000"+
		"\u0bcd\u0bc2\u0001\u0000\u0000\u0000\u0bce\u016b\u0001\u0000\u0000\u0000"+
		"\u0bcf\u0bd0\u0005\u00ac\u0000\u0000\u0bd0\u0be2\u0005\u01fc\u0000\u0000"+
		"\u0bd1\u0be3\u0003\u0146\u00a3\u0000\u0bd2\u0bd7\u0005\u0011\u0000\u0000"+
		"\u0bd3\u0bd4\u0005\u0202\u0000\u0000\u0bd4\u0bd6\u0005\u0011\u0000\u0000"+
		"\u0bd5\u0bd3\u0001\u0000\u0000\u0000\u0bd6\u0bd9\u0001\u0000\u0000\u0000"+
		"\u0bd7\u0bd5\u0001\u0000\u0000\u0000\u0bd7\u0bd8\u0001\u0000\u0000\u0000"+
		"\u0bd8\u0be3\u0001\u0000\u0000\u0000\u0bd9\u0bd7\u0001\u0000\u0000\u0000"+
		"\u0bda\u0bdf\u0003\u016e\u00b7\u0000\u0bdb\u0bdc\u0005\u0202\u0000\u0000"+
		"\u0bdc\u0bde\u0003\u016e\u00b7\u0000\u0bdd\u0bdb\u0001\u0000\u0000\u0000"+
		"\u0bde\u0be1\u0001\u0000\u0000\u0000\u0bdf\u0bdd\u0001\u0000\u0000\u0000"+
		"\u0bdf\u0be0\u0001\u0000\u0000\u0000\u0be0\u0be3\u0001\u0000\u0000\u0000"+
		"\u0be1\u0bdf\u0001\u0000\u0000\u0000\u0be2\u0bd1\u0001\u0000\u0000\u0000"+
		"\u0be2\u0bd2\u0001\u0000\u0000\u0000\u0be2\u0bda\u0001\u0000\u0000\u0000"+
		"\u0be3\u0be4\u0001\u0000\u0000\u0000\u0be4\u0be5\u0005\u01fd\u0000\u0000"+
		"\u0be5\u016d\u0001\u0000\u0000\u0000\u0be6\u0be8\u0003\u0170\u00b8\u0000"+
		"\u0be7\u0be9\u0003\u028a\u0145\u0000\u0be8\u0be7\u0001\u0000\u0000\u0000"+
		"\u0be8\u0be9\u0001\u0000\u0000\u0000\u0be9\u016f\u0001\u0000\u0000\u0000"+
		"\u0bea\u0bed\u0003\u0200\u0100\u0000\u0beb\u0bed\u0003\u01fa\u00fd\u0000"+
		"\u0bec\u0bea\u0001\u0000\u0000\u0000\u0bec\u0beb\u0001\u0000\u0000\u0000"+
		"\u0bed\u0171\u0001\u0000\u0000\u0000\u0bee\u0bf1\u0005\u01a3\u0000\u0000"+
		"\u0bef\u0bf0\u0007!\u0000\u0000\u0bf0\u0bf2\u0005\u0106\u0000\u0000\u0bf1"+
		"\u0bef\u0001\u0000\u0000\u0000\u0bf1\u0bf2\u0001\u0000\u0000\u0000\u0bf2"+
		"\u0bf3\u0001\u0000\u0000\u0000\u0bf3\u0c00\u0005\u01fc\u0000\u0000\u0bf4"+
		"\u0c01\u0003\u02d2\u0169\u0000\u0bf5\u0bf6\u0005\u01fc\u0000\u0000\u0bf6"+
		"\u0bfb\u0003\u02d2\u0169\u0000\u0bf7\u0bf8\u0005\u0202\u0000\u0000\u0bf8"+
		"\u0bfa\u0003\u02d2\u0169\u0000\u0bf9\u0bf7\u0001\u0000\u0000\u0000\u0bfa"+
		"\u0bfd\u0001\u0000\u0000\u0000\u0bfb\u0bf9\u0001\u0000\u0000\u0000\u0bfb"+
		"\u0bfc\u0001\u0000\u0000\u0000\u0bfc\u0bfe\u0001\u0000\u0000\u0000\u0bfd"+
		"\u0bfb\u0001\u0000\u0000\u0000\u0bfe\u0bff\u0005\u01fd\u0000\u0000\u0bff"+
		"\u0c01\u0001\u0000\u0000\u0000\u0c00\u0bf4\u0001\u0000\u0000\u0000\u0c00"+
		"\u0bf5\u0001\u0000\u0000\u0000\u0c01\u0c02\u0001\u0000\u0000\u0000\u0c02"+
		"\u0c03\u0003\u016a\u00b5\u0000\u0c03\u0c04\u0003\u0174\u00ba\u0000\u0c04"+
		"\u0c05\u0005\u01fd\u0000\u0000\u0c05\u0173\u0001\u0000\u0000\u0000\u0c06"+
		"\u0c07\u0005\u00ac\u0000\u0000\u0c07\u0c08\u0005\u01fc\u0000\u0000\u0c08"+
		"\u0c0d\u0003\u0176\u00bb\u0000\u0c09\u0c0a\u0005\u0202\u0000\u0000\u0c0a"+
		"\u0c0c\u0003\u0176\u00bb\u0000\u0c0b\u0c09\u0001\u0000\u0000\u0000\u0c0c"+
		"\u0c0f\u0001\u0000\u0000\u0000\u0c0d\u0c0b\u0001\u0000\u0000\u0000\u0c0d"+
		"\u0c0e\u0001\u0000\u0000\u0000\u0c0e\u0c10\u0001\u0000\u0000\u0000\u0c0f"+
		"\u0c0d\u0001\u0000\u0000\u0000\u0c10\u0c11\u0005\u01fd\u0000\u0000\u0c11"+
		"\u0175\u0001\u0000\u0000\u0000\u0c12\u0c1f\u0003\u02d2\u0169\u0000\u0c13"+
		"\u0c14\u0005\u01fc\u0000\u0000\u0c14\u0c19\u0003\u02d2\u0169\u0000\u0c15"+
		"\u0c16\u0005\u0202\u0000\u0000\u0c16\u0c18\u0003\u02d2\u0169\u0000\u0c17"+
		"\u0c15\u0001\u0000\u0000\u0000\u0c18\u0c1b\u0001\u0000\u0000\u0000\u0c19"+
		"\u0c17\u0001\u0000\u0000\u0000\u0c19\u0c1a\u0001\u0000\u0000\u0000\u0c1a"+
		"\u0c1c\u0001\u0000\u0000\u0000\u0c1b\u0c19\u0001\u0000\u0000\u0000\u0c1c"+
		"\u0c1d\u0005\u01fd\u0000\u0000\u0c1d\u0c1f\u0001\u0000\u0000\u0000\u0c1e"+
		"\u0c12\u0001\u0000\u0000\u0000\u0c1e\u0c13\u0001\u0000\u0000\u0000\u0c1f"+
		"\u0c2f\u0001\u0000\u0000\u0000\u0c20\u0c2d\u0005\u0013\u0000\u0000\u0c21"+
		"\u0c2e\u0003\u02f4\u017a\u0000\u0c22\u0c23\u0005\u01fc\u0000\u0000\u0c23"+
		"\u0c28\u0003\u02f4\u017a\u0000\u0c24\u0c25\u0005\u0202\u0000\u0000\u0c25"+
		"\u0c27\u0003\u02f4\u017a\u0000\u0c26\u0c24\u0001\u0000\u0000\u0000\u0c27"+
		"\u0c2a\u0001\u0000\u0000\u0000\u0c28\u0c26\u0001\u0000\u0000\u0000\u0c28"+
		"\u0c29\u0001\u0000\u0000\u0000\u0c29\u0c2b\u0001\u0000\u0000\u0000\u0c2a"+
		"\u0c28\u0001\u0000\u0000\u0000\u0c2b\u0c2c\u0005\u01fd\u0000\u0000\u0c2c"+
		"\u0c2e\u0001\u0000\u0000\u0000\u0c2d\u0c21\u0001\u0000\u0000\u0000\u0c2d"+
		"\u0c22\u0001\u0000\u0000\u0000\u0c2e\u0c30\u0001\u0000\u0000\u0000\u0c2f"+
		"\u0c20\u0001\u0000\u0000\u0000\u0c2f\u0c30\u0001\u0000\u0000\u0000\u0c30"+
		"\u0177\u0001\u0000\u0000\u0000\u0c31\u0c32\u0005F\u0000\u0000\u0c32\u0c34"+
		"\u0005-\u0000\u0000\u0c33\u0c35\u0005\u00fc\u0000\u0000\u0c34\u0c33\u0001"+
		"\u0000\u0000\u0000\u0c34\u0c35\u0001\u0000\u0000\u0000\u0c35\u0c36\u0001"+
		"\u0000\u0000\u0000\u0c36\u0c38\u0003\u01fc\u00fe\u0000\u0c37\u0c39\u0003"+
		"\u017a\u00bd\u0000\u0c38\u0c37\u0001\u0000\u0000\u0000\u0c38\u0c39\u0001"+
		"\u0000\u0000\u0000\u0c39\u0c43\u0001\u0000\u0000\u0000\u0c3a\u0c3b\u0003"+
		"\u017a\u00bd\u0000\u0c3b\u0c3c\u0005F\u0000\u0000\u0c3c\u0c3e\u0005-\u0000"+
		"\u0000\u0c3d\u0c3f\u0005\u00fc\u0000\u0000\u0c3e\u0c3d\u0001\u0000\u0000"+
		"\u0000\u0c3e\u0c3f\u0001\u0000\u0000\u0000\u0c3f\u0c40\u0001\u0000\u0000"+
		"\u0000\u0c40\u0c41\u0003\u01fc\u00fe\u0000\u0c41\u0c43\u0001\u0000\u0000"+
		"\u0000\u0c42\u0c31\u0001\u0000\u0000\u0000\u0c42\u0c3a\u0001\u0000\u0000"+
		"\u0000\u0c43\u0179\u0001\u0000\u0000\u0000\u0c44\u0c45\u0005\u0179\u0000"+
		"\u0000\u0c45\u0c46\u0005\u01bc\u0000\u0000\u0c46\u0c47\u0003\u01fc\u00fe"+
		"\u0000\u0c47\u017b\u0001\u0000\u0000\u0000\u0c48\u0c49\u0005\u00a3\u0000"+
		"\u0000\u0c49\u0c4a\u0005-\u0000\u0000\u0c4a\u0c4f\u0003\u017e\u00bf\u0000"+
		"\u0c4b\u0c4c\u0005\u0202\u0000\u0000\u0c4c\u0c4e\u0003\u017e\u00bf\u0000"+
		"\u0c4d\u0c4b\u0001\u0000\u0000\u0000\u0c4e\u0c51\u0001\u0000\u0000\u0000"+
		"\u0c4f\u0c4d\u0001\u0000\u0000\u0000\u0c4f\u0c50\u0001\u0000\u0000\u0000"+
		"\u0c50\u0c53\u0001\u0000\u0000\u0000\u0c51\u0c4f\u0001\u0000\u0000\u0000"+
		"\u0c52\u0c54\u0003\u0186\u00c3\u0000\u0c53\u0c52\u0001\u0000\u0000\u0000"+
		"\u0c53\u0c54\u0001\u0000\u0000\u0000\u0c54\u0c63\u0001\u0000\u0000\u0000"+
		"\u0c55\u0c60\u0003\u0186\u00c3\u0000\u0c56\u0c57\u0005\u00a3\u0000\u0000"+
		"\u0c57\u0c58\u0005-\u0000\u0000\u0c58\u0c5d\u0003\u017e\u00bf\u0000\u0c59"+
		"\u0c5a\u0005\u0202\u0000\u0000\u0c5a\u0c5c\u0003\u017e\u00bf\u0000\u0c5b"+
		"\u0c59\u0001\u0000\u0000\u0000\u0c5c\u0c5f\u0001\u0000\u0000\u0000\u0c5d"+
		"\u0c5b\u0001\u0000\u0000\u0000\u0c5d\u0c5e\u0001\u0000\u0000\u0000\u0c5e"+
		"\u0c61\u0001\u0000\u0000\u0000\u0c5f\u0c5d\u0001\u0000\u0000\u0000\u0c60"+
		"\u0c56\u0001\u0000\u0000\u0000\u0c60\u0c61\u0001\u0000\u0000\u0000\u0c61"+
		"\u0c63\u0001\u0000\u0000\u0000\u0c62\u0c48\u0001\u0000\u0000\u0000\u0c62"+
		"\u0c55\u0001\u0000\u0000\u0000\u0c63\u017d\u0001\u0000\u0000\u0000\u0c64"+
		"\u0c68\u0003\u0182\u00c1\u0000\u0c65\u0c68\u0003\u0180\u00c0\u0000\u0c66"+
		"\u0c68\u0003\u0200\u0100\u0000\u0c67\u0c64\u0001\u0000\u0000\u0000\u0c67"+
		"\u0c65\u0001\u0000\u0000\u0000\u0c67\u0c66\u0001\u0000\u0000\u0000\u0c68"+
		"\u017f\u0001\u0000\u0000\u0000\u0c69\u0c6a\u0007\"\u0000\u0000\u0c6a\u0c6b"+
		"\u0005\u01fc\u0000\u0000\u0c6b\u0c70\u0003\u0184\u00c2\u0000\u0c6c\u0c6d"+
		"\u0005\u0202\u0000\u0000\u0c6d\u0c6f\u0003\u0184\u00c2\u0000\u0c6e\u0c6c"+
		"\u0001\u0000\u0000\u0000\u0c6f\u0c72\u0001\u0000\u0000\u0000\u0c70\u0c6e"+
		"\u0001\u0000\u0000\u0000\u0c70\u0c71\u0001\u0000\u0000\u0000\u0c71\u0c73"+
		"\u0001\u0000\u0000\u0000\u0c72\u0c70\u0001\u0000\u0000\u0000\u0c73\u0c74"+
		"\u0005\u01fd\u0000\u0000\u0c74\u0181\u0001\u0000\u0000\u0000\u0c75\u0c76"+
		"\u0005\u00a4\u0000\u0000\u0c76\u0c77\u0005\u0166\u0000\u0000\u0c77\u0c78"+
		"\u0005\u01fc\u0000\u0000\u0c78\u0c7d\u0003\u0184\u00c2\u0000\u0c79\u0c7a"+
		"\u0005\u0202\u0000\u0000\u0c7a\u0c7c\u0003\u0184\u00c2\u0000\u0c7b\u0c79"+
		"\u0001\u0000\u0000\u0000\u0c7c\u0c7f\u0001\u0000\u0000\u0000\u0c7d\u0c7b"+
		"\u0001\u0000\u0000\u0000\u0c7d\u0c7e\u0001\u0000\u0000\u0000\u0c7e\u0c80"+
		"\u0001\u0000\u0000\u0000\u0c7f\u0c7d\u0001\u0000\u0000\u0000\u0c80\u0c81"+
		"\u0005\u01fd\u0000\u0000\u0c81\u0183\u0001\u0000\u0000\u0000\u0c82\u0c86"+
		"\u0003\u0180\u00c0\u0000\u0c83\u0c86\u0003\u01fa\u00fd\u0000\u0c84\u0c86"+
		"\u0003\u0200\u0100\u0000\u0c85\u0c82\u0001\u0000\u0000\u0000\u0c85\u0c83"+
		"\u0001\u0000\u0000\u0000\u0c85\u0c84\u0001\u0000\u0000\u0000\u0c86\u0185"+
		"\u0001\u0000\u0000\u0000\u0c87\u0c88\u0005\u00a6\u0000\u0000\u0c88\u0c89"+
		"\u0003\u01fc\u00fe\u0000\u0c89\u0187\u0001\u0000\u0000\u0000\u0c8a\u0c8e"+
		"\u0005\u00e9\u0000\u0000\u0c8b\u0c8d\u0003\u018a\u00c5\u0000\u0c8c\u0c8b"+
		"\u0001\u0000\u0000\u0000\u0c8d\u0c90\u0001\u0000\u0000\u0000\u0c8e\u0c8c"+
		"\u0001\u0000\u0000\u0000\u0c8e\u0c8f\u0001\u0000\u0000\u0000\u0c8f\u0c92"+
		"\u0001\u0000\u0000\u0000\u0c90\u0c8e\u0001\u0000\u0000\u0000\u0c91\u0c93"+
		"\u0003\u018c\u00c6\u0000\u0c92\u0c91\u0001\u0000\u0000\u0000\u0c92\u0c93"+
		"\u0001\u0000\u0000\u0000\u0c93\u0c97\u0001\u0000\u0000\u0000\u0c94\u0c96"+
		"\u0003\u018e\u00c7\u0000\u0c95\u0c94\u0001\u0000\u0000\u0000\u0c96\u0c99"+
		"\u0001\u0000\u0000\u0000\u0c97\u0c95\u0001\u0000\u0000\u0000\u0c97\u0c98"+
		"\u0001\u0000\u0000\u0000\u0c98\u0c9a\u0001\u0000\u0000\u0000\u0c99\u0c97"+
		"\u0001\u0000\u0000\u0000\u0c9a\u0c9b\u0003\u0190\u00c8\u0000\u0c9b\u0189"+
		"\u0001\u0000\u0000\u0000\u0c9c\u0c9d\u0007#\u0000\u0000\u0c9d\u0ca5\u0005"+
		"\u00f1\u0000\u0000\u0c9e\u0ca2\u0005\u01a1\u0000\u0000\u0c9f\u0ca3\u0005"+
		"q\u0000\u0000\u0ca0\u0ca1\u0005\u016e\u0000\u0000\u0ca1\u0ca3\u0005\u013d"+
		"\u0000\u0000\u0ca2\u0c9f\u0001\u0000\u0000\u0000\u0ca2\u0ca0\u0001\u0000"+
		"\u0000\u0000\u0ca3\u0ca5\u0001\u0000\u0000\u0000\u0ca4\u0c9c\u0001\u0000"+
		"\u0000\u0000\u0ca4\u0c9e\u0001\u0000\u0000\u0000\u0ca5\u018b\u0001\u0000"+
		"\u0000\u0000\u0ca6\u0ca7\u0005\u0147\u0000\u0000\u0ca7\u0ca8\u0007$\u0000"+
		"\u0000\u0ca8\u0ca9\u0005\u0151\u0000\u0000\u0ca9\u018d\u0001\u0000\u0000"+
		"\u0000\u0caa\u0cab\u0005\u013d\u0000\u0000\u0cab\u0cac\u0003\u02ae\u0157"+
		"\u0000\u0cac\u0cad\u0005\u010f\u0000\u0000\u0cad\u0cae\u0005\u01fc\u0000"+
		"\u0000\u0cae\u0caf\u0003\u0146\u00a3\u0000\u0caf\u0cb0\u0005\u01fd\u0000"+
		"\u0000\u0cb0\u0cb4\u0003\u0192\u00c9\u0000\u0cb1\u0cb3\u0003\u018a\u00c5"+
		"\u0000\u0cb2\u0cb1\u0001\u0000\u0000\u0000\u0cb3\u0cb6\u0001\u0000\u0000"+
		"\u0000\u0cb4\u0cb2\u0001\u0000\u0000\u0000\u0cb4\u0cb5\u0001\u0000\u0000"+
		"\u0000\u0cb5\u018f\u0001\u0000\u0000\u0000\u0cb6\u0cb4\u0001\u0000\u0000"+
		"\u0000\u0cb7\u0cb8\u0005\u00dc\u0000\u0000\u0cb8\u0cba\u0003\u02b0\u0158"+
		"\u0000\u0cb9\u0cb7\u0001\u0000\u0000\u0000\u0cb9\u0cba\u0001\u0000\u0000"+
		"\u0000\u0cba\u0cbb\u0001\u0000\u0000\u0000\u0cbb\u0cbf\u0003\u0192\u00c9"+
		"\u0000\u0cbc\u0cbe\u0003\u018a\u00c5\u0000\u0cbd\u0cbc\u0001\u0000\u0000"+
		"\u0000\u0cbe\u0cc1\u0001\u0000\u0000\u0000\u0cbf\u0cbd\u0001\u0000\u0000"+
		"\u0000\u0cbf\u0cc0\u0001\u0000\u0000\u0000\u0cc0\u0cc2\u0001\u0000\u0000"+
		"\u0000\u0cc1\u0cbf\u0001\u0000\u0000\u0000\u0cc2\u0cc3\u0003\u019a\u00cd"+
		"\u0000\u0cc3\u0191\u0001\u0000\u0000\u0000\u0cc4\u0cc6\u0003\u0194\u00ca"+
		"\u0000\u0cc5\u0cc4\u0001\u0000\u0000\u0000\u0cc5\u0cc6\u0001\u0000\u0000"+
		"\u0000\u0cc6\u0cc7\u0001\u0000\u0000\u0000\u0cc7\u0cc8\u0005q\u0000\u0000"+
		"\u0cc8\u0cc9\u0005-\u0000\u0000\u0cc9\u0cca\u0003\u0196\u00cb\u0000\u0cca"+
		"\u0ccb\u0005\u00e0\u0000\u0000\u0ccb\u0ccc\u0003\u0196\u00cb\u0000\u0ccc"+
		"\u0193\u0001\u0000\u0000\u0000\u0ccd\u0cce\u0005\u0120\u0000\u0000\u0cce"+
		"\u0ccf\u0005-\u0000\u0000\u0ccf\u0cd0\u0003\u0196\u00cb\u0000\u0cd0\u0195"+
		"\u0001\u0000\u0000\u0000\u0cd1\u0cd2\u0005\u01fc\u0000\u0000\u0cd2\u0cd7"+
		"\u0003\u0198\u00cc\u0000\u0cd3\u0cd4\u0005\u0202\u0000\u0000\u0cd4\u0cd6"+
		"\u0003\u0198\u00cc\u0000\u0cd5\u0cd3\u0001\u0000\u0000\u0000\u0cd6\u0cd9"+
		"\u0001\u0000\u0000\u0000\u0cd7\u0cd5\u0001\u0000\u0000\u0000\u0cd7\u0cd8"+
		"\u0001\u0000\u0000\u0000\u0cd8\u0cda\u0001\u0000\u0000\u0000\u0cd9\u0cd7"+
		"\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0005\u01fd\u0000\u0000\u0cdb\u0197"+
		"\u0001\u0000\u0000\u0000\u0cdc\u0cde\u0003\u0200\u0100\u0000\u0cdd\u0cdf"+
		"\u0003\u028c\u0146\u0000\u0cde\u0cdd\u0001\u0000\u0000\u0000\u0cde\u0cdf"+
		"\u0001\u0000\u0000\u0000\u0cdf\u0199\u0001\u0000\u0000\u0000\u0ce0\u0ce2"+
		"\u0003\u019c\u00ce\u0000\u0ce1\u0ce0\u0001\u0000\u0000\u0000\u0ce1\u0ce2"+
		"\u0001\u0000\u0000\u0000\u0ce2\u0ce3\u0001\u0000\u0000\u0000\u0ce3\u0ce4"+
		"\u0005\u01fc\u0000\u0000\u0ce4\u0ce9\u0003\u019e\u00cf\u0000\u0ce5\u0ce6"+
		"\u0005\u0202\u0000\u0000\u0ce6\u0ce8\u0003\u019e\u00cf\u0000\u0ce7\u0ce5"+
		"\u0001\u0000\u0000\u0000\u0ce8\u0ceb\u0001\u0000\u0000\u0000\u0ce9\u0ce7"+
		"\u0001\u0000\u0000\u0000\u0ce9\u0cea\u0001\u0000\u0000\u0000\u0cea\u0cec"+
		"\u0001\u0000\u0000\u0000\u0ceb\u0ce9\u0001\u0000\u0000\u0000\u0cec\u0ced"+
		"\u0005\u01fd\u0000\u0000\u0ced\u019b\u0001\u0000\u0000\u0000\u0cee\u0cf4"+
		"\u0005\u0152\u0000\u0000\u0cef\u0cf5\u0005\u01a5\u0000\u0000\u0cf0\u0cf2"+
		"\u0005\u01a7\u0000\u0000\u0cf1\u0cf3\u0005\r\u0000\u0000\u0cf2\u0cf1\u0001"+
		"\u0000\u0000\u0000\u0cf2\u0cf3\u0001\u0000\u0000\u0000\u0cf3\u0cf5\u0001"+
		"\u0000\u0000\u0000\u0cf4\u0cef\u0001\u0000\u0000\u0000\u0cf4\u0cf0\u0001"+
		"\u0000\u0000\u0000\u0cf4\u0cf5\u0001\u0000\u0000\u0000\u0cf5\u0cf8\u0001"+
		"\u0000\u0000\u0000\u0cf6\u0cf7\u0007%\u0000\u0000\u0cf7\u0cf9\u0005\u0115"+
		"\u0000\u0000\u0cf8\u0cf6\u0001\u0000\u0000\u0000\u0cf8\u0cf9\u0001\u0000"+
		"\u0000\u0000\u0cf9\u0cfb\u0001\u0000\u0000\u0000\u0cfa\u0cfc\u0003\u01a2"+
		"\u00d1\u0000\u0cfb\u0cfa\u0001\u0000\u0000\u0000\u0cfb\u0cfc\u0001\u0000"+
		"\u0000\u0000\u0cfc\u019d\u0001\u0000\u0000\u0000\u0cfd\u0d03\u0005\u01a5"+
		"\u0000\u0000\u0cfe\u0d00\u0005\u01a7\u0000\u0000\u0cff\u0d01\u0005\r\u0000"+
		"\u0000\u0d00\u0cff\u0001\u0000\u0000\u0000\u0d00\u0d01\u0001\u0000\u0000"+
		"\u0000\u0d01\u0d03\u0001\u0000\u0000\u0000\u0d02\u0cfd\u0001\u0000\u0000"+
		"\u0000\u0d02\u0cfe\u0001\u0000\u0000\u0000\u0d02\u0d03\u0001\u0000\u0000"+
		"\u0000\u0d03\u0d04\u0001\u0000\u0000\u0000\u0d04\u0d06\u0003\u01a0\u00d0"+
		"\u0000\u0d05\u0d07\u0003\u01a6\u00d3\u0000\u0d06\u0d05\u0001\u0000\u0000"+
		"\u0000\u0d06\u0d07\u0001\u0000\u0000\u0000\u0d07\u0d08\u0001\u0000\u0000"+
		"\u0000\u0d08\u0d09\u0005\u0213\u0000\u0000\u0d09\u0d0a\u0003\u0200\u0100"+
		"\u0000\u0d0a\u019f\u0001\u0000\u0000\u0000\u0d0b\u0d0c\u0003\u0228\u0114"+
		"\u0000\u0d0c\u01a1\u0001\u0000\u0000\u0000\u0d0d\u0d0e\u0005\u00c4\u0000"+
		"\u0000\u0d0e\u0d0f\u0005\u01fc\u0000\u0000\u0d0f\u0d10\u0003\u0200\u0100"+
		"\u0000\u0d10\u0d12\u0005\u01fd\u0000\u0000\u0d11\u0d13\u0003\u01a4\u00d2"+
		"\u0000\u0d12\u0d11\u0001\u0000\u0000\u0000\u0d12\u0d13\u0001\u0000\u0000"+
		"\u0000\u0d13\u01a3\u0001\u0000\u0000\u0000\u0d14\u0d15\u0005\u01a4\u0000"+
		"\u0000\u0d15\u0d16\u0005\u01fc\u0000\u0000\u0d16\u0d17\u0003\u01fc\u00fe"+
		"\u0000\u0d17\u0d18\u0005\u01fd\u0000\u0000\u0d18\u01a5\u0001\u0000\u0000"+
		"\u0000\u0d19\u0d1b\u0005\u0115\u0000\u0000\u0d1a\u0d1c\u0005\u016b\u0000"+
		"\u0000\u0d1b\u0d1a\u0001\u0000\u0000\u0000\u0d1b\u0d1c\u0001\u0000\u0000"+
		"\u0000\u0d1c\u0d1d\u0001\u0000\u0000\u0000\u0d1d\u0d1e\u0005-\u0000\u0000"+
		"\u0d1e\u0d23\u0003\u01a8\u00d4\u0000\u0d1f\u0d20\u0005\u0202\u0000\u0000"+
		"\u0d20\u0d22\u0003\u01a8\u00d4\u0000\u0d21\u0d1f\u0001\u0000\u0000\u0000"+
		"\u0d22\u0d25\u0001\u0000\u0000\u0000\u0d23\u0d21\u0001\u0000\u0000\u0000"+
		"\u0d23\u0d24\u0001\u0000\u0000\u0000\u0d24\u01a7\u0001\u0000\u0000\u0000"+
		"\u0d25\u0d23\u0001\u0000\u0000\u0000\u0d26\u0d28\u0003\u0200\u0100\u0000"+
		"\u0d27\u0d29\u0007&\u0000\u0000\u0d28\u0d27\u0001\u0000\u0000\u0000\u0d28"+
		"\u0d29\u0001\u0000\u0000\u0000\u0d29\u0d2c\u0001\u0000\u0000\u0000\u0d2a"+
		"\u0d2b\u0005\u0106\u0000\u0000\u0d2b\u0d2d\u0007\'\u0000\u0000\u0d2c\u0d2a"+
		"\u0001\u0000\u0000\u0000\u0d2c\u0d2d\u0001\u0000\u0000\u0000\u0d2d\u01a9"+
		"\u0001\u0000\u0000\u0000\u0d2e\u0d2f\u0005\u009b\u0000\u0000\u0d2f\u0d31"+
		"\u0005\u01a5\u0000\u0000\u0d30\u0d32\u0003\u01ac\u00d6\u0000\u0d31\u0d30"+
		"\u0001\u0000\u0000\u0000\u0d31\u0d32\u0001\u0000\u0000\u0000\u0d32\u0d34"+
		"\u0001\u0000\u0000\u0000\u0d33\u0d35\u0003\u01ae\u00d7\u0000\u0d34\u0d33"+
		"\u0001\u0000\u0000\u0000\u0d34\u0d35\u0001\u0000\u0000\u0000\u0d35\u01ab"+
		"\u0001\u0000\u0000\u0000\u0d36\u0d37\u0005\u010b\u0000\u0000\u0d37\u0d3c"+
		"\u0003\u02d2\u0169\u0000\u0d38\u0d39\u0005\u0202\u0000\u0000\u0d39\u0d3b"+
		"\u0003\u02d2\u0169\u0000\u0d3a\u0d38\u0001\u0000\u0000\u0000\u0d3b\u0d3e"+
		"\u0001\u0000\u0000\u0000\u0d3c\u0d3a\u0001\u0000\u0000\u0000\u0d3c\u0d3d"+
		"\u0001\u0000\u0000\u0000\u0d3d\u01ad\u0001\u0000\u0000\u0000\u0d3e\u0d3c"+
		"\u0001\u0000\u0000\u0000\u0d3f\u0d40\u0005\u0170\u0000\u0000\u0d40\u0d45"+
		"\u0005\u00d6\u0000\u0000\u0d41\u0d45\u0005\u0104\u0000\u0000\u0d42\u0d43"+
		"\u0005\u01b5\u0000\u0000\u0d43\u0d45\u0003\u0200\u0100\u0000\u0d44\u0d3f"+
		"\u0001\u0000\u0000\u0000\u0d44\u0d41\u0001\u0000\u0000\u0000\u0d44\u0d42"+
		"\u0001\u0000\u0000\u0000\u0d45\u01af\u0001\u0000\u0000\u0000\u0d46\u0d47"+
		"\u0005\u01a5\u0000\u0000\u0d47\u0d48\u0003\u01de\u00ef\u0000\u0d48\u0d4a"+
		"\u0003\u01b2\u00d9\u0000\u0d49\u0d4b\u0003\u0290\u0148\u0000\u0d4a\u0d49"+
		"\u0001\u0000\u0000\u0000\u0d4a\u0d4b\u0001\u0000\u0000\u0000\u0d4b\u0d4d"+
		"\u0001\u0000\u0000\u0000\u0d4c\u0d4e\u0003\u01e0\u00f0\u0000\u0d4d\u0d4c"+
		"\u0001\u0000\u0000\u0000\u0d4d\u0d4e\u0001\u0000\u0000\u0000\u0d4e\u0d50"+
		"\u0001\u0000\u0000\u0000\u0d4f\u0d51\u0003\u01e2\u00f1\u0000\u0d50\u0d4f"+
		"\u0001\u0000\u0000\u0000\u0d50\u0d51\u0001\u0000\u0000\u0000\u0d51\u01b1"+
		"\u0001\u0000\u0000\u0000\u0d52\u0d62\u0005\u0165\u0000\u0000\u0d53\u0d58"+
		"\u0003\u01b4\u00da\u0000\u0d54\u0d55\u0005\u0202\u0000\u0000\u0d55\u0d57"+
		"\u0003\u01b4\u00da\u0000\u0d56\u0d54\u0001\u0000\u0000\u0000\u0d57\u0d5a"+
		"\u0001\u0000\u0000\u0000\u0d58\u0d56\u0001\u0000\u0000\u0000\u0d58\u0d59"+
		"\u0001\u0000\u0000\u0000\u0d59\u0d63\u0001\u0000\u0000\u0000\u0d5a\u0d58"+
		"\u0001\u0000\u0000\u0000\u0d5b\u0d5c\u0005\u01ac\u0000\u0000\u0d5c\u0d5d"+
		"\u0005\u01fc\u0000\u0000\u0d5d\u0d5e\u0003\u02fa\u017d\u0000\u0d5e\u0d5f"+
		"\u0005\u01fd\u0000\u0000\u0d5f\u0d60\u0005\u0213\u0000\u0000\u0d60\u0d61"+
		"\u0003\u0200\u0100\u0000\u0d61\u0d63\u0001\u0000\u0000\u0000\u0d62\u0d53"+
		"\u0001\u0000\u0000\u0000\u0d62\u0d5b\u0001\u0000\u0000\u0000\u0d63\u01b3"+
		"\u0001\u0000\u0000\u0000\u0d64\u0d65\u0003\u02d2\u0169\u0000\u0d65\u0d66"+
		"\u0005\u0213\u0000\u0000\u0d66\u0d67\u0003\u0200\u0100\u0000\u0d67\u0d76"+
		"\u0001\u0000\u0000\u0000\u0d68\u0d69\u0005\u01fc\u0000\u0000\u0d69\u0d6e"+
		"\u0003\u02d2\u0169\u0000\u0d6a\u0d6b\u0005\u0202\u0000\u0000\u0d6b\u0d6d"+
		"\u0003\u02d2\u0169\u0000\u0d6c\u0d6a\u0001\u0000\u0000\u0000\u0d6d\u0d70"+
		"\u0001\u0000\u0000\u0000\u0d6e\u0d6c\u0001\u0000\u0000\u0000\u0d6e\u0d6f"+
		"\u0001\u0000\u0000\u0000\u0d6f\u0d71\u0001\u0000\u0000\u0000\u0d70\u0d6e"+
		"\u0001\u0000\u0000\u0000\u0d71\u0d72\u0005\u01fd\u0000\u0000\u0d72\u0d73"+
		"\u0005\u0213\u0000\u0000\u0d73\u0d74\u0003\u0146\u00a3\u0000\u0d74\u0d76"+
		"\u0001\u0000\u0000\u0000\u0d75\u0d64\u0001\u0000\u0000\u0000\u0d75\u0d68"+
		"\u0001\u0000\u0000\u0000\u0d76\u01b5\u0001\u0000\u0000\u0000\u0d77\u0d79"+
		"\u0005m\u0000\u0000\u0d78\u0d7a\u0005\u009e\u0000\u0000\u0d79\u0d78\u0001"+
		"\u0000\u0000\u0000\u0d79\u0d7a\u0001\u0000\u0000\u0000\u0d7a\u0d7b\u0001"+
		"\u0000\u0000\u0000\u0d7b\u0d7d\u0003\u01de\u00ef\u0000\u0d7c\u0d7e\u0003"+
		"\u0290\u0148\u0000\u0d7d\u0d7c\u0001\u0000\u0000\u0000\u0d7d\u0d7e\u0001"+
		"\u0000\u0000\u0000\u0d7e\u0d80\u0001\u0000\u0000\u0000\u0d7f\u0d81\u0003"+
		"\u01e0\u00f0\u0000\u0d80\u0d7f\u0001\u0000\u0000\u0000\u0d80\u0d81\u0001"+
		"\u0000\u0000\u0000\u0d81\u0d83\u0001\u0000\u0000\u0000\u0d82\u0d84\u0003"+
		"\u01e2\u00f1\u0000\u0d83\u0d82\u0001\u0000\u0000\u0000\u0d83\u0d84\u0001"+
		"\u0000\u0000\u0000\u0d84\u01b7\u0001\u0000\u0000\u0000\u0d85\u0d88\u0005"+
		"\u00b9\u0000\u0000\u0d86\u0d89\u0003\u01ba\u00dd\u0000\u0d87\u0d89\u0003"+
		"\u01bc\u00de\u0000\u0d88\u0d86\u0001\u0000\u0000\u0000\u0d88\u0d87\u0001"+
		"\u0000\u0000\u0000\u0d89\u01b9\u0001\u0000\u0000\u0000\u0d8a\u0d90\u0003"+
		"\u01c6\u00e3\u0000\u0d8b\u0d8d\u0003\u01c8\u00e4\u0000\u0d8c\u0d8e\u0003"+
		"\u01e0\u00f0\u0000\u0d8d\u0d8c\u0001\u0000\u0000\u0000\u0d8d\u0d8e\u0001"+
		"\u0000\u0000\u0000\u0d8e\u0d91\u0001\u0000\u0000\u0000\u0d8f\u0d91\u0003"+
		"\u013c\u009e\u0000\u0d90\u0d8b\u0001\u0000\u0000\u0000\u0d90\u0d8f\u0001"+
		"\u0000\u0000\u0000\u0d91\u0d93\u0001\u0000\u0000\u0000\u0d92\u0d94\u0003"+
		"\u01e2\u00f1\u0000\u0d93\u0d92\u0001\u0000\u0000\u0000\u0d93\u0d94\u0001"+
		"\u0000\u0000\u0000\u0d94\u01bb\u0001\u0000\u0000\u0000\u0d95\u0d97\u0005"+
		"\r\u0000\u0000\u0d96\u0d98\u0003\u01be\u00df\u0000\u0d97\u0d96\u0001\u0000"+
		"\u0000\u0000\u0d98\u0d99\u0001\u0000\u0000\u0000\u0d99\u0d97\u0001\u0000"+
		"\u0000\u0000\u0d99\u0d9a\u0001\u0000\u0000\u0000\u0d9a\u0d9d\u0001\u0000"+
		"\u0000\u0000\u0d9b\u0d9d\u0003\u01c0\u00e0\u0000\u0d9c\u0d95\u0001\u0000"+
		"\u0000\u0000\u0d9c\u0d9b\u0001\u0000\u0000\u0000\u0d9d\u0d9e\u0001\u0000"+
		"\u0000\u0000\u0d9e\u0d9f\u0003\u013c\u009e\u0000\u0d9f\u01bd\u0001\u0000"+
		"\u0000\u0000\u0da0\u0da2\u0003\u01c6\u00e3\u0000\u0da1\u0da3\u0003\u01c8"+
		"\u00e4\u0000\u0da2\u0da1\u0001\u0000\u0000\u0000\u0da2\u0da3\u0001\u0000"+
		"\u0000\u0000\u0da3\u0da5\u0001\u0000\u0000\u0000\u0da4\u0da6\u0003\u01e2"+
		"\u00f1\u0000\u0da5\u0da4\u0001\u0000\u0000\u0000\u0da5\u0da6\u0001\u0000"+
		"\u0000\u0000\u0da6\u01bf\u0001\u0000\u0000\u0000\u0da7\u0da9\u0007(\u0000"+
		"\u0000\u0da8\u0da7\u0001\u0000\u0000\u0000\u0da8\u0da9\u0001\u0000\u0000"+
		"\u0000\u0da9\u0dab\u0001\u0000\u0000\u0000\u0daa\u0dac\u0003\u01c2\u00e1"+
		"\u0000\u0dab\u0daa\u0001\u0000\u0000\u0000\u0dac\u0dad\u0001\u0000\u0000"+
		"\u0000\u0dad\u0dab\u0001\u0000\u0000\u0000\u0dad\u0dae\u0001\u0000\u0000"+
		"\u0000\u0dae\u0db0\u0001\u0000\u0000\u0000\u0daf\u0db1\u0003\u01c4\u00e2"+
		"\u0000\u0db0\u0daf\u0001\u0000\u0000\u0000\u0db0\u0db1\u0001\u0000\u0000"+
		"\u0000\u0db1\u01c1\u0001\u0000\u0000\u0000\u0db2\u0db3\u0005\u01b8\u0000"+
		"\u0000\u0db3\u0db4\u0003\u01fc\u00fe\u0000\u0db4\u0db6\u0005\u0188\u0000"+
		"\u0000\u0db5\u0db7\u0003\u01be\u00df\u0000\u0db6\u0db5\u0001\u0000\u0000"+
		"\u0000\u0db7\u0db8\u0001\u0000\u0000\u0000\u0db8\u0db6\u0001\u0000\u0000"+
		"\u0000\u0db8\u0db9\u0001\u0000\u0000\u0000\u0db9\u01c3\u0001\u0000\u0000"+
		"\u0000\u0dba\u0dbc\u0005{\u0000\u0000\u0dbb\u0dbd\u0003\u01be\u00df\u0000"+
		"\u0dbc\u0dbb\u0001\u0000\u0000\u0000\u0dbd\u0dbe\u0001\u0000\u0000\u0000"+
		"\u0dbe\u0dbc\u0001\u0000\u0000\u0000\u0dbe\u0dbf\u0001\u0000\u0000\u0000"+
		"\u0dbf\u01c5\u0001\u0000\u0000\u0000\u0dc0\u0dc1\u0005\u00c0\u0000\u0000"+
		"\u0dc1\u0dcd\u0003\u01de\u00ef\u0000\u0dc2\u0dc3\u0005\u01fc\u0000\u0000"+
		"\u0dc3\u0dc8\u0003\u02d2\u0169\u0000\u0dc4\u0dc5\u0005\u0202\u0000\u0000"+
		"\u0dc5\u0dc7\u0003\u02d2\u0169\u0000\u0dc6\u0dc4\u0001\u0000\u0000\u0000"+
		"\u0dc7\u0dca\u0001\u0000\u0000\u0000\u0dc8\u0dc6\u0001\u0000\u0000\u0000"+
		"\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9\u0dcb\u0001\u0000\u0000\u0000"+
		"\u0dca\u0dc8\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0005\u01fd\u0000\u0000"+
		"\u0dcc\u0dce\u0001\u0000\u0000\u0000\u0dcd\u0dc2\u0001\u0000\u0000\u0000"+
		"\u0dcd\u0dce\u0001\u0000\u0000\u0000\u0dce\u01c7\u0001\u0000\u0000\u0000"+
		"\u0dcf\u0dd3\u0005\u01ad\u0000\u0000\u0dd0\u0dd4\u0003\u01fa\u00fd\u0000"+
		"\u0dd1\u0dd4\u0003\u02cc\u0166\u0000\u0dd2\u0dd4\u0003\u01f6\u00fb\u0000"+
		"\u0dd3\u0dd0\u0001\u0000\u0000\u0000\u0dd3\u0dd1\u0001\u0000\u0000\u0000"+
		"\u0dd3\u0dd2\u0001\u0000\u0000\u0000\u0dd4\u01c9\u0001\u0000\u0000\u0000"+
		"\u0dd5\u0dd6\u0005\u00e2\u0000\u0000\u0dd6\u0dd7\u0005\u00c0\u0000\u0000"+
		"\u0dd7\u0dd9\u0003\u02d4\u016a\u0000\u0dd8\u0dda\u0003\u028c\u0146\u0000"+
		"\u0dd9\u0dd8\u0001\u0000\u0000\u0000\u0dd9\u0dda\u0001\u0000\u0000\u0000"+
		"\u0dda\u0ddb\u0001\u0000\u0000\u0000\u0ddb\u0ddc\u0005\u01aa\u0000\u0000"+
		"\u0ddc\u0ddd\u0003\u01d4\u00ea\u0000\u0ddd\u0dde\u0005\u010f\u0000\u0000"+
		"\u0dde\u0ddf\u0005\u01fc\u0000\u0000\u0ddf\u0de0\u0003\u01fc\u00fe\u0000"+
		"\u0de0\u0de9\u0005\u01fd\u0000\u0000\u0de1\u0de3\u0003\u01cc\u00e6\u0000"+
		"\u0de2\u0de4\u0003\u01d2\u00e9\u0000\u0de3\u0de2\u0001\u0000\u0000\u0000"+
		"\u0de3\u0de4\u0001\u0000\u0000\u0000\u0de4\u0dea\u0001\u0000\u0000\u0000"+
		"\u0de5\u0de7\u0003\u01d2\u00e9\u0000\u0de6\u0de8\u0003\u01cc\u00e6\u0000"+
		"\u0de7\u0de6\u0001\u0000\u0000\u0000\u0de7\u0de8\u0001\u0000\u0000\u0000"+
		"\u0de8\u0dea\u0001\u0000\u0000\u0000\u0de9\u0de1\u0001\u0000\u0000\u0000"+
		"\u0de9\u0de5\u0001\u0000\u0000\u0000\u0de9\u0dea\u0001\u0000\u0000\u0000"+
		"\u0dea\u0dec\u0001\u0000\u0000\u0000\u0deb\u0ded\u0003\u01e2\u00f1\u0000"+
		"\u0dec\u0deb\u0001\u0000\u0000\u0000\u0dec\u0ded\u0001\u0000\u0000\u0000"+
		"\u0ded\u01cb\u0001\u0000\u0000\u0000\u0dee\u0def\u0005\u01b8\u0000\u0000"+
		"\u0def\u0df0\u0005\u00de\u0000\u0000\u0df0\u0df1\u0005\u0188\u0000\u0000"+
		"\u0df1\u0df2\u0005\u01a5\u0000\u0000\u0df2\u0df3\u0005\u0165\u0000\u0000"+
		"\u0df3\u0df8\u0003\u01ce\u00e7\u0000\u0df4\u0df5\u0005\u0202\u0000\u0000"+
		"\u0df5\u0df7\u0003\u01ce\u00e7\u0000\u0df6\u0df4\u0001\u0000\u0000\u0000"+
		"\u0df7\u0dfa\u0001\u0000\u0000\u0000\u0df8\u0df6\u0001\u0000\u0000\u0000"+
		"\u0df8\u0df9\u0001\u0000\u0000\u0000\u0df9\u0dfc\u0001\u0000\u0000\u0000"+
		"\u0dfa\u0df8\u0001\u0000\u0000\u0000\u0dfb\u0dfd\u0003\u0290\u0148\u0000"+
		"\u0dfc\u0dfb\u0001\u0000\u0000\u0000\u0dfc\u0dfd\u0001\u0000\u0000\u0000"+
		"\u0dfd\u0dff\u0001\u0000\u0000\u0000\u0dfe\u0e00\u0003\u01d0\u00e8\u0000"+
		"\u0dff\u0dfe\u0001\u0000\u0000\u0000\u0dff\u0e00\u0001\u0000\u0000\u0000"+
		"\u0e00\u01cd\u0001\u0000\u0000\u0000\u0e01\u0e02\u0003\u02d2\u0169\u0000"+
		"\u0e02\u0e03\u0005\u0213\u0000\u0000\u0e03\u0e04\u0003\u0200\u0100\u0000"+
		"\u0e04\u01cf\u0001\u0000\u0000\u0000\u0e05\u0e06\u0005m\u0000\u0000\u0e06"+
		"\u0e07\u0003\u0290\u0148\u0000\u0e07\u01d1\u0001\u0000\u0000\u0000\u0e08"+
		"\u0e09\u0005\u01b8\u0000\u0000\u0e09\u0e0a\u0005\u0103\u0000\u0000\u0e0a"+
		"\u0e0b\u0005\u00de\u0000\u0000\u0e0b\u0e0c\u0005\u0188\u0000\u0000\u0e0c"+
		"\u0e18\u0005\u00b9\u0000\u0000\u0e0d\u0e0e\u0005\u01fc\u0000\u0000\u0e0e"+
		"\u0e13\u0003\u02d2\u0169\u0000\u0e0f\u0e10\u0005\u0202\u0000\u0000\u0e10"+
		"\u0e12\u0003\u02d2\u0169\u0000\u0e11\u0e0f\u0001\u0000\u0000\u0000\u0e12"+
		"\u0e15\u0001\u0000\u0000\u0000\u0e13\u0e11\u0001\u0000\u0000\u0000\u0e13"+
		"\u0e14\u0001\u0000\u0000\u0000\u0e14\u0e16\u0001\u0000\u0000\u0000\u0e15"+
		"\u0e13\u0001\u0000\u0000\u0000\u0e16\u0e17\u0005\u01fd\u0000\u0000\u0e17"+
		"\u0e19\u0001\u0000\u0000\u0000\u0e18\u0e0d\u0001\u0000\u0000\u0000\u0e18"+
		"\u0e19\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0001\u0000\u0000\u0000\u0e1a"+
		"\u0e1b\u0005\u01ad\u0000\u0000\u0e1b\u0e1d\u0003\u01fa\u00fd\u0000\u0e1c"+
		"\u0e1e\u0003\u0290\u0148\u0000\u0e1d\u0e1c\u0001\u0000\u0000\u0000\u0e1d"+
		"\u0e1e\u0001\u0000\u0000\u0000\u0e1e\u01d3\u0001\u0000\u0000\u0000\u0e1f"+
		"\u0e25\u0003\u02d4\u016a\u0000\u0e20\u0e21\u0005\u01fc\u0000\u0000\u0e21"+
		"\u0e22\u0003\u013c\u009e\u0000\u0e22\u0e23\u0005\u01fd\u0000\u0000\u0e23"+
		"\u0e25\u0001\u0000\u0000\u0000\u0e24\u0e1f\u0001\u0000\u0000\u0000\u0e24"+
		"\u0e20\u0001\u0000\u0000\u0000\u0e25\u0e27\u0001\u0000\u0000\u0000\u0e26"+
		"\u0e28\u0003\u028c\u0146\u0000\u0e27\u0e26\u0001\u0000\u0000\u0000\u0e27"+
		"\u0e28\u0001\u0000\u0000\u0000\u0e28\u01d5\u0001\u0000\u0000\u0000\u0e29"+
		"\u0e2a\u0005\u00d5\u0000\u0000\u0e2a\u0e2b\u0005\u0186\u0000\u0000\u0e2b"+
		"\u0e30\u0003\u01da\u00ed\u0000\u0e2c\u0e2d\u0005\u0202\u0000\u0000\u0e2d"+
		"\u0e2f\u0003\u01da\u00ed\u0000\u0e2e\u0e2c\u0001\u0000\u0000\u0000\u0e2f"+
		"\u0e32\u0001\u0000\u0000\u0000\u0e30\u0e2e\u0001\u0000\u0000\u0000\u0e30"+
		"\u0e31\u0001\u0000\u0000\u0000\u0e31\u0e33\u0001\u0000\u0000\u0000\u0e32"+
		"\u0e30\u0001\u0000\u0000\u0000\u0e33\u0e34\u0005\u00ac\u0000\u0000\u0e34"+
		"\u0e35\u0003\u01dc\u00ee\u0000\u0e35\u0e37\u0005\u00e8\u0000\u0000\u0e36"+
		"\u0e38\u0003\u01d8\u00ec\u0000\u0e37\u0e36\u0001\u0000\u0000\u0000\u0e37"+
		"\u0e38\u0001\u0000\u0000\u0000\u0e38\u01d7\u0001\u0000\u0000\u0000\u0e39"+
		"\u0e3a\u0005\u01b5\u0000\u0000\u0e3a\u0e3d\u0003\u0200\u0100\u0000\u0e3b"+
		"\u0e3d\u0005\u0104\u0000\u0000\u0e3c\u0e39\u0001\u0000\u0000\u0000\u0e3c"+
		"\u0e3b\u0001\u0000\u0000\u0000\u0e3d\u01d9\u0001\u0000\u0000\u0000\u0e3e"+
		"\u0e40\u0003\u02d4\u016a\u0000\u0e3f\u0e41\u0003\u0288\u0144\u0000\u0e40"+
		"\u0e3f\u0001\u0000\u0000\u0000\u0e40\u0e41\u0001\u0000\u0000\u0000\u0e41"+
		"\u01db\u0001\u0000\u0000\u0000\u0e42\u0e43\u0005\u014f\u0000\u0000\u0e43"+
		"\u0e4f\u0005\u0168\u0000\u0000\u0e44\u0e45\u0005\u014f\u0000\u0000\u0e45"+
		"\u0e4f\u0005\u008a\u0000\u0000\u0e46\u0e48\u0005\u0168\u0000\u0000\u0e47"+
		"\u0e49\u0005\u01a5\u0000\u0000\u0e48\u0e47\u0001\u0000\u0000\u0000\u0e48"+
		"\u0e49\u0001\u0000\u0000\u0000\u0e49\u0e4f\u0001\u0000\u0000\u0000\u0e4a"+
		"\u0e4b\u0005\u0168\u0000\u0000\u0e4b\u0e4c\u0005\u014f\u0000\u0000\u0e4c"+
		"\u0e4f\u0005\u008a\u0000\u0000\u0e4d\u0e4f\u0005\u008a\u0000\u0000\u0e4e"+
		"\u0e42\u0001\u0000\u0000\u0000\u0e4e\u0e44\u0001\u0000\u0000\u0000\u0e4e"+
		"\u0e46\u0001\u0000\u0000\u0000\u0e4e\u0e4a\u0001\u0000\u0000\u0000\u0e4e"+
		"\u0e4d\u0001\u0000\u0000\u0000\u0e4f\u01dd\u0001\u0000\u0000\u0000\u0e50"+
		"\u0e57\u0003\u01e8\u00f4\u0000\u0e51\u0e52\u0005\u0110\u0000\u0000\u0e52"+
		"\u0e53\u0005\u01fc\u0000\u0000\u0e53\u0e54\u0003\u01e8\u00f4\u0000\u0e54"+
		"\u0e55\u0005\u01fd\u0000\u0000\u0e55\u0e57\u0001\u0000\u0000\u0000\u0e56"+
		"\u0e50\u0001\u0000\u0000\u0000\u0e56\u0e51\u0001\u0000\u0000\u0000\u0e57"+
		"\u0e59\u0001\u0000\u0000\u0000\u0e58\u0e5a\u0003\u028c\u0146\u0000\u0e59"+
		"\u0e58\u0001\u0000\u0000\u0000\u0e59\u0e5a\u0001\u0000\u0000\u0000\u0e5a"+
		"\u01df\u0001\u0000\u0000\u0000\u0e5b\u0e5c\u0007\u0015\u0000\u0000\u0e5c"+
		"\u0e61\u0003\u0200\u0100\u0000\u0e5d\u0e5e\u0005\u0202\u0000\u0000\u0e5e"+
		"\u0e60\u0003\u0200\u0100\u0000\u0e5f\u0e5d\u0001\u0000\u0000\u0000\u0e60"+
		"\u0e63\u0001\u0000\u0000\u0000\u0e61\u0e5f\u0001\u0000\u0000\u0000\u0e61"+
		"\u0e62\u0001\u0000\u0000\u0000\u0e62\u0e64\u0001\u0000\u0000\u0000\u0e63"+
		"\u0e61\u0001\u0000\u0000\u0000\u0e64\u0e65\u0003\u0296\u014b\u0000\u0e65"+
		"\u01e1\u0001\u0000\u0000\u0000\u0e66\u0e67\u0005\u00d7\u0000\u0000\u0e67"+
		"\u0e69\u0005\u0082\u0000\u0000\u0e68\u0e6a\u0003\u01e4\u00f2\u0000\u0e69"+
		"\u0e68\u0001\u0000\u0000\u0000\u0e69\u0e6a\u0001\u0000\u0000\u0000\u0e6a"+
		"\u0e6c\u0001\u0000\u0000\u0000\u0e6b\u0e6d\u0003\u0202\u0101\u0000\u0e6c"+
		"\u0e6b\u0001\u0000\u0000\u0000\u0e6c\u0e6d\u0001\u0000\u0000\u0000\u0e6d"+
		"\u0e6f\u0001\u0000\u0000\u0000\u0e6e\u0e70\u0003\u01e6\u00f3\u0000\u0e6f"+
		"\u0e6e\u0001\u0000\u0000\u0000\u0e6f\u0e70\u0001\u0000\u0000\u0000\u0e70"+
		"\u01e3\u0001\u0000\u0000\u0000\u0e71\u0e72\u0005\u00c0\u0000\u0000\u0e72"+
		"\u0e73\u0003\u02d4\u016a\u0000\u0e73\u01e5\u0001\u0000\u0000\u0000\u0e74"+
		"\u0e75\u0005\u013f\u0000\u0000\u0e75\u0e78\u0005\u00d3\u0000\u0000\u0e76"+
		"\u0e79\u0005\u01a2\u0000\u0000\u0e77\u0e79\u0003\u0202\u0101\u0000\u0e78"+
		"\u0e76\u0001\u0000\u0000\u0000\u0e78\u0e77\u0001\u0000\u0000\u0000\u0e79"+
		"\u01e7\u0001\u0000\u0000\u0000\u0e7a\u0e87\u0003\u01ea\u00f5\u0000\u0e7b"+
		"\u0e7c\u0005\u01fc\u0000\u0000\u0e7c\u0e7e\u0003\u013c\u009e\u0000\u0e7d"+
		"\u0e7f\u0003\u01ec\u00f6\u0000\u0e7e\u0e7d\u0001\u0000\u0000\u0000\u0e7e"+
		"\u0e7f\u0001\u0000\u0000\u0000\u0e7f\u0e80\u0001\u0000\u0000\u0000\u0e80"+
		"\u0e81\u0005\u01fd\u0000\u0000\u0e81\u0e87\u0001\u0000\u0000\u0000\u0e82"+
		"\u0e84\u0003\u02d4\u016a\u0000\u0e83\u0e85\u0003\u01ee\u00f7\u0000\u0e84"+
		"\u0e83\u0001\u0000\u0000\u0000\u0e84\u0e85\u0001\u0000\u0000\u0000\u0e85"+
		"\u0e87\u0001\u0000\u0000\u0000\u0e86\u0e7a\u0001\u0000\u0000\u0000\u0e86"+
		"\u0e7b\u0001\u0000\u0000\u0000\u0e86\u0e82\u0001\u0000\u0000\u0000\u0e87"+
		"\u01e9\u0001\u0000\u0000\u0000\u0e88\u0e95\u0007)\u0000\u0000\u0e89\u0e8a"+
		"\u0005\u01fc\u0000\u0000\u0e8a\u0e8b\u0003\u0146\u00a3\u0000\u0e8b\u0e8c"+
		"\u0005\u01fd\u0000\u0000\u0e8c\u0e96\u0001\u0000\u0000\u0000\u0e8d\u0e8e"+
		"\u0005\u01fc\u0000\u0000\u0e8e\u0e8f\u0003\u0200\u0100\u0000\u0e8f\u0e93"+
		"\u0005\u01fd\u0000\u0000\u0e90\u0e91\u0005\u01fc\u0000\u0000\u0e91\u0e92"+
		"\u0005\u0200\u0000\u0000\u0e92\u0e94\u0005\u01fd\u0000\u0000\u0e93\u0e90"+
		"\u0001\u0000\u0000\u0000\u0e93\u0e94\u0001\u0000\u0000\u0000\u0e94\u0e96"+
		"\u0001\u0000\u0000\u0000\u0e95\u0e89\u0001\u0000\u0000\u0000\u0e95\u0e8d"+
		"\u0001\u0000\u0000\u0000\u0e96\u01eb\u0001\u0000\u0000\u0000\u0e97\u0ea0"+
		"\u0005\u01bc\u0000\u0000\u0e98\u0e99\u0005\u0139\u0000\u0000\u0e99\u0ea1"+
		"\u0005\u0110\u0000\u0000\u0e9a\u0e9b\u00059\u0000\u0000\u0e9b\u0e9e\u0005"+
		"\u0112\u0000\u0000\u0e9c\u0e9d\u0005I\u0000\u0000\u0e9d\u0e9f\u0003\u02b6"+
		"\u015b\u0000\u0e9e\u0e9c\u0001\u0000\u0000\u0000\u0e9e\u0e9f\u0001\u0000"+
		"\u0000\u0000\u0e9f\u0ea1\u0001\u0000\u0000\u0000\u0ea0\u0e98\u0001\u0000"+
		"\u0000\u0000\u0ea0\u0e9a\u0001\u0000\u0000\u0000\u0ea1\u01ed\u0001\u0000"+
		"\u0000\u0000\u0ea2\u0ea4\u0005\u0153\u0000\u0000\u0ea3\u0ea5\u0005\'\u0000"+
		"\u0000\u0ea4\u0ea3\u0001\u0000\u0000\u0000\u0ea4\u0ea5\u0001\u0000\u0000"+
		"\u0000\u0ea5\u0ea6\u0001\u0000\u0000\u0000\u0ea6\u0ea7\u0005\u01fc\u0000"+
		"\u0000\u0ea7\u0eaa\u0003\u0200\u0100\u0000\u0ea8\u0ea9\u0005\u0202\u0000"+
		"\u0000\u0ea9\u0eab\u0003\u0200\u0100\u0000\u0eaa\u0ea8\u0001\u0000\u0000"+
		"\u0000\u0eaa\u0eab\u0001\u0000\u0000\u0000\u0eab\u0eac\u0001\u0000\u0000"+
		"\u0000\u0eac\u0eae\u0005\u01fd\u0000\u0000\u0ead\u0eaf\u0003\u01f0\u00f8"+
		"\u0000\u0eae\u0ead\u0001\u0000\u0000\u0000\u0eae\u0eaf\u0001\u0000\u0000"+
		"\u0000\u0eaf\u01ef\u0001\u0000\u0000\u0000\u0eb0\u0eb1\u0005\u015b\u0000"+
		"\u0000\u0eb1\u0eb2\u0005\u01fc\u0000\u0000\u0eb2\u0eb3\u0003\u0200\u0100"+
		"\u0000\u0eb3\u0eb4\u0005\u01fd\u0000\u0000\u0eb4\u01f1\u0001\u0000\u0000"+
		"\u0000\u0eb5\u0eb6\u0005Y\u0000\u0000\u0eb6\u0eb7\u0005\u01fc\u0000\u0000"+
		"\u0eb7\u0eb8\u0003\u0146\u00a3\u0000\u0eb8\u0eb9\u0005\u01fd\u0000\u0000"+
		"\u0eb9\u0ec8\u0001\u0000\u0000\u0000\u0eba\u0ebb\u0003\u02ca\u0165\u0000"+
		"\u0ebb\u0ebc\u0005\u0127\u0000\u0000\u0ebc\u0ec8\u0001\u0000\u0000\u0000"+
		"\u0ebd\u0ebe\u0003\u02ca\u0165\u0000\u0ebe\u0ebf\u0005\u0126\u0000\u0000"+
		"\u0ebf\u0ec8\u0001\u0000\u0000\u0000\u0ec0\u0ec1\u0003\u02ca\u0165\u0000"+
		"\u0ec1\u0ec2\u0005\u0123\u0000\u0000\u0ec2\u0ec8\u0001\u0000\u0000\u0000"+
		"\u0ec3\u0ec4\u0003\u02ca\u0165\u0000\u0ec4\u0ec5\u0005\u0128\u0000\u0000"+
		"\u0ec5\u0ec8\u0001\u0000\u0000\u0000\u0ec6\u0ec8\u0003\u01f4\u00fa\u0000"+
		"\u0ec7\u0eb5\u0001\u0000\u0000\u0000\u0ec7\u0eba\u0001\u0000\u0000\u0000"+
		"\u0ec7\u0ebd\u0001\u0000\u0000\u0000\u0ec7\u0ec0\u0001\u0000\u0000\u0000"+
		"\u0ec7\u0ec3\u0001\u0000\u0000\u0000\u0ec7\u0ec6\u0001\u0000\u0000\u0000"+
		"\u0ec8\u01f3\u0001\u0000\u0000\u0000\u0ec9\u0eca\u0005\u0177\u0000\u0000"+
		"\u0eca\u01f5\u0001\u0000\u0000\u0000\u0ecb\u0ed2\u0003\u02ce\u0167\u0000"+
		"\u0ecc\u0ecd\u0005\u01fc\u0000\u0000\u0ecd\u0ece\u0003\u0200\u0100\u0000"+
		"\u0ece\u0ecf\u0005\u01fd\u0000\u0000\u0ecf\u0ed1\u0001\u0000\u0000\u0000"+
		"\u0ed0\u0ecc\u0001\u0000\u0000\u0000\u0ed1\u0ed4\u0001\u0000\u0000\u0000"+
		"\u0ed2\u0ed0\u0001\u0000\u0000\u0000\u0ed2\u0ed3\u0001\u0000\u0000\u0000"+
		"\u0ed3\u0ed7\u0001\u0000\u0000\u0000\u0ed4\u0ed2\u0001\u0000\u0000\u0000"+
		"\u0ed5\u0ed6\u0005\u01f5\u0000\u0000\u0ed6\u0ed8\u0003\u02c6\u0163\u0000"+
		"\u0ed7\u0ed5\u0001\u0000\u0000\u0000\u0ed7\u0ed8\u0001\u0000\u0000\u0000"+
		"\u0ed8\u01f7\u0001\u0000\u0000\u0000\u0ed9\u0f00\u0003\u01f6\u00fb\u0000"+
		"\u0eda\u0edb\u0003\u01f6\u00fb\u0000\u0edb\u0edc\u0005\u01f5\u0000\u0000"+
		"\u0edc\u0edd\u0005\u0096\u0000\u0000\u0edd\u0f00\u0001\u0000\u0000\u0000"+
		"\u0ede\u0edf\u0003\u01f6\u00fb\u0000\u0edf\u0ee0\u0005\u01f5\u0000\u0000"+
		"\u0ee0\u0ee1\u0005\u00c9\u0000\u0000\u0ee1\u0f00\u0001\u0000\u0000\u0000"+
		"\u0ee2\u0ee3\u0003\u01f6\u00fb\u0000\u0ee3\u0ee4\u0005\u01f5\u0000\u0000"+
		"\u0ee4\u0ee5\u0005\u008c\u0000\u0000\u0ee5\u0ee6\u0005\u01fc\u0000\u0000"+
		"\u0ee6\u0ee7\u0003\u0200\u0100\u0000\u0ee7\u0ee8\u0005\u01fd\u0000\u0000"+
		"\u0ee8\u0f00\u0001\u0000\u0000\u0000\u0ee9\u0eea\u0003\u01f6\u00fb\u0000"+
		"\u0eea\u0eeb\u0005\u01f5\u0000\u0000\u0eeb\u0eec\u0005\u0134\u0000\u0000"+
		"\u0eec\u0eed\u0005\u01fc\u0000\u0000\u0eed\u0eee\u0003\u0200\u0100\u0000"+
		"\u0eee\u0eef\u0005\u01fd\u0000\u0000\u0eef\u0f00\u0001\u0000\u0000\u0000"+
		"\u0ef0\u0ef1\u0003\u01f6\u00fb\u0000\u0ef1\u0ef2\u0005\u01f5\u0000\u0000"+
		"\u0ef2\u0ef3\u0005\u00f7\u0000\u0000\u0ef3\u0ef4\u0005\u01fc\u0000\u0000"+
		"\u0ef4\u0ef5\u0003\u0200\u0100\u0000\u0ef5\u0ef6\u0005\u01fd\u0000\u0000"+
		"\u0ef6\u0f00\u0001\u0000\u0000\u0000\u0ef7\u0ef8\u0003\u01f6\u00fb\u0000"+
		"\u0ef8\u0ef9\u0005\u01f5\u0000\u0000\u0ef9\u0efa\u0005S\u0000\u0000\u0efa"+
		"\u0f00\u0001\u0000\u0000\u0000\u0efb\u0efc\u0003\u01f6\u00fb\u0000\u0efc"+
		"\u0efd\u0005\u01f5\u0000\u0000\u0efd\u0efe\u0005\u00d3\u0000\u0000\u0efe"+
		"\u0f00\u0001\u0000\u0000\u0000\u0eff\u0ed9\u0001\u0000\u0000\u0000\u0eff"+
		"\u0eda\u0001\u0000\u0000\u0000\u0eff\u0ede\u0001\u0000\u0000\u0000\u0eff"+
		"\u0ee2\u0001\u0000\u0000\u0000\u0eff\u0ee9\u0001\u0000\u0000\u0000\u0eff"+
		"\u0ef0\u0001\u0000\u0000\u0000\u0eff\u0ef7\u0001\u0000\u0000\u0000\u0eff"+
		"\u0efb\u0001\u0000\u0000\u0000\u0f00\u01f9\u0001\u0000\u0000\u0000\u0f01"+
		"\u0f03\u0005\u01fc\u0000\u0000\u0f02\u0f04\u0003\u0200\u0100\u0000\u0f03"+
		"\u0f02\u0001\u0000\u0000\u0000\u0f03\u0f04\u0001\u0000\u0000\u0000\u0f04"+
		"\u0f09\u0001\u0000\u0000\u0000\u0f05\u0f06\u0005\u0202\u0000\u0000\u0f06"+
		"\u0f08\u0003\u0200\u0100\u0000\u0f07\u0f05\u0001\u0000\u0000\u0000\u0f08"+
		"\u0f0b\u0001\u0000\u0000\u0000\u0f09\u0f07\u0001\u0000\u0000\u0000\u0f09"+
		"\u0f0a\u0001\u0000\u0000\u0000\u0f0a\u0f0c\u0001\u0000\u0000\u0000\u0f0b"+
		"\u0f09\u0001\u0000\u0000\u0000\u0f0c\u0f0d\u0005\u01fd\u0000\u0000\u0f0d"+
		"\u01fb\u0001\u0000\u0000\u0000\u0f0e\u0f0f\u0003\u0200\u0100\u0000\u0f0f"+
		"\u01fd\u0001\u0000\u0000\u0000\u0f10\u0f11\u0003\u0200\u0100\u0000\u0f11"+
		"\u01ff\u0001\u0000\u0000\u0000\u0f12\u0f17\u0003\u0204\u0102\u0000\u0f13"+
		"\u0f14\u0005\u0113\u0000\u0000\u0f14\u0f16\u0003\u0200\u0100\u0000\u0f15"+
		"\u0f13\u0001\u0000\u0000\u0000\u0f16\u0f19\u0001\u0000\u0000\u0000\u0f17"+
		"\u0f15\u0001\u0000\u0000\u0000\u0f17\u0f18\u0001\u0000\u0000\u0000\u0f18"+
		"\u0201\u0001\u0000\u0000\u0000\u0f19\u0f17\u0001\u0000\u0000\u0000\u0f1a"+
		"\u0f1b\u0003\u0200\u0100\u0000\u0f1b\u0203\u0001\u0000\u0000\u0000\u0f1c"+
		"\u0f21\u0003\u0206\u0103\u0000\u0f1d\u0f1e\u0005\u0010\u0000\u0000\u0f1e"+
		"\u0f20\u0003\u0206\u0103\u0000\u0f1f\u0f1d\u0001\u0000\u0000\u0000\u0f20"+
		"\u0f23\u0001\u0000\u0000\u0000\u0f21\u0f1f\u0001\u0000\u0000\u0000\u0f21"+
		"\u0f22\u0001\u0000\u0000\u0000\u0f22\u0205\u0001\u0000\u0000\u0000\u0f23"+
		"\u0f21\u0001\u0000\u0000\u0000\u0f24\u0f25\u0005\u0103\u0000\u0000\u0f25"+
		"\u0f28\u0003\u0206\u0103\u0000\u0f26\u0f28\u0003\u0208\u0104\u0000\u0f27"+
		"\u0f24\u0001\u0000\u0000\u0000\u0f27\u0f26\u0001\u0000\u0000\u0000\u0f28"+
		"\u0207\u0001\u0000\u0000\u0000\u0f29\u0f51\u0003\u01f8\u00fc\u0000\u0f2a"+
		"\u0f4c\u0003\u020c\u0106\u0000\u0f2b\u0f2d\u0005\u00c2\u0000\u0000\u0f2c"+
		"\u0f2e\u0005\u0103\u0000\u0000\u0f2d\u0f2c\u0001\u0000\u0000\u0000\u0f2d"+
		"\u0f2e\u0001\u0000\u0000\u0000\u0f2e\u0f48\u0001\u0000\u0000\u0000\u0f2f"+
		"\u0f49\u0005\u0105\u0000\u0000\u0f30\u0f49\u0005\u00ee\u0000\u0000\u0f31"+
		"\u0f49\u0005\u0133\u0000\u0000\u0f32\u0f49\u0005\u00b5\u0000\u0000\u0f33"+
		"\u0f34\u0005\b\u0000\u0000\u0f34\u0f49\u0005\u0165\u0000\u0000\u0f35\u0f49"+
		"\u0005}\u0000\u0000\u0f36\u0f38\u0005\u010b\u0000\u0000\u0f37\u0f39\u0005"+
		"\u019d\u0000\u0000\u0f38\u0f37\u0001\u0000\u0000\u0000\u0f38\u0f39\u0001"+
		"\u0000\u0000\u0000\u0f39\u0f3a\u0001\u0000\u0000\u0000\u0f3a\u0f3c\u0005"+
		"\u01fc\u0000\u0000\u0f3b\u0f3d\u0005\u0110\u0000\u0000\u0f3c\u0f3b\u0001"+
		"\u0000\u0000\u0000\u0f3c\u0f3d\u0001\u0000\u0000\u0000\u0f3d\u0f3e\u0001"+
		"\u0000\u0000\u0000\u0f3e\u0f43\u0003\u02e4\u0172\u0000\u0f3f\u0f40\u0005"+
		"\u0202\u0000\u0000\u0f40\u0f42\u0003\u02e4\u0172\u0000\u0f41\u0f3f\u0001"+
		"\u0000\u0000\u0000\u0f42\u0f45\u0001\u0000\u0000\u0000\u0f43\u0f41\u0001"+
		"\u0000\u0000\u0000\u0f43\u0f44\u0001\u0000\u0000\u0000\u0f44\u0f46\u0001"+
		"\u0000\u0000\u0000\u0f45\u0f43\u0001\u0000\u0000\u0000\u0f46\u0f47\u0005"+
		"\u01fd\u0000\u0000\u0f47\u0f49\u0001\u0000\u0000\u0000\u0f48\u0f2f\u0001"+
		"\u0000\u0000\u0000\u0f48\u0f30\u0001\u0000\u0000\u0000\u0f48\u0f31\u0001"+
		"\u0000\u0000\u0000\u0f48\u0f32\u0001\u0000\u0000\u0000\u0f48\u0f33\u0001"+
		"\u0000\u0000\u0000\u0f48\u0f35\u0001\u0000\u0000\u0000\u0f48\u0f36\u0001"+
		"\u0000\u0000\u0000\u0f49\u0f4b\u0001\u0000\u0000\u0000\u0f4a\u0f2b\u0001"+
		"\u0000\u0000\u0000\u0f4b\u0f4e\u0001\u0000\u0000\u0000\u0f4c\u0f4a\u0001"+
		"\u0000\u0000\u0000\u0f4c\u0f4d\u0001\u0000\u0000\u0000\u0f4d\u0f51\u0001"+
		"\u0000\u0000\u0000\u0f4e\u0f4c\u0001\u0000\u0000\u0000\u0f4f\u0f51\u0003"+
		"\u01f2\u00f9\u0000\u0f50\u0f29\u0001\u0000\u0000\u0000\u0f50\u0f2a\u0001"+
		"\u0000\u0000\u0000\u0f50\u0f4f\u0001\u0000\u0000\u0000\u0f51\u0209\u0001"+
		"\u0000\u0000\u0000\u0f52\u0f56\u0003\u02ce\u0167\u0000\u0f53\u0f56\u0003"+
		"\u01f6\u00fb\u0000\u0f54\u0f56\u0003\u010a\u0085\u0000\u0f55\u0f52\u0001"+
		"\u0000\u0000\u0000\u0f55\u0f53\u0001\u0000\u0000\u0000\u0f55\u0f54\u0001"+
		"\u0000\u0000\u0000\u0f56\u020b\u0001\u0000\u0000\u0000\u0f57\u0f5e\u0003"+
		"\u020a\u0105\u0000\u0f58\u0f59\u0005\u00ec\u0000\u0000\u0f59\u0f5b\u0007"+
		"*\u0000\u0000\u0f5a\u0f5c\u0007+\u0000\u0000\u0f5b\u0f5a\u0001\u0000\u0000"+
		"\u0000\u0f5b\u0f5c\u0001\u0000\u0000\u0000\u0f5c\u0f5d\u0001\u0000\u0000"+
		"\u0000\u0f5d\u0f5f\u0003\u020a\u0105\u0000\u0f5e\u0f58\u0001\u0000\u0000"+
		"\u0000\u0f5f\u0f60\u0001\u0000\u0000\u0000\u0f60\u0f5e\u0001\u0000\u0000"+
		"\u0000\u0f60\u0f61\u0001\u0000\u0000\u0000\u0f61\u0f6f\u0001\u0000\u0000"+
		"\u0000\u0f62\u0f6c\u0003\u0210\u0108\u0000\u0f63\u0f65\u0005\u0103\u0000"+
		"\u0000\u0f64\u0f63\u0001\u0000\u0000\u0000\u0f64\u0f65\u0001\u0000\u0000"+
		"\u0000\u0f65\u0f66\u0001\u0000\u0000\u0000\u0f66\u0f68\u0003\u020e\u0107"+
		"\u0000\u0f67\u0f69\u0005\u010b\u0000\u0000\u0f68\u0f67\u0001\u0000\u0000"+
		"\u0000\u0f68\u0f69\u0001\u0000\u0000\u0000\u0f69\u0f6a\u0001\u0000\u0000"+
		"\u0000\u0f6a\u0f6b\u0003\u021c\u010e\u0000\u0f6b\u0f6d\u0001\u0000\u0000"+
		"\u0000\u0f6c\u0f64\u0001\u0000\u0000\u0000\u0f6c\u0f6d\u0001\u0000\u0000"+
		"\u0000\u0f6d\u0f6f\u0001\u0000\u0000\u0000\u0f6e\u0f57\u0001\u0000\u0000"+
		"\u0000\u0f6e\u0f62\u0001\u0000\u0000\u0000\u0f6f\u020d\u0001\u0000\u0000"+
		"\u0000\u0f70\u0f71\u0007,\u0000\u0000\u0f71\u020f\u0001\u0000\u0000\u0000"+
		"\u0f72\u0f7e\u0003\u0212\u0109\u0000\u0f73\u0f7a\u0005\u0213\u0000\u0000"+
		"\u0f74\u0f7a\u0003\u02fe\u017f\u0000\u0f75\u0f7a\u0005\u020a\u0000\u0000"+
		"\u0f76\u0f7a\u0005\u0210\u0000\u0000\u0f77\u0f7a\u0003\u0302\u0181\u0000"+
		"\u0f78\u0f7a\u0003\u0300\u0180\u0000\u0f79\u0f73\u0001\u0000\u0000\u0000"+
		"\u0f79\u0f74\u0001\u0000\u0000\u0000\u0f79\u0f75\u0001\u0000\u0000\u0000"+
		"\u0f79\u0f76\u0001\u0000\u0000\u0000\u0f79\u0f77\u0001\u0000\u0000\u0000"+
		"\u0f79\u0f78\u0001\u0000\u0000\u0000\u0f7a\u0f7b\u0001\u0000\u0000\u0000"+
		"\u0f7b\u0f7d\u0003\u0212\u0109\u0000\u0f7c\u0f79\u0001\u0000\u0000\u0000"+
		"\u0f7d\u0f80\u0001\u0000\u0000\u0000\u0f7e\u0f7c\u0001\u0000\u0000\u0000"+
		"\u0f7e\u0f7f\u0001\u0000\u0000\u0000\u0f7f\u0211\u0001\u0000\u0000\u0000"+
		"\u0f80\u0f7e\u0001\u0000\u0000\u0000\u0f81\u0f90\u0003\u021c\u010e\u0000"+
		"\u0f82\u0f84\u0005\u0103\u0000\u0000\u0f83\u0f82\u0001\u0000\u0000\u0000"+
		"\u0f83\u0f84\u0001\u0000\u0000\u0000\u0f84\u0f8e\u0001\u0000\u0000\u0000"+
		"\u0f85\u0f86\u0005\u00ac\u0000\u0000\u0f86\u0f8f\u0003\u0218\u010c\u0000"+
		"\u0f87\u0f88\u0005!\u0000\u0000\u0f88\u0f8f\u0003\u021a\u010d\u0000\u0f89"+
		"\u0f8a\u0003\u0214\u010a\u0000\u0f8a\u0f8c\u0003\u021c\u010e\u0000\u0f8b"+
		"\u0f8d\u0003\u0216\u010b\u0000\u0f8c\u0f8b\u0001\u0000\u0000\u0000\u0f8c"+
		"\u0f8d\u0001\u0000\u0000\u0000\u0f8d\u0f8f\u0001\u0000\u0000\u0000\u0f8e"+
		"\u0f85\u0001\u0000\u0000\u0000\u0f8e\u0f87\u0001\u0000\u0000\u0000\u0f8e"+
		"\u0f89\u0001\u0000\u0000\u0000\u0f8f\u0f91\u0001\u0000\u0000\u0000\u0f90"+
		"\u0f83\u0001\u0000\u0000\u0000\u0f90\u0f91\u0001\u0000\u0000\u0000\u0f91"+
		"\u0f94\u0001\u0000\u0000\u0000\u0f92\u0f94\u0003\u010a\u0085\u0000\u0f93"+
		"\u0f81\u0001\u0000\u0000\u0000\u0f93\u0f92\u0001\u0000\u0000\u0000\u0f94"+
		"\u0213\u0001\u0000\u0000\u0000\u0f95\u0f96\u0007-\u0000\u0000\u0f96\u0215"+
		"\u0001\u0000\u0000\u0000\u0f97\u0f98\u0005\u0083\u0000\u0000\u0f98\u0f99"+
		"\u0003\u021c\u010e\u0000\u0f99\u0217\u0001\u0000\u0000\u0000\u0f9a\u0f9b"+
		"\u0005\u01fc\u0000\u0000\u0f9b\u0f9c\u0003\u0146\u00a3\u0000\u0f9c\u0f9d"+
		"\u0005\u01fd\u0000\u0000\u0f9d\u0fad\u0001\u0000\u0000\u0000\u0f9e\u0f9f"+
		"\u0005\u01fc\u0000\u0000\u0f9f\u0fa4\u0003\u021e\u010f\u0000\u0fa0\u0fa1"+
		"\u0005\u0202\u0000\u0000\u0fa1\u0fa3\u0003\u021e\u010f\u0000\u0fa2\u0fa0"+
		"\u0001\u0000\u0000\u0000\u0fa3\u0fa6\u0001\u0000\u0000\u0000\u0fa4\u0fa2"+
		"\u0001\u0000\u0000\u0000\u0fa4\u0fa5\u0001\u0000\u0000\u0000\u0fa5\u0fa7"+
		"\u0001\u0000\u0000\u0000\u0fa6\u0fa4\u0001\u0000\u0000\u0000\u0fa7\u0fa8"+
		"\u0005\u01fd\u0000\u0000\u0fa8\u0fad\u0001\u0000\u0000\u0000\u0fa9\u0fad"+
		"\u0003\u02f4\u017a\u0000\u0faa\u0fad\u0003\u02ec\u0176\u0000\u0fab\u0fad"+
		"\u0003\u02ee\u0177\u0000\u0fac\u0f9a\u0001\u0000\u0000\u0000\u0fac\u0f9e"+
		"\u0001\u0000\u0000\u0000\u0fac\u0fa9\u0001\u0000\u0000\u0000\u0fac\u0faa"+
		"\u0001\u0000\u0000\u0000\u0fac\u0fab\u0001\u0000\u0000\u0000\u0fad\u0219"+
		"\u0001\u0000\u0000\u0000\u0fae\u0faf\u0003\u021c\u010e\u0000\u0faf\u0fb0"+
		"\u0005\u0010\u0000\u0000\u0fb0\u0fb1\u0003\u021c\u010e\u0000\u0fb1\u021b"+
		"\u0001\u0000\u0000\u0000\u0fb2\u0fb8\u0003\u0220\u0110\u0000\u0fb3\u0fb4"+
		"\u0003\u0304\u0182\u0000\u0fb4\u0fb5\u0003\u0220\u0110\u0000\u0fb5\u0fb7"+
		"\u0001\u0000\u0000\u0000\u0fb6\u0fb3\u0001\u0000\u0000\u0000\u0fb7\u0fba"+
		"\u0001\u0000\u0000\u0000\u0fb8\u0fb6\u0001\u0000\u0000\u0000\u0fb8\u0fb9"+
		"\u0001\u0000\u0000\u0000\u0fb9\u021d\u0001\u0000\u0000\u0000\u0fba\u0fb8"+
		"\u0001\u0000\u0000\u0000\u0fbb\u0fbc\u0003\u021c\u010e\u0000\u0fbc\u021f"+
		"\u0001\u0000\u0000\u0000\u0fbd\u0fc2\u0003\u0222\u0111\u0000\u0fbe\u0fbf"+
		"\u0007.\u0000\u0000\u0fbf\u0fc1\u0003\u0222\u0111\u0000\u0fc0\u0fbe\u0001"+
		"\u0000\u0000\u0000\u0fc1\u0fc4\u0001\u0000\u0000\u0000\u0fc2\u0fc0\u0001"+
		"\u0000\u0000\u0000\u0fc2\u0fc3\u0001\u0000\u0000\u0000\u0fc3\u0221\u0001"+
		"\u0000\u0000\u0000\u0fc4\u0fc2\u0001\u0000\u0000\u0000\u0fc5\u0fca\u0003"+
		"\u0224\u0112\u0000\u0fc6\u0fc7\u0007/\u0000\u0000\u0fc7\u0fc9\u0003\u0224"+
		"\u0112\u0000\u0fc8\u0fc6\u0001\u0000\u0000\u0000\u0fc9\u0fcc\u0001\u0000"+
		"\u0000\u0000\u0fca\u0fc8\u0001\u0000\u0000\u0000\u0fca\u0fcb\u0001\u0000"+
		"\u0000\u0000\u0fcb\u0223\u0001\u0000\u0000\u0000\u0fcc\u0fca\u0001\u0000"+
		"\u0000\u0000\u0fcd\u0fd6\u0003\u0228\u0114\u0000\u0fce\u0fd3\u0005\u0017"+
		"\u0000\u0000\u0fcf\u0fd4\u0005\u00d4\u0000\u0000\u0fd0\u0fd1\u0005\u0189"+
		"\u0000\u0000\u0fd1\u0fd2\u0005\u01d2\u0000\u0000\u0fd2\u0fd4\u0003\u021e"+
		"\u010f\u0000\u0fd3\u0fcf\u0001\u0000\u0000\u0000\u0fd3\u0fd0\u0001\u0000"+
		"\u0000\u0000\u0fd4\u0fd7\u0001\u0000\u0000\u0000\u0fd5\u0fd7\u0003\u0226"+
		"\u0113\u0000\u0fd6\u0fce\u0001\u0000\u0000\u0000\u0fd6\u0fd5\u0001\u0000"+
		"\u0000\u0000\u0fd6\u0fd7\u0001\u0000\u0000\u0000\u0fd7\u0225\u0001\u0000"+
		"\u0000\u0000\u0fd8\u0fdd\u0005_\u0000\u0000\u0fd9\u0fda\u0005\u01fc\u0000"+
		"\u0000\u0fda\u0fdb\u0003\u021e\u010f\u0000\u0fdb\u0fdc\u0005\u01fd\u0000"+
		"\u0000\u0fdc\u0fde\u0001\u0000\u0000\u0000\u0fdd\u0fd9\u0001\u0000\u0000"+
		"\u0000\u0fdd\u0fde\u0001\u0000\u0000\u0000\u0fde\u0fdf\u0001\u0000\u0000"+
		"\u0000\u0fdf\u0fe0\u0005\u0192\u0000\u0000\u0fe0\u0fe5\u0005\u015a\u0000"+
		"\u0000\u0fe1\u0fe2\u0005\u01fc\u0000\u0000\u0fe2\u0fe3\u0003\u021e\u010f"+
		"\u0000\u0fe3\u0fe4\u0005\u01fd\u0000\u0000\u0fe4\u0fe6\u0001\u0000\u0000"+
		"\u0000\u0fe5\u0fe1\u0001\u0000\u0000\u0000\u0fe5\u0fe6\u0001\u0000\u0000"+
		"\u0000\u0fe6\u0ff1\u0001\u0000\u0000\u0000\u0fe7\u0fec\u0005\u01cf\u0000"+
		"\u0000\u0fe8\u0fe9\u0005\u01fc\u0000\u0000\u0fe9\u0fea\u0003\u021e\u010f"+
		"\u0000\u0fea\u0feb\u0005\u01fd\u0000\u0000\u0feb\u0fed\u0001\u0000\u0000"+
		"\u0000\u0fec\u0fe8\u0001\u0000\u0000\u0000\u0fec\u0fed\u0001\u0000\u0000"+
		"\u0000\u0fed\u0fee\u0001\u0000\u0000\u0000\u0fee\u0fef\u0005\u0192\u0000"+
		"\u0000\u0fef\u0ff1\u0005\u00eb\u0000\u0000\u0ff0\u0fd8\u0001\u0000\u0000"+
		"\u0000\u0ff0\u0fe7\u0001\u0000\u0000\u0000\u0ff1\u0227\u0001\u0000\u0000"+
		"\u0000\u0ff2\u0ff7\u0003\u0234\u011a\u0000\u0ff3\u0ff4\u0005\u0214\u0000"+
		"\u0000\u0ff4\u0ff5\u0003\u022a\u0115\u0000\u0ff5\u0ff6\u0005\u0215\u0000"+
		"\u0000\u0ff6\u0ff8\u0001\u0000\u0000\u0000\u0ff7\u0ff3\u0001\u0000\u0000"+
		"\u0000\u0ff7\u0ff8\u0001\u0000\u0000\u0000\u0ff8\u0229\u0001\u0000\u0000"+
		"\u0000\u0ff9\u0ffc\u0005\u0011\u0000\u0000\u0ffa\u0ffc\u0003\u01fe\u00ff"+
		"\u0000\u0ffb\u0ff9\u0001\u0000\u0000\u0000\u0ffb\u0ffa\u0001\u0000\u0000"+
		"\u0000\u0ffc\u1004\u0001\u0000\u0000\u0000\u0ffd\u1000\u0005\u0202\u0000"+
		"\u0000\u0ffe\u1001\u0005\u0011\u0000\u0000\u0fff\u1001\u0003\u01fe\u00ff"+
		"\u0000\u1000\u0ffe\u0001\u0000\u0000\u0000\u1000\u0fff\u0001\u0000\u0000"+
		"\u0000\u1001\u1003\u0001\u0000\u0000\u0000\u1002\u0ffd\u0001\u0000\u0000"+
		"\u0000\u1003\u1006\u0001\u0000\u0000\u0000\u1004\u1002\u0001\u0000\u0000"+
		"\u0000\u1004\u1005\u0001\u0000\u0000\u0000\u1005\u1011\u0001\u0000\u0000"+
		"\u0000\u1006\u1004\u0001\u0000\u0000\u0000\u1007\u100c\u0003\u022c\u0116"+
		"\u0000\u1008\u1009\u0005\u0202\u0000\u0000\u1009\u100b\u0003\u022c\u0116"+
		"\u0000\u100a\u1008\u0001\u0000\u0000\u0000\u100b\u100e\u0001\u0000\u0000"+
		"\u0000\u100c\u100a\u0001\u0000\u0000\u0000\u100c\u100d\u0001\u0000\u0000"+
		"\u0000\u100d\u1011\u0001\u0000\u0000\u0000\u100e\u100c\u0001\u0000\u0000"+
		"\u0000\u100f\u1011\u0003\u0232\u0119\u0000\u1010\u0ffb\u0001\u0000\u0000"+
		"\u0000\u1010\u1007\u0001\u0000\u0000\u0000\u1010\u100f\u0001\u0000\u0000"+
		"\u0000\u1011\u022b\u0001\u0000\u0000\u0000\u1012\u1013\u0005\u009b\u0000"+
		"\u0000\u1013\u1020\u0003\u02d2\u0169\u0000\u1014\u1015\u0005\u00ac\u0000"+
		"\u0000\u1015\u1021\u0003\u01fa\u00fd\u0000\u1016\u1018\u0003\u022e\u0117"+
		"\u0000\u1017\u1016\u0001\u0000\u0000\u0000\u1017\u1018\u0001\u0000\u0000"+
		"\u0000\u1018\u1019\u0001\u0000\u0000\u0000\u1019\u101a\u0005\u009e\u0000"+
		"\u0000\u101a\u101b\u0003\u0200\u0100\u0000\u101b\u101c\u0005\u0192\u0000"+
		"\u0000\u101c\u101d\u0003\u0200\u0100\u0000\u101d\u101e\u0003\u0230\u0118"+
		"\u0000\u101e\u101f\u0003\u0200\u0100\u0000\u101f\u1021\u0001\u0000\u0000"+
		"\u0000\u1020\u1014\u0001\u0000\u0000\u0000\u1020\u1017\u0001\u0000\u0000"+
		"\u0000\u1021\u022d\u0001\u0000\u0000\u0000\u1022\u1023\u0005\u00cf\u0000"+
		"\u0000\u1023\u1024\u0003\u0200\u0100\u0000\u1024\u022f\u0001\u0000\u0000"+
		"\u0000\u1025\u1026\u00070\u0000\u0000\u1026\u0231\u0001\u0000\u0000\u0000"+
		"\u1027\u1028\u0005\u009b\u0000\u0000\u1028\u1029\u0005\u01fc\u0000\u0000"+
		"\u1029\u102e\u0003\u02d2\u0169\u0000\u102a\u102b\u0005\u0202\u0000\u0000"+
		"\u102b\u102d\u0003\u02d2\u0169\u0000\u102c\u102a\u0001\u0000\u0000\u0000"+
		"\u102d\u1030\u0001\u0000\u0000\u0000\u102e\u102c\u0001\u0000\u0000\u0000"+
		"\u102e\u102f\u0001\u0000\u0000\u0000\u102f\u1031\u0001\u0000\u0000\u0000"+
		"\u1030\u102e\u0001\u0000\u0000\u0000\u1031\u1032\u0005\u01fd\u0000\u0000"+
		"\u1032\u1033\u0005\u00ac\u0000\u0000\u1033\u1040\u0005\u01fc\u0000\u0000"+
		"\u1034\u1041\u0003\u0146\u00a3\u0000\u1035\u1036\u0005\u01fc\u0000\u0000"+
		"\u1036\u103b\u0003\u01fa\u00fd\u0000\u1037\u1038\u0005\u0202\u0000\u0000"+
		"\u1038\u103a\u0003\u01fa\u00fd\u0000\u1039\u1037\u0001\u0000\u0000\u0000"+
		"\u103a\u103d\u0001\u0000\u0000\u0000\u103b\u1039\u0001\u0000\u0000\u0000"+
		"\u103b\u103c\u0001\u0000\u0000\u0000\u103c\u103e\u0001\u0000\u0000\u0000"+
		"\u103d\u103b\u0001\u0000\u0000\u0000\u103e\u103f\u0005\u01fd\u0000\u0000"+
		"\u103f\u1041\u0001\u0000\u0000\u0000\u1040\u1034\u0001\u0000\u0000\u0000"+
		"\u1040\u1035\u0001\u0000\u0000\u0000\u1041\u1042\u0001\u0000\u0000\u0000"+
		"\u1042\u1043\u0005\u01fd\u0000\u0000\u1043\u0233\u0001\u0000\u0000\u0000"+
		"\u1044\u1045\u0005\u0201\u0000\u0000\u1045\u1057\u0003\u0234\u011a\u0000"+
		"\u1046\u1047\u0005\u0200\u0000\u0000\u1047\u1057\u0003\u0234\u011a\u0000"+
		"\u1048\u1049\u0005\u0134\u0000\u0000\u1049\u1057\u0003\u0234\u011a\u0000"+
		"\u104a\u104b\u0005G\u0000\u0000\u104b\u1057\u0003\u0234\u011a\u0000\u104c"+
		"\u104d\u0005\u00f6\u0000\u0000\u104d\u1057\u0003\u0234\u011a\u0000\u104e"+
		"\u104f\u0005t\u0000\u0000\u104f\u1057\u0003\u0234\u011a\u0000\u1050\u1051"+
		"\u0005\r\u0000\u0000\u1051\u1057\u0003\u0234\u011a\u0000\u1052\u1057\u0003"+
		"\u0236\u011b\u0000\u1053\u1057\u0003\u0248\u0124\u0000\u1054\u1057\u0003"+
		"\u0252\u0129\u0000\u1055\u1057\u0003\u0242\u0121\u0000\u1056\u1044\u0001"+
		"\u0000\u0000\u0000\u1056\u1046\u0001\u0000\u0000\u0000\u1056\u1048\u0001"+
		"\u0000\u0000\u0000\u1056\u104a\u0001\u0000\u0000\u0000\u1056\u104c\u0001"+
		"\u0000\u0000\u0000\u1056\u104e\u0001\u0000\u0000\u0000\u1056\u1050\u0001"+
		"\u0000\u0000\u0000\u1056\u1052\u0001\u0000\u0000\u0000\u1056\u1053\u0001"+
		"\u0000\u0000\u0000\u1056\u1054\u0001\u0000\u0000\u0000\u1056\u1055\u0001"+
		"\u0000\u0000\u0000\u1057\u0235\u0001\u0000\u0000\u0000\u1058\u105b\u0003"+
		"\u023c\u011e\u0000\u1059\u105b\u0003\u0238\u011c\u0000\u105a\u1058\u0001"+
		"\u0000\u0000\u0000\u105a\u1059\u0001\u0000\u0000\u0000\u105b\u0237\u0001"+
		"\u0000\u0000\u0000\u105c\u105e\u0003\u02b8\u015c\u0000\u105d\u105c\u0001"+
		"\u0000\u0000\u0000\u105d\u105e\u0001\u0000\u0000\u0000\u105e\u105f\u0001"+
		"\u0000\u0000\u0000\u105f\u1060\u00054\u0000\u0000\u1060\u1062\u0003\u0200"+
		"\u0100\u0000\u1061\u1063\u0003\u023a\u011d\u0000\u1062\u1061\u0001\u0000"+
		"\u0000\u0000\u1063\u1064\u0001\u0000\u0000\u0000\u1064\u1062\u0001\u0000"+
		"\u0000\u0000\u1064\u1065\u0001\u0000\u0000\u0000\u1065\u1067\u0001\u0000"+
		"\u0000\u0000\u1066\u1068\u0003\u0240\u0120\u0000\u1067\u1066\u0001\u0000"+
		"\u0000\u0000\u1067\u1068\u0001\u0000\u0000\u0000\u1068\u1069\u0001\u0000"+
		"\u0000\u0000\u1069\u106b\u0005\u0080\u0000\u0000\u106a\u106c\u00054\u0000"+
		"\u0000\u106b\u106a\u0001\u0000\u0000\u0000\u106b\u106c\u0001\u0000\u0000"+
		"\u0000\u106c\u106e\u0001\u0000\u0000\u0000\u106d\u106f\u0003\u02b8\u015c"+
		"\u0000\u106e\u106d\u0001\u0000\u0000\u0000\u106e\u106f\u0001\u0000\u0000"+
		"\u0000\u106f\u0239\u0001\u0000\u0000\u0000\u1070\u1071\u0005\u01b8\u0000"+
		"\u0000\u1071\u1072\u0003\u0202\u0101\u0000\u1072\u1075\u0005\u0188\u0000"+
		"\u0000\u1073\u1076\u0003\u00e2q\u0000\u1074\u1076\u0003\u0202\u0101\u0000"+
		"\u1075\u1073\u0001\u0000\u0000\u0000\u1075\u1074\u0001\u0000\u0000\u0000"+
		"\u1076\u023b\u0001\u0000\u0000\u0000\u1077\u1079\u0003\u02b8\u015c\u0000"+
		"\u1078\u1077\u0001\u0000\u0000\u0000\u1078\u1079\u0001\u0000\u0000\u0000"+
		"\u1079\u107a\u0001\u0000\u0000\u0000\u107a\u107c\u00054\u0000\u0000\u107b"+
		"\u107d\u0003\u023e\u011f\u0000\u107c\u107b\u0001\u0000\u0000\u0000\u107d"+
		"\u107e\u0001\u0000\u0000\u0000\u107e\u107c\u0001\u0000\u0000\u0000\u107e"+
		"\u107f\u0001\u0000\u0000\u0000\u107f\u1081\u0001\u0000\u0000\u0000\u1080"+
		"\u1082\u0003\u0240\u0120\u0000\u1081\u1080\u0001\u0000\u0000\u0000\u1081"+
		"\u1082\u0001\u0000\u0000\u0000\u1082\u1083\u0001\u0000\u0000\u0000\u1083"+
		"\u1085\u0005\u0080\u0000\u0000\u1084\u1086\u00054\u0000\u0000\u1085\u1084"+
		"\u0001\u0000\u0000\u0000\u1085\u1086\u0001\u0000\u0000\u0000\u1086\u1088"+
		"\u0001\u0000\u0000\u0000\u1087\u1089\u0003\u02b8\u015c\u0000\u1088\u1087"+
		"\u0001\u0000\u0000\u0000\u1088\u1089\u0001\u0000\u0000\u0000\u1089\u023d"+
		"\u0001\u0000\u0000\u0000\u108a\u108b\u0005\u01b8\u0000\u0000\u108b\u108c"+
		"\u0003\u01fe\u00ff\u0000\u108c\u108f\u0005\u0188\u0000\u0000\u108d\u1090"+
		"\u0003\u00e2q\u0000\u108e\u1090\u0003\u0202\u0101\u0000\u108f\u108d\u0001"+
		"\u0000\u0000\u0000\u108f\u108e\u0001\u0000\u0000\u0000\u1090\u023f\u0001"+
		"\u0000\u0000\u0000\u1091\u1094\u0005{\u0000\u0000\u1092\u1095\u0003\u00e2"+
		"q\u0000\u1093\u1095\u0003\u0202\u0101\u0000\u1094\u1092\u0001\u0000\u0000"+
		"\u0000\u1094\u1093\u0001\u0000\u0000\u0000\u1095\u0241\u0001\u0000\u0000"+
		"\u0000\u1096\u1097\u0003\u02f2\u0179\u0000\u1097\u1098\u0003\u0306\u0183"+
		"\u0000\u1098\u10ac\u0001\u0000\u0000\u0000\u1099\u10ac\u0003\u02ec\u0176"+
		"\u0000\u109a\u10ac\u0003\u02f4\u017a\u0000\u109b\u10ac\u0003\u02ee\u0177"+
		"\u0000\u109c\u10a8\u0005\u01fc\u0000\u0000\u109d\u109e\u0003\u0146\u00a3"+
		"\u0000\u109e\u10a2\u0005\u01fd\u0000\u0000\u109f\u10a1\u0003\u0148\u00a4"+
		"\u0000\u10a0\u109f\u0001\u0000\u0000\u0000\u10a1\u10a4\u0001\u0000\u0000"+
		"\u0000\u10a2\u10a0\u0001\u0000\u0000\u0000\u10a2\u10a3\u0001\u0000\u0000"+
		"\u0000\u10a3\u10a9\u0001\u0000\u0000\u0000\u10a4\u10a2\u0001\u0000\u0000"+
		"\u0000\u10a5\u10a6\u0003\u0244\u0122\u0000\u10a6\u10a7\u0005\u01fd\u0000"+
		"\u0000\u10a7\u10a9\u0001\u0000\u0000\u0000\u10a8\u109d\u0001\u0000\u0000"+
		"\u0000\u10a8\u10a5\u0001\u0000\u0000\u0000\u10a9\u10ac\u0001\u0000\u0000"+
		"\u0000\u10aa\u10ac\u0003\u01f8\u00fc\u0000\u10ab\u1096\u0001\u0000\u0000"+
		"\u0000\u10ab\u1099\u0001\u0000\u0000\u0000\u10ab\u109a\u0001\u0000\u0000"+
		"\u0000\u10ab\u109b\u0001\u0000\u0000\u0000\u10ab\u109c\u0001\u0000\u0000"+
		"\u0000\u10ab\u10aa\u0001\u0000\u0000\u0000\u10ac\u0243\u0001\u0000\u0000"+
		"\u0000\u10ad\u10af\u0003\u0200\u0100\u0000\u10ae\u10b0\u0003\u0246\u0123"+
		"\u0000\u10af\u10ae\u0001\u0000\u0000\u0000\u10af\u10b0\u0001\u0000\u0000"+
		"\u0000\u10b0\u0245\u0001\u0000\u0000\u0000\u10b1\u10b2\u0005\u0202\u0000"+
		"\u0000\u10b2\u10b7\u0003\u0200\u0100\u0000\u10b3\u10b4\u0005\u0202\u0000"+
		"\u0000\u10b4\u10b6\u0003\u0200\u0100\u0000\u10b5\u10b3\u0001\u0000\u0000"+
		"\u0000\u10b6\u10b9\u0001\u0000\u0000\u0000\u10b7\u10b5\u0001\u0000\u0000"+
		"\u0000\u10b7\u10b8\u0001\u0000\u0000\u0000\u10b8\u0247\u0001\u0000\u0000"+
		"\u0000\u10b9\u10b7\u0001\u0000\u0000\u0000\u10ba\u10ca\u00071\u0000\u0000"+
		"\u10bb\u10bc\u0005\u01fc\u0000\u0000\u10bc\u10bd\u0003\u0146\u00a3\u0000"+
		"\u10bd\u10be\u0005\u01fd\u0000\u0000\u10be\u10cb\u0001\u0000\u0000\u0000"+
		"\u10bf\u10c0\u0005\u01fc\u0000\u0000\u10c0\u10c5\u0003\u0200\u0100\u0000"+
		"\u10c1\u10c2\u0005\u0202\u0000\u0000\u10c2\u10c4\u0003\u0200\u0100\u0000"+
		"\u10c3\u10c1\u0001\u0000\u0000\u0000\u10c4\u10c7\u0001\u0000\u0000\u0000"+
		"\u10c5\u10c3\u0001\u0000\u0000\u0000\u10c5\u10c6\u0001\u0000\u0000\u0000"+
		"\u10c6\u10c8\u0001\u0000\u0000\u0000\u10c7\u10c5\u0001\u0000\u0000\u0000"+
		"\u10c8\u10c9\u0005\u01fd\u0000\u0000\u10c9\u10cb\u0001\u0000\u0000\u0000"+
		"\u10ca\u10bb\u0001\u0000\u0000\u0000\u10ca\u10bf\u0001\u0000\u0000\u0000"+
		"\u10cb\u0249\u0001\u0000\u0000\u0000\u10cc\u10cd\u0005\u0193\u0000\u0000"+
		"\u10cd\u10ce\u0005\u01fc\u0000\u0000\u10ce\u10d3\u0003\u0200\u0100\u0000"+
		"\u10cf\u10d0\u0005\u0202\u0000\u0000\u10d0\u10d2\u0003\u0200\u0100\u0000"+
		"\u10d1\u10cf\u0001\u0000\u0000\u0000\u10d2\u10d5\u0001\u0000\u0000\u0000"+
		"\u10d3\u10d1\u0001\u0000\u0000\u0000\u10d3\u10d4\u0001\u0000\u0000\u0000"+
		"\u10d4\u10d6\u0001\u0000\u0000\u0000\u10d5\u10d3\u0001\u0000\u0000\u0000"+
		"\u10d6\u10d7\u0005\u01fd\u0000\u0000\u10d7\u10e5\u0001\u0000\u0000\u0000"+
		"\u10d8\u10d9\u0005\u0194\u0000\u0000\u10d9\u10da\u0005\u01fc\u0000\u0000"+
		"\u10da\u10df\u0003\u0200\u0100\u0000\u10db\u10dc\u0005\u0202\u0000\u0000"+
		"\u10dc\u10de\u0003\u0200\u0100\u0000\u10dd\u10db\u0001\u0000\u0000\u0000"+
		"\u10de\u10e1\u0001\u0000\u0000\u0000\u10df\u10dd\u0001\u0000\u0000\u0000"+
		"\u10df\u10e0\u0001\u0000\u0000\u0000\u10e0\u10e2\u0001\u0000\u0000\u0000"+
		"\u10e1\u10df\u0001\u0000\u0000\u0000\u10e2\u10e3\u0005\u01fd\u0000\u0000"+
		"\u10e3\u10e5\u0001\u0000\u0000\u0000\u10e4\u10cc\u0001\u0000\u0000\u0000"+
		"\u10e4\u10d8\u0001\u0000\u0000\u0000\u10e5\u024b\u0001\u0000\u0000\u0000"+
		"\u10e6\u10e7\u00072\u0000\u0000\u10e7\u10ee\u0005\u01fc\u0000\u0000\u10e8"+
		"\u10e9\u0005\u00ec\u0000\u0000\u10e9\u10ea\u0005\u01fc\u0000\u0000\u10ea"+
		"\u10eb\u0003\u0146\u00a3\u0000\u10eb\u10ec\u0005\u01fd\u0000\u0000\u10ec"+
		"\u10ef\u0001\u0000\u0000\u0000\u10ed\u10ef\u0003\u021e\u010f\u0000\u10ee"+
		"\u10e8\u0001\u0000\u0000\u0000\u10ee\u10ed\u0001\u0000\u0000\u0000\u10ef"+
		"\u10f0\u0001\u0000\u0000\u0000\u10f0\u10f1\u0005\u0013\u0000\u0000\u10f1"+
		"\u10f2\u0003\u02e4\u0172\u0000\u10f2\u10f3\u0005\u01fd\u0000\u0000\u10f3"+
		"\u10f6\u0001\u0000\u0000\u0000\u10f4\u10f6\u0003\u024a\u0125\u0000\u10f5"+
		"\u10e6\u0001\u0000\u0000\u0000\u10f5\u10f4\u0001\u0000\u0000\u0000\u10f6"+
		"\u024d\u0001\u0000\u0000\u0000\u10f7\u10f8\u0005?\u0000\u0000\u10f8\u10fd"+
		"\u0003\u0272\u0139\u0000\u10f9\u10fa\u0005\u0202\u0000\u0000\u10fa\u10fc"+
		"\u0003\u0272\u0139\u0000\u10fb\u10f9\u0001\u0000\u0000\u0000\u10fc\u10ff"+
		"\u0001\u0000\u0000\u0000\u10fd\u10fb\u0001\u0000\u0000\u0000\u10fd\u10fe"+
		"\u0001\u0000\u0000\u0000\u10fe\u024f\u0001\u0000\u0000\u0000\u10ff\u10fd"+
		"\u0001\u0000\u0000\u0000\u1100\u1101\u0005\u01ce\u0000\u0000\u1101\u1105"+
		"\u0005\u01fc\u0000\u0000\u1102\u1103\u0003\u0270\u0138\u0000\u1103\u1104"+
		"\u0005\u0202\u0000\u0000\u1104\u1106\u0001\u0000\u0000\u0000\u1105\u1102"+
		"\u0001\u0000\u0000\u0000\u1105\u1106\u0001\u0000\u0000\u0000\u1106\u1107"+
		"\u0001\u0000\u0000\u0000\u1107\u1109\u0003\u021e\u010f\u0000\u1108\u110a"+
		"\u0003\u026c\u0136\u0000\u1109\u1108\u0001\u0000\u0000\u0000\u1109\u110a"+
		"\u0001\u0000\u0000\u0000\u110a\u110c\u0001\u0000\u0000\u0000\u110b\u110d"+
		"\u0003\u024e\u0127\u0000\u110c\u110b\u0001\u0000\u0000\u0000\u110c\u110d"+
		"\u0001\u0000\u0000\u0000\u110d\u110e\u0001\u0000\u0000\u0000\u110e\u1111"+
		"\u0005\u01fd\u0000\u0000\u110f\u1110\u0005\u01f5\u0000\u0000\u1110\u1112"+
		"\u0003\u02f0\u0178\u0000\u1111\u110f\u0001\u0000\u0000\u0000\u1111\u1112"+
		"\u0001\u0000\u0000\u0000\u1112\u0251\u0001\u0000\u0000\u0000\u1113\u1114"+
		"\u0003\u0254\u012a\u0000\u1114\u1116\u0003\u02dc\u016e\u0000\u1115\u1117"+
		"\u0003\u025a\u012d\u0000\u1116\u1115\u0001\u0000\u0000\u0000\u1116\u1117"+
		"\u0001\u0000\u0000\u0000\u1117\u1234\u0001\u0000\u0000\u0000\u1118\u1119"+
		"\u0003\u0308\u0184\u0000\u1119\u111b\u0003\u02de\u016f\u0000\u111a\u111c"+
		"\u0003\u0262\u0131\u0000\u111b\u111a\u0001\u0000\u0000\u0000\u111b\u111c"+
		"\u0001\u0000\u0000\u0000\u111c\u1234\u0001\u0000\u0000\u0000\u111d\u111e"+
		"\u0005S\u0000\u0000\u111e\u1124\u0005\u01fc\u0000\u0000\u111f\u1125\u0005"+
		"\u01ff\u0000\u0000\u1120\u1122\u0007\u001c\u0000\u0000\u1121\u1120\u0001"+
		"\u0000\u0000\u0000\u1121\u1122\u0001\u0000\u0000\u0000\u1122\u1123\u0001"+
		"\u0000\u0000\u0000\u1123\u1125\u0003\u021e\u010f\u0000\u1124\u111f\u0001"+
		"\u0000\u0000\u0000\u1124\u1121\u0001\u0000\u0000\u0000\u1125\u1126\u0001"+
		"\u0000\u0000\u0000\u1126\u1128\u0005\u01fd\u0000\u0000\u1127\u1129\u0003"+
		"\u025a\u012d\u0000\u1128\u1127\u0001\u0000\u0000\u0000\u1128\u1129\u0001"+
		"\u0000\u0000\u0000\u1129\u1234\u0001\u0000\u0000\u0000\u112a\u1234\u0003"+
		"\u024c\u0126\u0000\u112b\u112c\u0005:\u0000\u0000\u112c\u112d\u0005\u01fc"+
		"\u0000\u0000\u112d\u112e\u0003\u021e\u010f\u0000\u112e\u112f\u0005\u01aa"+
		"\u0000\u0000\u112f\u1130\u0005\u00f3\u0000\u0000\u1130\u1131\u0005\u01fd"+
		"\u0000\u0000\u1131\u1234\u0001\u0000\u0000\u0000\u1132\u1133\u0005>\u0000"+
		"\u0000\u1133\u1135\u0005\u01fc\u0000\u0000\u1134\u1136\u00073\u0000\u0000"+
		"\u1135\u1134\u0001\u0000\u0000\u0000\u1135\u1136\u0001\u0000\u0000\u0000"+
		"\u1136\u1137\u0001\u0000\u0000\u0000\u1137\u1139\u0003\u021e\u010f\u0000"+
		"\u1138\u113a\u0003\u0266\u0133\u0000\u1139\u1138\u0001\u0000\u0000\u0000"+
		"\u1139\u113a\u0001\u0000\u0000\u0000\u113a\u113b\u0001\u0000\u0000\u0000"+
		"\u113b\u113c\u0005\u01fd\u0000\u0000\u113c\u1234\u0001\u0000\u0000\u0000"+
		"\u113d\u113e\u0003\u0256\u012b\u0000\u113e\u1140\u0003\u02da\u016d\u0000"+
		"\u113f\u1141\u0003\u0268\u0134\u0000\u1140\u113f\u0001\u0000\u0000\u0000"+
		"\u1141\u1142\u0001\u0000\u0000\u0000\u1142\u1140\u0001\u0000\u0000\u0000"+
		"\u1142\u1143\u0001\u0000\u0000\u0000\u1143\u1234\u0001\u0000\u0000\u0000"+
		"\u1144\u1145\u0005g\u0000\u0000\u1145\u1146\u0005\u01fc\u0000\u0000\u1146"+
		"\u1148\u0003\u021e\u010f\u0000\u1147\u1149\u00074\u0000\u0000\u1148\u1147"+
		"\u0001\u0000\u0000\u0000\u1148\u1149\u0001\u0000\u0000\u0000\u1149\u114a"+
		"\u0001\u0000\u0000\u0000\u114a\u114b\u0005\u01fd\u0000\u0000\u114b\u1234"+
		"\u0001\u0000\u0000\u0000\u114c\u114d\u0005\u0091\u0000\u0000\u114d\u114e"+
		"\u0005\u01fc\u0000\u0000\u114e\u114f\u0003\u0308\u0184\u0000\u114f\u1150"+
		"\u0005\u009e\u0000\u0000\u1150\u1151\u0003\u021e\u010f\u0000\u1151\u1152"+
		"\u0005\u01fd\u0000\u0000\u1152\u1234\u0001\u0000\u0000\u0000\u1153\u1154"+
		"\u00075\u0000\u0000\u1154\u1156\u0003\u02dc\u016e\u0000\u1155\u1157\u0003"+
		"\u02e0\u0170\u0000\u1156\u1155\u0001\u0000\u0000\u0000\u1156\u1157\u0001"+
		"\u0000\u0000\u0000\u1157\u1158\u0001\u0000\u0000\u0000\u1158\u1159\u0003"+
		"\u025a\u012d\u0000\u1159\u1234\u0001\u0000\u0000\u0000\u115a\u115b\u0003"+
		"\u0258\u012c\u0000\u115b\u115c\u0005\u01fc\u0000\u0000\u115c\u1161\u0003"+
		"\u0202\u0101\u0000\u115d\u115e\u0005\u0202\u0000\u0000\u115e\u1160\u0003"+
		"\u0202\u0101\u0000\u115f\u115d\u0001\u0000\u0000\u0000\u1160\u1163\u0001"+
		"\u0000\u0000\u0000\u1161\u115f\u0001\u0000\u0000\u0000\u1161\u1162\u0001"+
		"\u0000\u0000\u0000\u1162\u1165\u0001\u0000\u0000\u0000\u1163\u1161\u0001"+
		"\u0000\u0000\u0000\u1164\u1166\u0003\u026a\u0135\u0000\u1165\u1164\u0001"+
		"\u0000\u0000\u0000\u1165\u1166\u0001\u0000\u0000\u0000\u1166\u1168\u0001"+
		"\u0000\u0000\u0000\u1167\u1169\u0003\u0262\u0131\u0000\u1168\u1167\u0001"+
		"\u0000\u0000\u0000\u1168\u1169\u0001\u0000\u0000\u0000\u1169\u116a\u0001"+
		"\u0000\u0000\u0000\u116a\u116b\u0005\u01fd\u0000\u0000\u116b\u1234\u0001"+
		"\u0000\u0000\u0000\u116c\u116d\u0005\u00e7\u0000\u0000\u116d\u116e\u0005"+
		"\u01fc\u0000\u0000\u116e\u116f\u0003\u0200\u0100\u0000\u116f\u1170\u0005"+
		"\u0202\u0000\u0000\u1170\u1171\u0003\u0200\u0100\u0000\u1171\u1172\u0005"+
		"\u01fd\u0000\u0000\u1172\u1234\u0001\u0000\u0000\u0000\u1173\u1174\u0005"+
		"\u0197\u0000\u0000\u1174\u1175\u0005\u01fc\u0000\u0000\u1175\u1178\u0003"+
		"\u0202\u0101\u0000\u1176\u1177\u0005\u01aa\u0000\u0000\u1177\u1179\u0007"+
		"6\u0000\u0000\u1178\u1176\u0001\u0000\u0000\u0000\u1178\u1179\u0001\u0000"+
		"\u0000\u0000\u1179\u117e\u0001\u0000\u0000\u0000\u117a\u117b\u0005\u0202"+
		"\u0000\u0000\u117b\u117d\u0003\u0202\u0101\u0000\u117c\u117a\u0001\u0000"+
		"\u0000\u0000\u117d\u1180\u0001\u0000\u0000\u0000\u117e\u117c\u0001\u0000"+
		"\u0000\u0000\u117e\u117f\u0001\u0000\u0000\u0000\u117f\u1181\u0001\u0000"+
		"\u0000\u0000\u1180\u117e\u0001\u0000\u0000\u0000\u1181\u1182\u0005\u01fd"+
		"\u0000\u0000\u1182\u1234\u0001\u0000\u0000\u0000\u1183\u1184\u0005\u0198"+
		"\u0000\u0000\u1184\u1185\u0005\u01fc\u0000\u0000\u1185\u1186\u0003\u0202"+
		"\u0101\u0000\u1186\u1188\u0005\u0013\u0000\u0000\u1187\u1189\u0005\u013c"+
		"\u0000\u0000\u1188\u1187\u0001\u0000\u0000\u0000\u1188\u1189\u0001\u0000"+
		"\u0000\u0000\u1189\u118a\u0001\u0000\u0000\u0000\u118a\u118b\u0003\u02e4"+
		"\u0172\u0000\u118b\u118c\u0005\u01fd\u0000\u0000\u118c\u1234\u0001\u0000"+
		"\u0000\u0000\u118d\u118e\u0005\u019a\u0000\u0000\u118e\u1196\u0005\u01fc"+
		"\u0000\u0000\u118f\u1191\u00077\u0000\u0000\u1190\u118f\u0001\u0000\u0000"+
		"\u0000\u1190\u1191\u0001\u0000\u0000\u0000\u1191\u1193\u0001\u0000\u0000"+
		"\u0000\u1192\u1194\u0003\u0202\u0101\u0000\u1193\u1192\u0001\u0000\u0000"+
		"\u0000\u1193\u1194\u0001\u0000\u0000\u0000\u1194\u1195\u0001\u0000\u0000"+
		"\u0000\u1195\u1197\u0005\u009e\u0000\u0000\u1196\u1190\u0001\u0000\u0000"+
		"\u0000\u1196\u1197\u0001\u0000\u0000\u0000\u1197\u1198\u0001\u0000\u0000"+
		"\u0000\u1198\u1199\u0003\u0202\u0101\u0000\u1199\u119a\u0005\u01fd\u0000"+
		"\u0000\u119a\u1234\u0001\u0000\u0000\u0000\u119b\u119c\u0005\u01c1\u0000"+
		"\u0000\u119c\u119d\u0005\u01fc\u0000\u0000\u119d\u119f\u0003\u0202\u0101"+
		"\u0000\u119e\u11a0\u0003\u01a6\u00d3\u0000\u119f\u119e\u0001\u0000\u0000"+
		"\u0000\u119f\u11a0\u0001\u0000\u0000\u0000\u11a0\u11a1\u0001\u0000\u0000"+
		"\u0000\u11a1\u11a4\u0005\u01fd\u0000\u0000\u11a2\u11a3\u0005\u01f5\u0000"+
		"\u0000\u11a3\u11a5\u0003\u02f0\u0178\u0000\u11a4\u11a2\u0001\u0000\u0000"+
		"\u0000\u11a4\u11a5\u0001\u0000\u0000\u0000\u11a5\u1234\u0001\u0000\u0000"+
		"\u0000\u11a6\u11a7\u00078\u0000\u0000\u11a7\u11a8\u0005\u01fc\u0000\u0000"+
		"\u11a8\u11ad\u0003\u0276\u013b\u0000\u11a9\u11aa\u0005\u0202\u0000\u0000"+
		"\u11aa\u11ac\u0003\u0276\u013b\u0000\u11ab\u11a9\u0001\u0000\u0000\u0000"+
		"\u11ac\u11af\u0001\u0000\u0000\u0000\u11ad\u11ab\u0001\u0000\u0000\u0000"+
		"\u11ad\u11ae\u0001\u0000\u0000\u0000\u11ae\u11b0\u0001\u0000\u0000\u0000"+
		"\u11af\u11ad\u0001\u0000\u0000\u0000\u11b0\u11b3\u0005\u01fd\u0000\u0000"+
		"\u11b1\u11b2\u0005\u01f5\u0000\u0000\u11b2\u11b4\u0003\u02f0\u0178\u0000"+
		"\u11b3\u11b1\u0001\u0000\u0000\u0000\u11b3\u11b4\u0001\u0000\u0000\u0000"+
		"\u11b4\u1234\u0001\u0000\u0000\u0000\u11b5\u11b6\u0005\u01c5\u0000\u0000"+
		"\u11b6\u11b8\u0005\u01fc\u0000\u0000\u11b7\u11b9\u00079\u0000\u0000\u11b8"+
		"\u11b7\u0001\u0000\u0000\u0000\u11b8\u11b9\u0001\u0000\u0000\u0000\u11b9"+
		"\u11bb\u0001\u0000\u0000\u0000\u11ba\u11bc\u0007:\u0000\u0000\u11bb\u11ba"+
		"\u0001\u0000\u0000\u0000\u11bb\u11bc\u0001\u0000\u0000\u0000\u11bc\u11bd"+
		"\u0001\u0000\u0000\u0000\u11bd\u11c0\u0003\u0202\u0101\u0000\u11be\u11bf"+
		"\u0005\u0202\u0000\u0000\u11bf\u11c1\u0003\u026e\u0137\u0000\u11c0\u11be"+
		"\u0001\u0000\u0000\u0000\u11c0\u11c1\u0001\u0000\u0000\u0000\u11c1\u11c9"+
		"\u0001\u0000\u0000\u0000\u11c2\u11c3\u0005\u0202\u0000\u0000\u11c3\u11c5"+
		"\u0003\u0202\u0101\u0000\u11c4\u11c6\u0003\u028a\u0145\u0000\u11c5\u11c4"+
		"\u0001\u0000\u0000\u0000\u11c5\u11c6\u0001\u0000\u0000\u0000\u11c6\u11c8"+
		"\u0001\u0000\u0000\u0000\u11c7\u11c2\u0001\u0000\u0000\u0000\u11c8\u11cb"+
		"\u0001\u0000\u0000\u0000\u11c9\u11c7\u0001\u0000\u0000\u0000\u11c9\u11ca"+
		"\u0001\u0000\u0000\u0000\u11ca\u11cc\u0001\u0000\u0000\u0000\u11cb\u11c9"+
		"\u0001\u0000\u0000\u0000\u11cc\u11cf\u0005\u01fd\u0000\u0000\u11cd\u11ce"+
		"\u0005\u01f5\u0000\u0000\u11ce\u11d0\u0003\u02f0\u0178\u0000\u11cf\u11cd"+
		"\u0001\u0000\u0000\u0000\u11cf\u11d0\u0001\u0000\u0000\u0000\u11d0\u1234"+
		"\u0001\u0000\u0000\u0000\u11d1\u11d2\u0005\u01c6\u0000\u0000\u11d2\u11d3"+
		"\u0005\u01fc\u0000\u0000\u11d3\u11d5\u0003\u0202\u0101\u0000\u11d4\u11d6"+
		"\u0003\u026c\u0136\u0000\u11d5\u11d4\u0001\u0000\u0000\u0000\u11d5\u11d6"+
		"\u0001\u0000\u0000\u0000\u11d6\u11d7\u0001\u0000\u0000\u0000\u11d7\u11d8"+
		"\u0005\u01fd\u0000\u0000\u11d8\u1234\u0001\u0000\u0000\u0000\u11d9\u11da"+
		"\u0005\u01c9\u0000\u0000\u11da\u11db\u0005\u01fc\u0000\u0000\u11db\u11dc"+
		"\u0007;\u0000\u0000\u11dc\u11de\u0003\u021e\u010f\u0000\u11dd\u11df\u0005"+
		"\u01b7\u0000\u0000\u11de\u11dd\u0001\u0000\u0000\u0000\u11de\u11df\u0001"+
		"\u0000\u0000\u0000\u11df\u11e0\u0001\u0000\u0000\u0000\u11e0\u11e3\u0005"+
		"\u01fd\u0000\u0000\u11e1\u11e2\u0005\u01f5\u0000\u0000\u11e2\u11e4\u0003"+
		"\u02f0\u0178\u0000\u11e3\u11e1\u0001\u0000\u0000\u0000\u11e3\u11e4\u0001"+
		"\u0000\u0000\u0000\u11e4\u1234\u0001\u0000\u0000\u0000\u11e5\u11e6\u0005"+
		"\u01ca\u0000\u0000\u11e6\u11eb\u0005\u01fc\u0000\u0000\u11e7\u11e8\u0005"+
		"\u00ed\u0000\u0000\u11e8\u11ec\u0003\u02fa\u017d\u0000\u11e9\u11ea\u0005"+
		"\u0085\u0000\u0000\u11ea\u11ec\u0003\u021e\u010f\u0000\u11eb\u11e7\u0001"+
		"\u0000\u0000\u0000\u11eb\u11e9\u0001\u0000\u0000\u0000\u11ec\u11ef\u0001"+
		"\u0000\u0000\u0000\u11ed\u11ee\u0005\u0202\u0000\u0000\u11ee\u11f0\u0003"+
		"\u021e\u010f\u0000\u11ef\u11ed\u0001\u0000\u0000\u0000\u11ef\u11f0\u0001"+
		"\u0000\u0000\u0000\u11f0\u11f1\u0001\u0000\u0000\u0000\u11f1\u11f4\u0005"+
		"\u01fd\u0000\u0000\u11f2\u11f3\u0005\u01f5\u0000\u0000\u11f3\u11f5\u0003"+
		"\u02f0\u0178\u0000\u11f4\u11f2\u0001\u0000\u0000\u0000\u11f4\u11f5\u0001"+
		"\u0000\u0000\u0000\u11f5\u1234\u0001\u0000\u0000\u0000\u11f6\u11f7\u0005"+
		"\u01cb\u0000\u0000\u11f7\u11f8\u0005\u01fc\u0000\u0000\u11f8\u11fa\u0003"+
		"\u021e\u010f\u0000\u11f9\u11fb\u0003\u026c\u0136\u0000\u11fa\u11f9\u0001"+
		"\u0000\u0000\u0000\u11fa\u11fb\u0001\u0000\u0000\u0000\u11fb\u11fc\u0001"+
		"\u0000\u0000\u0000\u11fc\u11fd\u0005\u0148\u0000\u0000\u11fd\u1201\u0005"+
		"L\u0000\u0000\u11fe\u11ff\u0005\u0105\u0000\u0000\u11ff\u1200\u0005\u010f"+
		"\u0000\u0000\u1200\u1202\u0005}\u0000\u0000\u1201\u11fe\u0001\u0000\u0000"+
		"\u0000\u1201\u1202\u0001\u0000\u0000\u0000\u1202\u1203\u0001\u0000\u0000"+
		"\u0000\u1203\u1206\u0005\u01fd\u0000\u0000\u1204\u1205\u0005\u01f5\u0000"+
		"\u0000\u1205\u1207\u0003\u02f0\u0178\u0000\u1206\u1204\u0001\u0000\u0000"+
		"\u0000\u1206\u1207\u0001\u0000\u0000\u0000\u1207\u1234\u0001\u0000\u0000"+
		"\u0000\u1208\u1209\u0005\u01cc\u0000\u0000\u1209\u120a\u0005\u01fc\u0000"+
		"\u0000\u120a\u120d\u0003\u021e\u010f\u0000\u120b\u120c\u0005\u0202\u0000"+
		"\u0000\u120c\u120e\u0003\u0278\u013c\u0000\u120d\u120b\u0001\u0000\u0000"+
		"\u0000\u120d\u120e\u0001\u0000\u0000\u0000\u120e\u1211\u0001\u0000\u0000"+
		"\u0000\u120f\u1210\u0005\u0202\u0000\u0000\u1210\u1212\u0003\u027a\u013d"+
		"\u0000\u1211\u120f\u0001\u0000\u0000\u0000\u1211\u1212\u0001\u0000\u0000"+
		"\u0000\u1212\u1213\u0001\u0000\u0000\u0000\u1213\u1216\u0005\u01fd\u0000"+
		"\u0000\u1214\u1215\u0005\u01f5\u0000\u0000\u1215\u1217\u0003\u02f0\u0178"+
		"\u0000\u1216\u1214\u0001\u0000\u0000\u0000\u1216\u1217\u0001\u0000\u0000"+
		"\u0000\u1217\u1234\u0001\u0000\u0000\u0000\u1218\u1219\u0005\u01cd\u0000"+
		"\u0000\u1219\u121a\u0005\u01fc\u0000\u0000\u121a\u121b\u0007;\u0000\u0000"+
		"\u121b\u121e\u0003\u021e\u010f\u0000\u121c\u121d\u0005\u0013\u0000\u0000"+
		"\u121d\u121f\u0003\u02e4\u0172\u0000\u121e\u121c\u0001\u0000\u0000\u0000"+
		"\u121e\u121f\u0001\u0000\u0000\u0000\u121f\u1221\u0001\u0000\u0000\u0000"+
		"\u1220\u1222\u0003\u027c\u013e\u0000\u1221\u1220\u0001\u0000\u0000\u0000"+
		"\u1221\u1222\u0001\u0000\u0000\u0000\u1222\u1224\u0001\u0000\u0000\u0000"+
		"\u1223\u1225\u0003\u027e\u013f\u0000\u1224\u1223\u0001\u0000\u0000\u0000"+
		"\u1224\u1225\u0001\u0000\u0000\u0000\u1225\u1227\u0001\u0000\u0000\u0000"+
		"\u1226\u1228\u0003\u0280\u0140\u0000\u1227\u1226\u0001\u0000\u0000\u0000"+
		"\u1227\u1228\u0001\u0000\u0000\u0000\u1228\u122b\u0001\u0000\u0000\u0000"+
		"\u1229\u122a\u0007<\u0000\u0000\u122a\u122c\u0005j\u0000\u0000\u122b\u1229"+
		"\u0001\u0000\u0000\u0000\u122b\u122c\u0001\u0000\u0000\u0000\u122c\u122d"+
		"\u0001\u0000\u0000\u0000\u122d\u1230\u0005\u01fd\u0000\u0000\u122e\u122f"+
		"\u0005\u01f5\u0000\u0000\u122f\u1231\u0003\u02f0\u0178\u0000\u1230\u122e"+
		"\u0001\u0000\u0000\u0000\u1230\u1231\u0001\u0000\u0000\u0000\u1231\u1234"+
		"\u0001\u0000\u0000\u0000\u1232\u1234\u0003\u0250\u0128\u0000\u1233\u1113"+
		"\u0001\u0000\u0000\u0000\u1233\u1118\u0001\u0000\u0000\u0000\u1233\u111d"+
		"\u0001\u0000\u0000\u0000\u1233\u112a\u0001\u0000\u0000\u0000\u1233\u112b"+
		"\u0001\u0000\u0000\u0000\u1233\u1132\u0001\u0000\u0000\u0000\u1233\u113d"+
		"\u0001\u0000\u0000\u0000\u1233\u1144\u0001\u0000\u0000\u0000\u1233\u114c"+
		"\u0001\u0000\u0000\u0000\u1233\u1153\u0001\u0000\u0000\u0000\u1233\u115a"+
		"\u0001\u0000\u0000\u0000\u1233\u116c\u0001\u0000\u0000\u0000\u1233\u1173"+
		"\u0001\u0000\u0000\u0000\u1233\u1183\u0001\u0000\u0000\u0000\u1233\u118d"+
		"\u0001\u0000\u0000\u0000\u1233\u119b\u0001\u0000\u0000\u0000\u1233\u11a6"+
		"\u0001\u0000\u0000\u0000\u1233\u11b5\u0001\u0000\u0000\u0000\u1233\u11d1"+
		"\u0001\u0000\u0000\u0000\u1233\u11d9\u0001\u0000\u0000\u0000\u1233\u11e5"+
		"\u0001\u0000\u0000\u0000\u1233\u11f6\u0001\u0000\u0000\u0000\u1233\u1208"+
		"\u0001\u0000\u0000\u0000\u1233\u1218\u0001\u0000\u0000\u0000\u1233\u1232"+
		"\u0001\u0000\u0000\u0000\u1234\u0253\u0001\u0000\u0000\u0000\u1235\u1236"+
		"\u0007=\u0000\u0000\u1236\u0255\u0001\u0000\u0000\u0000\u1237\u1238\u0007"+
		">\u0000\u0000\u1238\u0257\u0001\u0000\u0000\u0000\u1239\u123a\u0007?\u0000"+
		"\u0000\u123a\u0259\u0001\u0000\u0000\u0000\u123b\u123c\u0005\u011a\u0000"+
		"\u0000\u123c\u123e\u0005\u01fc\u0000\u0000\u123d\u123f\u0003\u0162\u00b1"+
		"\u0000\u123e\u123d\u0001\u0000\u0000\u0000\u123e\u123f\u0001\u0000\u0000"+
		"\u0000\u123f\u1244\u0001\u0000\u0000\u0000\u1240\u1242\u0003\u01a6\u00d3"+
		"\u0000\u1241\u1243\u0003\u025c\u012e\u0000\u1242\u1241\u0001\u0000\u0000"+
		"\u0000\u1242\u1243\u0001\u0000\u0000\u0000\u1243\u1245\u0001\u0000\u0000"+
		"\u0000\u1244\u1240\u0001\u0000\u0000\u0000\u1244\u1245\u0001\u0000\u0000"+
		"\u0000\u1245\u1246\u0001\u0000\u0000\u0000\u1246\u1247\u0005\u01fd\u0000"+
		"\u0000\u1247\u025b\u0001\u0000\u0000\u0000\u1248\u124f\u0003\u025e\u012f"+
		"\u0000\u1249\u124a\u0005!\u0000\u0000\u124a\u124b\u0003\u0260\u0130\u0000"+
		"\u124b\u124c\u0005\u0010\u0000\u0000\u124c\u124d\u0003\u0260\u0130\u0000"+
		"\u124d\u1250\u0001\u0000\u0000\u0000\u124e\u1250\u0003\u0260\u0130\u0000"+
		"\u124f\u1249\u0001\u0000\u0000\u0000\u124f\u124e\u0001\u0000\u0000\u0000"+
		"\u1250\u025d\u0001\u0000\u0000\u0000\u1251\u1252\u0007@\u0000\u0000\u1252"+
		"\u025f\u0001\u0000\u0000\u0000\u1253\u1254\u0005\u019e\u0000\u0000\u1254"+
		"\u125b\u0005\u0131\u0000\u0000\u1255\u1256\u0005W\u0000\u0000\u1256\u125b"+
		"\u0005\u014f\u0000\u0000\u1257\u1258\u0003\u021e\u010f\u0000\u1258\u1259"+
		"\u0007A\u0000\u0000\u1259\u125b\u0001\u0000\u0000\u0000\u125a\u1253\u0001"+
		"\u0000\u0000\u0000\u125a\u1255\u0001\u0000\u0000\u0000\u125a\u1257\u0001"+
		"\u0000\u0000\u0000\u125b\u0261\u0001\u0000\u0000\u0000\u125c\u1266\u0005"+
		"\u01aa\u0000\u0000\u125d\u1267\u0005\u01ff\u0000\u0000\u125e\u1263\u0003"+
		"\u0264\u0132\u0000\u125f\u1260\u0005\u0202\u0000\u0000\u1260\u1262\u0003"+
		"\u0264\u0132\u0000\u1261\u125f\u0001\u0000\u0000\u0000\u1262\u1265\u0001"+
		"\u0000\u0000\u0000\u1263\u1261\u0001\u0000\u0000\u0000\u1263\u1264\u0001"+
		"\u0000\u0000\u0000\u1264\u1267\u0001\u0000\u0000\u0000\u1265\u1263\u0001"+
		"\u0000\u0000\u0000\u1266\u125d\u0001\u0000\u0000\u0000\u1266\u125e\u0001"+
		"\u0000\u0000\u0000\u1267\u0263\u0001\u0000\u0000\u0000\u1268\u126a\u0005"+
		"\u00ac\u0000\u0000\u1269\u126b\u0005\u0118\u0000\u0000\u126a\u1269\u0001"+
		"\u0000\u0000\u0000\u126a\u126b\u0001\u0000\u0000\u0000\u126b\u126e\u0001"+
		"\u0000\u0000\u0000\u126c\u126e\u0005\u0118\u0000\u0000\u126d\u1268\u0001"+
		"\u0000";
	private static final String _serializedATNSegment2 =
		"\u0000\u0000\u126d\u126c\u0001\u0000\u0000\u0000\u126d\u126e\u0001\u0000"+
		"\u0000\u0000\u126e\u126f\u0001\u0000\u0000\u0000\u126f\u1271\u0003\u0152"+
		"\u00a9\u0000\u1270\u1272\u0003\u028a\u0145\u0000\u1271\u1270\u0001\u0000"+
		"\u0000\u0000\u1271\u1272\u0001\u0000\u0000\u0000\u1272\u0265\u0001\u0000"+
		"\u0000\u0000\u1273\u1274\u0005\u0115\u0000\u0000\u1274\u1275\u0005-\u0000"+
		"\u0000\u1275\u1276\u0003\u021e\u010f\u0000\u1276\u0267\u0001\u0000\u0000"+
		"\u0000\u1277\u1278\u0005\u01bd\u0000\u0000\u1278\u1279\u0005\u00a3\u0000"+
		"\u0000\u1279\u127a\u0005\u01fc\u0000\u0000\u127a\u127b\u0003\u01a6\u00d3"+
		"\u0000\u127b\u127c\u0005\u01fd\u0000\u0000\u127c\u127f\u0001\u0000\u0000"+
		"\u0000\u127d\u127f\u0003\u025a\u012d\u0000\u127e\u1277\u0001\u0000\u0000"+
		"\u0000\u127e\u127d\u0001\u0000\u0000\u0000\u127f\u0269\u0001\u0000\u0000"+
		"\u0000\u1280\u1292\u0005R\u0000\u0000\u1281\u1283\u0005\u00e9\u0000\u0000"+
		"\u1282\u1284\u0005\u001b\u0000\u0000\u1283\u1282\u0001\u0000\u0000\u0000"+
		"\u1283\u1284\u0001\u0000\u0000\u0000\u1284\u1293\u0001\u0000\u0000\u0000"+
		"\u1285\u1286\u0005\u01fc\u0000\u0000\u1286\u128b\u0003\u029a\u014d\u0000"+
		"\u1287\u1288\u0005\u0202\u0000\u0000\u1288\u128a\u0003\u029a\u014d\u0000"+
		"\u1289\u1287\u0001\u0000\u0000\u0000\u128a\u128d\u0001\u0000\u0000\u0000"+
		"\u128b\u1289\u0001\u0000\u0000\u0000\u128b\u128c\u0001\u0000\u0000\u0000"+
		"\u128c\u128e\u0001\u0000\u0000\u0000\u128d\u128b\u0001\u0000\u0000\u0000"+
		"\u128e\u128f\u0005\u01fd\u0000\u0000\u128f\u1290\u0005\u01ad\u0000\u0000"+
		"\u1290\u1291\u0003\u01fa\u00fd\u0000\u1291\u1293\u0001\u0000\u0000\u0000"+
		"\u1292\u1281\u0001\u0000\u0000\u0000\u1292\u1285\u0001\u0000\u0000\u0000"+
		"\u1293\u026b\u0001\u0000\u0000\u0000\u1294\u1297\u0005\u0121\u0000\u0000"+
		"\u1295\u1296\u0005-\u0000\u0000\u1296\u1298\u0005\u01ac\u0000\u0000\u1297"+
		"\u1295\u0001\u0000\u0000\u0000\u1297\u1298\u0001\u0000\u0000\u0000\u1298"+
		"\u1299\u0001\u0000\u0000\u0000\u1299\u129b\u0003\u0202\u0101\u0000\u129a"+
		"\u129c\u0003\u028a\u0145\u0000\u129b\u129a\u0001\u0000\u0000\u0000\u129b"+
		"\u129c\u0001\u0000\u0000\u0000\u129c\u12a4\u0001\u0000\u0000\u0000\u129d"+
		"\u129e\u0005\u0202\u0000\u0000\u129e\u12a0\u0003\u0202\u0101\u0000\u129f"+
		"\u12a1\u0003\u028a\u0145\u0000\u12a0\u129f\u0001\u0000\u0000\u0000\u12a0"+
		"\u12a1\u0001\u0000\u0000\u0000\u12a1\u12a3\u0001\u0000\u0000\u0000\u12a2"+
		"\u129d\u0001\u0000\u0000\u0000\u12a3\u12a6\u0001\u0000\u0000\u0000\u12a4"+
		"\u12a2\u0001\u0000\u0000\u0000\u12a4\u12a5\u0001\u0000\u0000\u0000\u12a5"+
		"\u026d\u0001\u0000\u0000\u0000\u12a6\u12a4\u0001\u0000\u0000\u0000\u12a7"+
		"\u12a8\u0005\u01c2\u0000\u0000\u12a8\u12aa\u0005\u01fc\u0000\u0000\u12a9"+
		"\u12ab\u00079\u0000\u0000\u12aa\u12a9\u0001\u0000\u0000\u0000\u12aa\u12ab"+
		"\u0001\u0000\u0000\u0000\u12ab\u12ad\u0001\u0000\u0000\u0000\u12ac\u12ae"+
		"\u0007B\u0000\u0000\u12ad\u12ac\u0001\u0000\u0000\u0000\u12ad\u12ae\u0001"+
		"\u0000\u0000\u0000\u12ae\u12af\u0001\u0000\u0000\u0000\u12af\u12b4\u0003"+
		"\u0276\u013b\u0000\u12b0\u12b1\u0005\u0202\u0000\u0000\u12b1\u12b3\u0003"+
		"\u0276\u013b\u0000\u12b2\u12b0\u0001\u0000\u0000\u0000\u12b3\u12b6\u0001"+
		"\u0000\u0000\u0000\u12b4\u12b2\u0001\u0000\u0000\u0000\u12b4\u12b5\u0001"+
		"\u0000\u0000\u0000\u12b5\u12b7\u0001\u0000\u0000\u0000\u12b6\u12b4\u0001"+
		"\u0000\u0000\u0000\u12b7\u12b8\u0005\u01fd\u0000\u0000\u12b8\u026f\u0001"+
		"\u0000\u0000\u0000\u12b9\u12ba\u0005\u01c8\u0000\u0000\u12ba\u12c6\u0005"+
		"\u01fc\u0000\u0000\u12bb\u12bc\u0003\u021e\u010f\u0000\u12bc\u12c3\u0003"+
		"\u028a\u0145\u0000\u12bd\u12be\u0005\u0202\u0000\u0000\u12be\u12bf\u0003"+
		"\u021e\u010f\u0000\u12bf\u12c0\u0003\u028a\u0145\u0000\u12c0\u12c2\u0001"+
		"\u0000\u0000\u0000\u12c1\u12bd\u0001\u0000\u0000\u0000\u12c2\u12c5\u0001"+
		"\u0000\u0000\u0000\u12c3\u12c1\u0001\u0000\u0000\u0000\u12c3\u12c4\u0001"+
		"\u0000\u0000\u0000\u12c4\u12c7\u0001\u0000\u0000\u0000\u12c5\u12c3\u0001"+
		"\u0000\u0000\u0000\u12c6\u12bb\u0001\u0000\u0000\u0000\u12c6\u12c7\u0001"+
		"\u0000\u0000\u0000\u12c7\u12c9\u0001\u0000\u0000\u0000\u12c8\u12ca\u0003"+
		"\u0274\u013a\u0000\u12c9\u12c8\u0001\u0000\u0000\u0000\u12c9\u12ca\u0001"+
		"\u0000\u0000\u0000\u12ca\u12cb\u0001\u0000\u0000\u0000\u12cb\u12cc\u0005"+
		"\u01fd\u0000\u0000\u12cc\u0271\u0001\u0000\u0000\u0000\u12cd\u12d8\u0003"+
		"\u0298\u014c\u0000\u12ce\u12cf\u0005\u009b\u0000\u0000\u12cf\u12d9\u0005"+
		"\u0116\u0000\u0000\u12d0\u12d3\u0003\u02e4\u0172\u0000\u12d1\u12d2\u0005"+
		"\u0122\u0000\u0000\u12d2\u12d4\u0003\u021e\u010f\u0000\u12d3\u12d1\u0001"+
		"\u0000\u0000\u0000\u12d3\u12d4\u0001\u0000\u0000\u0000\u12d4\u12d6\u0001"+
		"\u0000\u0000\u0000\u12d5\u12d7\u0003\u0274\u013a\u0000\u12d6\u12d5\u0001"+
		"\u0000\u0000\u0000\u12d6\u12d7\u0001\u0000\u0000\u0000\u12d7\u12d9\u0001"+
		"\u0000\u0000\u0000\u12d8\u12ce\u0001\u0000\u0000\u0000\u12d8\u12d0\u0001"+
		"\u0000\u0000\u0000\u12d9\u0273\u0001\u0000\u0000\u0000\u12da\u12db\u0005"+
		"i\u0000\u0000\u12db\u12dc\u0003\u021e\u010f\u0000\u12dc\u0275\u0001\u0000"+
		"\u0000\u0000\u12dd\u12e6\u0003\u0200\u0100\u0000\u12de\u12e0\u0005\u0013"+
		"\u0000\u0000\u12df\u12de\u0001\u0000\u0000\u0000\u12df\u12e0\u0001\u0000"+
		"\u0000\u0000\u12e0\u12e4\u0001\u0000\u0000\u0000\u12e1\u12e5\u0003\u02fc"+
		"\u017e\u0000\u12e2\u12e3\u0005\u0085\u0000\u0000\u12e3\u12e5\u0003\u021c"+
		"\u010e\u0000\u12e4\u12e1\u0001\u0000\u0000\u0000\u12e4\u12e2\u0001\u0000"+
		"\u0000\u0000\u12e5\u12e7\u0001\u0000\u0000\u0000\u12e6\u12df\u0001\u0000"+
		"\u0000\u0000\u12e6\u12e7\u0001\u0000\u0000\u0000\u12e7\u0277\u0001\u0000"+
		"\u0000\u0000\u12e8\u12ec\u0005\u01b3\u0000\u0000\u12e9\u12ea\u0005\u00f8"+
		"\u0000\u0000\u12ea\u12ed\u0005\u01ac\u0000\u0000\u12eb\u12ed\u0003\u0202"+
		"\u0101\u0000\u12ec\u12e9\u0001\u0000\u0000\u0000\u12ec\u12eb\u0001\u0000"+
		"\u0000\u0000\u12ed\u0279\u0001\u0000\u0000\u0000\u12ee\u12f4\u0005\u0178"+
		"\u0000\u0000\u12ef\u12f5\u0005\u01d0\u0000\u0000\u12f0\u12f2\u0005\u00f8"+
		"\u0000\u0000\u12f1\u12f3\u0005\u01ac\u0000\u0000\u12f2\u12f1\u0001\u0000"+
		"\u0000\u0000\u12f2\u12f3\u0001\u0000\u0000\u0000\u12f3\u12f5\u0001\u0000"+
		"\u0000\u0000\u12f4\u12ef\u0001\u0000\u0000\u0000\u12f4\u12f0\u0001\u0000"+
		"\u0000\u0000\u12f5\u027b\u0001\u0000\u0000\u0000\u12f6\u12f7\u0005\u007f"+
		"\u0000\u0000\u12f7\u12f8\u0003\u021e\u010f\u0000\u12f8\u027d\u0001\u0000"+
		"\u0000\u0000\u12f9\u12fa\u0005\u01b3\u0000\u0000\u12fa\u12fb\u0003\u021e"+
		"\u010f\u0000\u12fb\u027f\u0001\u0000\u0000\u0000\u12fc\u12fd\u0005\u00f8"+
		"\u0000\u0000\u12fd\u1305\u0005\u00b0\u0000\u0000\u12fe\u1302\u0005\u00b0"+
		"\u0000\u0000\u12ff\u1300\u0005\u016f\u0000\u0000\u1300\u1301\u0005\u0213"+
		"\u0000\u0000\u1301\u1303\u0003\u021e\u010f\u0000\u1302\u12ff\u0001\u0000"+
		"\u0000\u0000\u1302\u1303\u0001\u0000\u0000\u0000\u1303\u1305\u0001\u0000"+
		"\u0000\u0000\u1304\u12fc\u0001\u0000\u0000\u0000\u1304\u12fe\u0001\u0000"+
		"\u0000\u0000\u1305\u0281\u0001\u0000\u0000\u0000\u1306\u1307\u0003\u0200"+
		"\u0100\u0000\u1307\u0283\u0001\u0000\u0000\u0000\u1308\u130a\u0003\u00c2"+
		"a\u0000\u1309\u1308\u0001\u0000\u0000\u0000\u130a\u130b\u0001\u0000\u0000"+
		"\u0000\u130b\u1309\u0001\u0000\u0000\u0000\u130b\u130c\u0001\u0000\u0000"+
		"\u0000\u130c\u1310\u0001\u0000\u0000\u0000\u130d\u1310\u0003\u00e2q\u0000"+
		"\u130e\u1310\u0003\u0004\u0002\u0000\u130f\u1309\u0001\u0000\u0000\u0000"+
		"\u130f\u130d\u0001\u0000\u0000\u0000\u130f\u130e\u0001\u0000\u0000\u0000"+
		"\u1310\u0285\u0001\u0000\u0000\u0000\u1311\u1312\u0005\u0002\u0000\u0000"+
		"\u1312\u1313\u0003\u0282\u0141\u0000\u1313\u1314\u0005\u0003\u0000\u0000"+
		"\u1314\u131c\u0003\u0284\u0142\u0000\u1315\u1316\u0005\u0005\u0000\u0000"+
		"\u1316\u1317\u0003\u0282\u0141\u0000\u1317\u1318\u0005\u0003\u0000\u0000"+
		"\u1318\u1319\u0003\u0284\u0142\u0000\u1319\u131b\u0001\u0000\u0000\u0000"+
		"\u131a\u1315\u0001\u0000\u0000\u0000\u131b\u131e\u0001\u0000\u0000\u0000"+
		"\u131c\u131a\u0001\u0000\u0000\u0000\u131c\u131d\u0001\u0000\u0000\u0000"+
		"\u131d\u1321\u0001\u0000\u0000\u0000\u131e\u131c\u0001\u0000\u0000\u0000"+
		"\u131f\u1320\u0005\u0004\u0000\u0000\u1320\u1322\u0003\u0284\u0142\u0000"+
		"\u1321\u131f\u0001\u0000\u0000\u0000\u1321\u1322\u0001\u0000\u0000\u0000"+
		"\u1322\u1323\u0001\u0000\u0000\u0000\u1323\u1324\u0005\u0006\u0000\u0000"+
		"\u1324\u0287\u0001\u0000\u0000\u0000\u1325\u1327\u0007C\u0000\u0000\u1326"+
		"\u1328\u0005\u009b\u0000\u0000\u1327\u1326\u0001\u0000\u0000\u0000\u1327"+
		"\u1328\u0001\u0000\u0000\u0000\u1328\u1329\u0001\u0000\u0000\u0000\u1329"+
		"\u132a\u0003\u01fa\u00fd\u0000\u132a\u0289\u0001\u0000\u0000\u0000\u132b"+
		"\u132d\u0005\u0013\u0000\u0000\u132c\u132b\u0001\u0000\u0000\u0000\u132c"+
		"\u132d\u0001\u0000\u0000\u0000\u132d\u1330\u0001\u0000\u0000\u0000\u132e"+
		"\u1331\u0003\u02fa\u017d\u0000\u132f\u1331\u0003\u028e\u0147\u0000\u1330"+
		"\u132e\u0001\u0000\u0000\u0000\u1330\u132f\u0001\u0000\u0000\u0000\u1331"+
		"\u028b\u0001\u0000\u0000\u0000\u1332\u1335\u0003\u02fa\u017d\u0000\u1333"+
		"\u1335\u0003\u028e\u0147\u0000\u1334\u1332\u0001\u0000\u0000\u0000\u1334"+
		"\u1333\u0001\u0000\u0000\u0000\u1335\u028d\u0001\u0000\u0000\u0000\u1336"+
		"\u1337\u0003\u02f8\u017c\u0000\u1337\u028f\u0001\u0000\u0000\u0000\u1338"+
		"\u133b\u0005\u01ba\u0000\u0000\u1339\u133c\u0003\u0292\u0149\u0000\u133a"+
		"\u133c\u0003\u01fe\u00ff\u0000\u133b\u1339\u0001\u0000\u0000\u0000\u133b"+
		"\u133a\u0001\u0000\u0000\u0000\u133c\u0291\u0001\u0000\u0000\u0000\u133d"+
		"\u133e\u0005W\u0000\u0000\u133e\u133f\u0005\u010b\u0000\u0000\u133f\u1340"+
		"\u0003\u02ca\u0165\u0000\u1340\u0293\u0001\u0000\u0000\u0000\u1341\u1344"+
		"\u0003\u02c6\u0163\u0000\u1342\u1344\u0003\u01f6\u00fb\u0000\u1343\u1341"+
		"\u0001\u0000\u0000\u0000\u1343\u1342\u0001\u0000\u0000\u0000\u1344\u0295"+
		"\u0001\u0000\u0000\u0000\u1345\u1346\u0005\u00c0\u0000\u0000\u1346\u134b"+
		"\u0003\u0294\u014a\u0000\u1347\u1348\u0005\u0202\u0000\u0000\u1348\u134a"+
		"\u0003\u0294\u014a\u0000\u1349\u1347\u0001\u0000\u0000\u0000\u134a\u134d"+
		"\u0001\u0000\u0000\u0000\u134b\u1349\u0001\u0000\u0000\u0000\u134b\u134c"+
		"\u0001\u0000\u0000\u0000\u134c\u135a\u0001\u0000\u0000\u0000\u134d\u134b"+
		"\u0001\u0000\u0000\u0000\u134e\u134f\u0005,\u0000\u0000\u134f\u1350\u0005"+
		">\u0000\u0000\u1350\u1351\u0005\u00c0\u0000\u0000\u1351\u1356\u0003\u0294"+
		"\u014a\u0000\u1352\u1353\u0005\u0202\u0000\u0000\u1353\u1355\u0003\u0294"+
		"\u014a\u0000\u1354\u1352\u0001\u0000\u0000\u0000\u1355\u1358\u0001\u0000"+
		"\u0000\u0000\u1356\u1354\u0001\u0000\u0000\u0000\u1356\u1357\u0001\u0000"+
		"\u0000\u0000\u1357\u135a\u0001\u0000\u0000\u0000\u1358\u1356\u0001\u0000"+
		"\u0000\u0000\u1359\u1345\u0001\u0000\u0000\u0000\u1359\u134e\u0001\u0000"+
		"\u0000\u0000\u135a\u0297\u0001\u0000\u0000\u0000\u135b\u135e\u0003\u02fa"+
		"\u017d\u0000\u135c\u135e\u0003\u02f8\u017c\u0000\u135d\u135b\u0001\u0000"+
		"\u0000\u0000\u135d\u135c\u0001\u0000\u0000\u0000\u135e\u0299\u0001\u0000"+
		"\u0000\u0000\u135f\u1360\u0003\u02fa\u017d\u0000\u1360\u029b\u0001\u0000"+
		"\u0000\u0000\u1361\u1362\u0003\u02fa\u017d\u0000\u1362\u029d\u0001\u0000"+
		"\u0000\u0000\u1363\u1364\u0003\u02fa\u017d\u0000\u1364\u029f\u0001\u0000"+
		"\u0000\u0000\u1365\u1366\u0003\u02fa\u017d\u0000\u1366\u02a1\u0001\u0000"+
		"\u0000\u0000\u1367\u1368\u0003\u02fa\u017d\u0000\u1368\u02a3\u0001\u0000"+
		"\u0000\u0000\u1369\u136a\u0003\u02fa\u017d\u0000\u136a\u02a5\u0001\u0000"+
		"\u0000\u0000\u136b\u1370\u0003\u02fa\u017d\u0000\u136c\u136d\u0005\u01f5"+
		"\u0000\u0000\u136d\u136f\u0003\u02fc\u017e\u0000\u136e\u136c\u0001\u0000"+
		"\u0000\u0000\u136f\u1372\u0001\u0000\u0000\u0000\u1370\u136e\u0001\u0000"+
		"\u0000\u0000\u1370\u1371\u0001\u0000\u0000\u0000\u1371\u1375\u0001\u0000"+
		"\u0000\u0000\u1372\u1370\u0001\u0000\u0000\u0000\u1373\u1374\u0005\u0204"+
		"\u0000\u0000\u1374\u1376\u0003\u02d0\u0168\u0000\u1375\u1373\u0001\u0000"+
		"\u0000\u0000\u1375\u1376\u0001\u0000\u0000\u0000\u1376\u02a7\u0001\u0000"+
		"\u0000\u0000\u1377\u1378\u0003\u02a4\u0152\u0000\u1378\u1379\u0005\u01f5"+
		"\u0000\u0000\u1379\u137b\u0001\u0000\u0000\u0000\u137a\u1377\u0001\u0000"+
		"\u0000\u0000\u137a\u137b\u0001\u0000\u0000\u0000\u137b\u137c\u0001\u0000"+
		"\u0000\u0000\u137c\u137d\u0003\u02fa\u017d\u0000\u137d\u02a9\u0001\u0000"+
		"\u0000\u0000\u137e\u1381\u0003\u02fa\u017d\u0000\u137f\u1380\u0005\u01f5"+
		"\u0000\u0000\u1380\u1382\u0003\u02fc\u017e\u0000\u1381\u137f\u0001\u0000"+
		"\u0000\u0000\u1381\u1382\u0001\u0000\u0000\u0000\u1382\u02ab\u0001\u0000"+
		"\u0000\u0000\u1383\u1384\u0003\u02fa\u017d\u0000\u1384\u02ad\u0001\u0000"+
		"\u0000\u0000\u1385\u1386\u0003\u02fa\u017d\u0000\u1386\u02af\u0001\u0000"+
		"\u0000\u0000\u1387\u1388\u0003\u02fa\u017d\u0000\u1388\u02b1\u0001\u0000"+
		"\u0000\u0000\u1389\u138e\u0003\u02fa\u017d\u0000\u138a\u138b\u0005\u01f5"+
		"\u0000\u0000\u138b\u138d\u0003\u02fc\u017e\u0000\u138c\u138a\u0001\u0000"+
		"\u0000\u0000\u138d\u1390\u0001\u0000\u0000\u0000\u138e\u138c\u0001\u0000"+
		"\u0000\u0000\u138e\u138f\u0001\u0000\u0000\u0000\u138f\u02b3\u0001\u0000"+
		"\u0000\u0000\u1390\u138e\u0001\u0000\u0000\u0000\u1391\u1392\u0003\u02fa"+
		"\u017d\u0000\u1392\u02b5\u0001\u0000\u0000\u0000\u1393\u1398\u0003\u02fa"+
		"\u017d\u0000\u1394\u1395\u0005\u01f5\u0000\u0000\u1395\u1397\u0003\u02fc"+
		"\u017e\u0000\u1396\u1394\u0001\u0000\u0000\u0000\u1397\u139a\u0001\u0000"+
		"\u0000\u0000\u1398\u1396\u0001\u0000\u0000\u0000\u1398\u1399\u0001\u0000"+
		"\u0000\u0000\u1399\u139d\u0001\u0000\u0000\u0000\u139a\u1398\u0001\u0000"+
		"\u0000\u0000\u139b\u139c\u0005\u0204\u0000\u0000\u139c\u139e\u0003\u02d0"+
		"\u0168\u0000\u139d\u139b\u0001\u0000\u0000\u0000\u139d\u139e\u0001\u0000"+
		"\u0000\u0000\u139e\u02b7\u0001\u0000\u0000\u0000\u139f\u13a0\u0003\u02fc"+
		"\u017e\u0000\u13a0\u02b9\u0001\u0000\u0000\u0000\u13a1\u13a6\u0003\u02fc"+
		"\u017e\u0000\u13a2\u13a3\u0005\u01f5\u0000\u0000\u13a3\u13a5\u0003\u02fc"+
		"\u017e\u0000\u13a4\u13a2\u0001\u0000\u0000\u0000\u13a5\u13a8\u0001\u0000"+
		"\u0000\u0000\u13a6\u13a4\u0001\u0000\u0000\u0000\u13a6\u13a7\u0001\u0000"+
		"\u0000\u0000\u13a7\u02bb\u0001\u0000\u0000\u0000\u13a8\u13a6\u0001\u0000"+
		"\u0000\u0000\u13a9\u13ae\u0003\u02fc\u017e\u0000\u13aa\u13ab\u0005\u01f5"+
		"\u0000\u0000\u13ab\u13ad\u0003\u02fc\u017e\u0000\u13ac\u13aa\u0001\u0000"+
		"\u0000\u0000\u13ad\u13b0\u0001\u0000\u0000\u0000\u13ae\u13ac\u0001\u0000"+
		"\u0000\u0000\u13ae\u13af\u0001\u0000\u0000\u0000\u13af\u02bd\u0001\u0000"+
		"\u0000\u0000\u13b0\u13ae\u0001\u0000\u0000\u0000\u13b1\u13b6\u0003\u02fa"+
		"\u017d\u0000\u13b2\u13b3\u0005\u01f5\u0000\u0000\u13b3\u13b5\u0003\u02fc"+
		"\u017e\u0000\u13b4\u13b2\u0001\u0000\u0000\u0000\u13b5\u13b8\u0001\u0000"+
		"\u0000\u0000\u13b6\u13b4\u0001\u0000\u0000\u0000\u13b6\u13b7\u0001\u0000"+
		"\u0000\u0000\u13b7\u02bf\u0001\u0000\u0000\u0000\u13b8\u13b6\u0001\u0000"+
		"\u0000\u0000\u13b9\u13bc\u0003\u02fa\u017d\u0000\u13ba\u13bb\u0005\u01f5"+
		"\u0000\u0000\u13bb\u13bd\u0003\u02fc\u017e\u0000\u13bc\u13ba\u0001\u0000"+
		"\u0000\u0000\u13bc\u13bd\u0001\u0000\u0000\u0000\u13bd\u02c1\u0001\u0000"+
		"\u0000\u0000\u13be\u13c1\u0003\u02fa\u017d\u0000\u13bf\u13c0\u0005\u01f5"+
		"\u0000\u0000\u13c0\u13c2\u0003\u02fc\u017e\u0000\u13c1\u13bf\u0001\u0000"+
		"\u0000\u0000\u13c1\u13c2\u0001\u0000\u0000\u0000\u13c2\u02c3\u0001\u0000"+
		"\u0000\u0000\u13c3\u13c6\u0003\u02fa\u017d\u0000\u13c4\u13c5\u0005\u01f5"+
		"\u0000\u0000\u13c5\u13c7\u0003\u02fc\u017e\u0000\u13c6\u13c4\u0001\u0000"+
		"\u0000\u0000\u13c6\u13c7\u0001\u0000\u0000\u0000\u13c7\u02c5\u0001\u0000"+
		"\u0000\u0000\u13c8\u13c9\u0005\u0216\u0000\u0000\u13c9\u13cb\u0003\u02d6"+
		"\u016b\u0000\u13ca\u13c8\u0001\u0000\u0000\u0000\u13ca\u13cb\u0001\u0000"+
		"\u0000\u0000\u13cb\u13cc\u0001\u0000\u0000\u0000\u13cc\u13cf\u0003\u02fc"+
		"\u017e\u0000\u13cd\u13ce\u0005\u01f5\u0000\u0000\u13ce\u13d0\u0003\u02fc"+
		"\u017e\u0000\u13cf\u13cd\u0001\u0000\u0000\u0000\u13cf\u13d0\u0001\u0000"+
		"\u0000\u0000\u13d0\u13d3\u0001\u0000\u0000\u0000\u13d1\u13d3\u0003\u02ec"+
		"\u0176\u0000\u13d2\u13ca\u0001\u0000\u0000\u0000\u13d2\u13d1\u0001\u0000"+
		"\u0000\u0000\u13d3\u02c7\u0001\u0000\u0000\u0000\u13d4\u13d5\u0003\u02fa"+
		"\u017d\u0000\u13d5\u02c9\u0001\u0000\u0000\u0000\u13d6\u13d9\u0003\u02fa"+
		"\u017d\u0000\u13d7\u13d9\u0003\u02ec\u0176\u0000\u13d8\u13d6\u0001\u0000"+
		"\u0000\u0000\u13d8\u13d7\u0001\u0000\u0000\u0000\u13d9\u02cb\u0001\u0000"+
		"\u0000\u0000\u13da\u13dd\u0003\u02fa\u017d\u0000\u13db\u13dd\u0003\u02ec"+
		"\u0176\u0000\u13dc\u13da\u0001\u0000\u0000\u0000\u13dc\u13db\u0001\u0000"+
		"\u0000\u0000\u13dd\u02cd\u0001\u0000\u0000\u0000\u13de\u13e1\u0003\u02fa"+
		"\u017d\u0000\u13df\u13e0\u0005\u01f5\u0000\u0000\u13e0\u13e2\u0003\u02fc"+
		"\u017e\u0000\u13e1\u13df\u0001\u0000\u0000\u0000\u13e1\u13e2\u0001\u0000"+
		"\u0000\u0000\u13e2\u02cf\u0001\u0000\u0000\u0000\u13e3\u13e8\u0003\u02fa"+
		"\u017d\u0000\u13e4\u13e5\u0005\u01f5\u0000\u0000\u13e5\u13e7\u0003\u02fa"+
		"\u017d\u0000\u13e6\u13e4\u0001\u0000\u0000\u0000\u13e7\u13ea\u0001\u0000"+
		"\u0000\u0000\u13e8\u13e6\u0001\u0000\u0000\u0000\u13e8\u13e9\u0001\u0000"+
		"\u0000\u0000\u13e9\u02d1\u0001\u0000\u0000\u0000\u13ea\u13e8\u0001\u0000"+
		"\u0000\u0000\u13eb\u13f0\u0003\u02fa\u017d\u0000\u13ec\u13ed\u0005\u01f5"+
		"\u0000\u0000\u13ed\u13ef\u0003\u02fc\u017e\u0000\u13ee\u13ec\u0001\u0000"+
		"\u0000\u0000\u13ef\u13f2\u0001\u0000\u0000\u0000\u13f0\u13ee\u0001\u0000"+
		"\u0000\u0000\u13f0\u13f1\u0001\u0000\u0000\u0000\u13f1\u02d3\u0001\u0000"+
		"\u0000\u0000\u13f2\u13f0\u0001\u0000\u0000\u0000\u13f3\u13f6\u0003\u02fa"+
		"\u017d\u0000\u13f4\u13f5\u0005\u01f5\u0000\u0000\u13f5\u13f7\u0003\u02fc"+
		"\u017e\u0000\u13f6\u13f4\u0001\u0000\u0000\u0000\u13f6\u13f7\u0001\u0000"+
		"\u0000\u0000\u13f7\u13fb\u0001\u0000\u0000\u0000\u13f8\u13f9\u0005\u0204"+
		"\u0000\u0000\u13f9\u13fc\u0003\u02d0\u0168\u0000\u13fa\u13fc\u0003\u0288"+
		"\u0144\u0000\u13fb\u13f8\u0001\u0000\u0000\u0000\u13fb\u13fa\u0001\u0000"+
		"\u0000\u0000\u13fb\u13fc\u0001\u0000\u0000\u0000\u13fc\u02d5\u0001\u0000"+
		"\u0000\u0000\u13fd\u1402\u0003\u02fc\u017e\u0000\u13fe\u13ff\u0005\u01f5"+
		"\u0000\u0000\u13ff\u1401\u0003\u02fc\u017e\u0000\u1400\u13fe\u0001\u0000"+
		"\u0000\u0000\u1401\u1404\u0001\u0000\u0000\u0000\u1402\u1400\u0001\u0000"+
		"\u0000\u0000\u1402\u1403\u0001\u0000\u0000\u0000\u1403\u02d7\u0001\u0000"+
		"\u0000\u0000\u1404\u1402\u0001\u0000\u0000\u0000\u1405\u1406\u0005\u00c7"+
		"\u0000\u0000\u1406\u1407\u0005\u01fc\u0000\u0000\u1407\u1408\u0005\u01da"+
		"\u0000\u0000\u1408\u1409\u0007\'\u0000\u0000\u1409\u140a\u0003\u01a6\u00d3"+
		"\u0000\u140a\u140c\u0005\u01fd\u0000\u0000\u140b\u140d\u0003\u025a\u012d"+
		"\u0000\u140c\u140b\u0001\u0000\u0000\u0000\u140c\u140d\u0001\u0000\u0000"+
		"\u0000\u140d\u02d9\u0001\u0000\u0000\u0000\u140e\u1410\u0005\u01fc\u0000"+
		"\u0000\u140f\u1411\u0003\u02e2\u0171\u0000\u1410\u140f\u0001\u0000\u0000"+
		"\u0000\u1410\u1411\u0001\u0000\u0000\u0000\u1411\u1416\u0001\u0000\u0000"+
		"\u0000\u1412\u1413\u0005\u0202\u0000\u0000\u1413\u1415\u0003\u02e2\u0171"+
		"\u0000\u1414\u1412\u0001\u0000\u0000\u0000\u1415\u1418\u0001\u0000\u0000"+
		"\u0000\u1416\u1414\u0001\u0000\u0000\u0000\u1416\u1417\u0001\u0000\u0000"+
		"\u0000\u1417\u1419\u0001\u0000\u0000\u0000\u1418\u1416\u0001\u0000\u0000"+
		"\u0000\u1419\u141b\u0005\u01fd\u0000\u0000\u141a\u141c\u0003\u02d8\u016c"+
		"\u0000\u141b\u141a\u0001\u0000\u0000\u0000\u141b\u141c\u0001\u0000\u0000"+
		"\u0000\u141c\u02db\u0001\u0000\u0000\u0000\u141d\u1422\u0005\u01fc\u0000"+
		"\u0000\u141e\u1420\u0003\u02e2\u0171\u0000\u141f\u1421\u0003\u02e0\u0170"+
		"\u0000\u1420\u141f\u0001\u0000\u0000\u0000\u1420\u1421\u0001\u0000\u0000"+
		"\u0000\u1421\u1423\u0001\u0000\u0000\u0000\u1422\u141e\u0001\u0000\u0000"+
		"\u0000\u1422\u1423\u0001\u0000\u0000\u0000\u1423\u142b\u0001\u0000\u0000"+
		"\u0000\u1424\u1425\u0005\u0202\u0000\u0000\u1425\u1427\u0003\u02e2\u0171"+
		"\u0000\u1426\u1428\u0003\u02e0\u0170\u0000\u1427\u1426\u0001\u0000\u0000"+
		"\u0000\u1427\u1428\u0001\u0000\u0000\u0000\u1428\u142a\u0001\u0000\u0000"+
		"\u0000\u1429\u1424\u0001\u0000\u0000\u0000\u142a\u142d\u0001\u0000\u0000"+
		"\u0000\u142b\u1429\u0001\u0000\u0000\u0000\u142b\u142c\u0001\u0000\u0000"+
		"\u0000\u142c\u142e\u0001\u0000\u0000\u0000\u142d\u142b\u0001\u0000\u0000"+
		"\u0000\u142e\u1430\u0005\u01fd\u0000\u0000\u142f\u1431\u0003\u02d8\u016c"+
		"\u0000\u1430\u142f\u0001\u0000\u0000\u0000\u1430\u1431\u0001\u0000\u0000"+
		"\u0000\u1431\u02dd\u0001\u0000\u0000\u0000\u1432\u1433\u0005\u01fc\u0000"+
		"\u0000\u1433\u1440\u0003\u02d2\u0169\u0000\u1434\u1437\u0005\u0202\u0000"+
		"\u0000\u1435\u1438\u0003\u02f6\u017b\u0000\u1436\u1438\u0005\u0105\u0000"+
		"\u0000\u1437\u1435\u0001\u0000\u0000\u0000\u1437\u1436\u0001\u0000\u0000"+
		"\u0000\u1438\u143e\u0001\u0000\u0000\u0000\u1439\u143c\u0005\u0202\u0000"+
		"\u0000\u143a\u143d\u0003\u02f6\u017b\u0000\u143b\u143d\u0005\u0105\u0000"+
		"\u0000\u143c\u143a\u0001\u0000\u0000\u0000\u143c\u143b\u0001\u0000\u0000"+
		"\u0000\u143d\u143f\u0001\u0000\u0000\u0000\u143e\u1439\u0001\u0000\u0000"+
		"\u0000\u143e\u143f\u0001\u0000\u0000\u0000\u143f\u1441\u0001\u0000\u0000"+
		"\u0000\u1440\u1434\u0001\u0000\u0000\u0000\u1440\u1441\u0001\u0000\u0000"+
		"\u0000\u1441\u1442\u0001\u0000\u0000\u0000\u1442\u1456\u0005\u01aa\u0000"+
		"\u0000\u1443\u1444\u0003\u02d4\u016a\u0000\u1444\u1445\u0005\u01f5\u0000"+
		"\u0000\u1445\u1446\u0005\u01ff\u0000\u0000\u1446\u1457\u0001\u0000\u0000"+
		"\u0000\u1447\u1457\u0005\u01ff\u0000\u0000\u1448\u144a\u0003\u0200\u0100"+
		"\u0000\u1449\u144b\u0003\u028a\u0145\u0000\u144a\u1449\u0001\u0000\u0000"+
		"\u0000\u144a\u144b\u0001\u0000\u0000\u0000\u144b\u1453\u0001\u0000\u0000"+
		"\u0000\u144c\u144d\u0005\u0202\u0000\u0000\u144d\u144f\u0003\u0200\u0100"+
		"\u0000\u144e\u1450\u0003\u028a\u0145\u0000\u144f\u144e\u0001\u0000\u0000"+
		"\u0000\u144f\u1450\u0001\u0000\u0000\u0000\u1450\u1452\u0001\u0000\u0000"+
		"\u0000\u1451\u144c\u0001\u0000\u0000\u0000\u1452\u1455\u0001\u0000\u0000"+
		"\u0000\u1453\u1451\u0001\u0000\u0000\u0000\u1453\u1454\u0001\u0000\u0000"+
		"\u0000\u1454\u1457\u0001\u0000\u0000\u0000\u1455\u1453\u0001\u0000\u0000"+
		"\u0000\u1456\u1443\u0001\u0000\u0000\u0000\u1456\u1447\u0001\u0000\u0000"+
		"\u0000\u1456\u1448\u0001\u0000\u0000\u0000\u1457\u1458\u0001\u0000\u0000"+
		"\u0000\u1458\u145a\u0005\u01fd\u0000\u0000\u1459\u145b\u0003\u02d8\u016c"+
		"\u0000\u145a\u1459\u0001\u0000\u0000\u0000\u145a\u145b\u0001\u0000\u0000"+
		"\u0000\u145b\u02df\u0001\u0000\u0000\u0000\u145c\u145d\u0007D\u0000\u0000"+
		"\u145d\u145e\u0005\u0106\u0000\u0000\u145e\u02e1\u0001\u0000\u0000\u0000"+
		"\u145f\u1460\u0003\u02fa\u017d\u0000\u1460\u1461\u0005\u0016\u0000\u0000"+
		"\u1461\u1463\u0001\u0000\u0000\u0000\u1462\u145f\u0001\u0000\u0000\u0000"+
		"\u1462\u1463\u0001\u0000\u0000\u0000\u1463\u1464\u0001\u0000\u0000\u0000"+
		"\u1464\u1465\u0003\u0202\u0101\u0000\u1465\u02e3\u0001\u0000\u0000\u0000"+
		"\u1466\u1473\u0003\u02e6\u0173\u0000\u1467\u1469\u0005\u013c\u0000\u0000"+
		"\u1468\u1467\u0001\u0000\u0000\u0000\u1468\u1469\u0001\u0000\u0000\u0000"+
		"\u1469\u146a\u0001\u0000\u0000\u0000\u146a\u146d\u0003\u02ba\u015d\u0000"+
		"\u146b\u146c\u0005\u0204\u0000\u0000\u146c\u146e\u0003\u02d0\u0168\u0000"+
		"\u146d\u146b\u0001\u0000\u0000\u0000\u146d\u146e\u0001\u0000\u0000\u0000"+
		"\u146e\u1470\u0001\u0000\u0000\u0000\u146f\u1471\u0007E\u0000\u0000\u1470"+
		"\u146f\u0001\u0000\u0000\u0000\u1470\u1471\u0001\u0000\u0000\u0000\u1471"+
		"\u1473\u0001\u0000\u0000\u0000\u1472\u1466\u0001\u0000\u0000\u0000\u1472"+
		"\u1468\u0001\u0000\u0000\u0000\u1473\u02e5\u0001\u0000\u0000\u0000\u1474"+
		"\u1476\u0003\u02ea\u0175\u0000\u1475\u1477\u0003\u02e8\u0174\u0000\u1476"+
		"\u1475\u0001\u0000\u0000\u0000\u1476\u1477\u0001\u0000\u0000\u0000\u1477"+
		"\u147e\u0001\u0000\u0000\u0000\u1478\u147a\u0005\u01bc\u0000\u0000\u1479"+
		"\u147b\u0005\u00d4\u0000\u0000\u147a\u1479\u0001\u0000\u0000\u0000\u147a"+
		"\u147b\u0001\u0000\u0000\u0000\u147b\u147c\u0001\u0000\u0000\u0000\u147c"+
		"\u147d\u0005\u0189\u0000\u0000\u147d\u147f\u0005\u01d2\u0000\u0000\u147e"+
		"\u1478\u0001\u0000\u0000\u0000\u147e\u147f\u0001\u0000\u0000\u0000\u147f"+
		"\u1491\u0001\u0000\u0000\u0000\u1480\u1481\u0005\u00bf\u0000\u0000\u1481"+
		"\u1486\u0007F\u0000\u0000\u1482\u1483\u0005\u01fc\u0000\u0000\u1483\u1484"+
		"\u0003\u0202\u0101\u0000\u1484\u1485\u0005\u01fd\u0000\u0000\u1485\u1487"+
		"\u0001\u0000\u0000\u0000\u1486\u1482\u0001\u0000\u0000\u0000\u1486\u1487"+
		"\u0001\u0000\u0000\u0000\u1487\u1488\u0001\u0000\u0000\u0000\u1488\u1489"+
		"\u0005\u0192\u0000\u0000\u1489\u148e\u0007G\u0000\u0000\u148a\u148b\u0005"+
		"\u01fc\u0000\u0000\u148b\u148c\u0003\u0202\u0101\u0000\u148c\u148d\u0005"+
		"\u01fd\u0000\u0000\u148d\u148f\u0001\u0000\u0000\u0000\u148e\u148a\u0001"+
		"\u0000\u0000\u0000\u148e\u148f\u0001\u0000\u0000\u0000\u148f\u1491\u0001"+
		"\u0000\u0000\u0000\u1490\u1474\u0001\u0000\u0000\u0000\u1490\u1480\u0001"+
		"\u0000\u0000\u0000\u1491\u02e7\u0001\u0000\u0000\u0000\u1492\u1493\u0005"+
		"\u01fc\u0000\u0000\u1493\u1496\u0003\u02f6\u017b\u0000\u1494\u1495\u0005"+
		"\u0202\u0000\u0000\u1495\u1497\u0003\u02f6\u017b\u0000\u1496\u1494\u0001"+
		"\u0000\u0000\u0000\u1496\u1497\u0001\u0000\u0000\u0000\u1497\u1499\u0001"+
		"\u0000\u0000\u0000\u1498\u149a\u0007H\u0000\u0000\u1499\u1498\u0001\u0000"+
		"\u0000\u0000\u1499\u149a\u0001\u0000\u0000\u0000\u149a\u149b\u0001\u0000"+
		"\u0000\u0000\u149b\u149c\u0005\u01fd\u0000\u0000\u149c\u02e9\u0001\u0000"+
		"\u0000\u0000\u149d\u14da\u0005%\u0000\u0000\u149e\u14da\u0005\u012d\u0000"+
		"\u0000\u149f\u14da\u0005\u00ef\u0000\u0000\u14a0\u14da\u0005$\u0000\u0000"+
		"\u14a1\u14da\u0005#\u0000\u0000\u14a2\u14da\u0005\u00f0\u0000\u0000\u14a3"+
		"\u14da\u0005\u012e\u0000\u0000\u14a4\u14da\u0005\u012f\u0000\u0000\u14a5"+
		"\u14da\u0005\u016c\u0000\u0000\u14a6\u14da\u0005\u016d\u0000\u0000\u14a7"+
		"\u14da\u0005\u0109\u0000\u0000\u14a8\u14da\u0005d\u0000\u0000\u14a9\u14da"+
		"\u0005\u00bd\u0000\u0000\u14aa\u14da\u0005\u00bc\u0000\u0000\u14ab\u14da"+
		"\u0005\u0108\u0000\u0000\u14ac\u14da\u0005\u0171\u0000\u0000\u14ad\u14da"+
		"\u0005\u0107\u0000\u0000\u14ae\u14da\u0005e\u0000\u0000\u14af\u14b1\u0005"+
		"v\u0000\u0000\u14b0\u14b2\u0005\u0132\u0000\u0000\u14b1\u14b0\u0001\u0000"+
		"\u0000\u0000\u14b1\u14b2\u0001\u0000\u0000\u0000\u14b2\u14da\u0001\u0000"+
		"\u0000\u0000\u14b3\u14da\u0005\u0098\u0000\u0000\u14b4\u14da\u0005\u013a"+
		"\u0000\u0000\u14b5\u14da\u0005\u00f2\u0000\u0000\u14b6\u14b8\u0005\u00da"+
		"\u0000\u0000\u14b7\u14b9\u0005\u0138\u0000\u0000\u14b8\u14b7\u0001\u0000"+
		"\u0000\u0000\u14b8\u14b9\u0001\u0000\u0000\u0000\u14b9\u14da\u0001\u0000"+
		"\u0000\u0000\u14ba\u14da\u00056\u0000\u0000\u14bb\u14da\u00058\u0000\u0000"+
		"\u14bc\u14da\u0005\u01af\u0000\u0000\u14bd\u14da\u0005\u01ae\u0000\u0000"+
		"\u14be\u14da\u0005\u017f\u0000\u0000\u14bf\u14da\u0005\u0138\u0000\u0000"+
		"\u14c0\u14da\u0005)\u0000\u0000\u14c1\u14da\u0005^\u0000\u0000\u14c2\u14da"+
		"\u0005\u0150\u0000\u0000\u14c3\u14da\u0005\u01a8\u0000\u0000\u14c4\u14da"+
		"\u0005\u01cf\u0000\u0000\u14c5\u14da\u0005\u00eb\u0000\u0000\u14c6\u14da"+
		"\u0005_\u0000\u0000\u14c7\u14da\u0005\u00a8\u0000\u0000\u14c8\u14da\u0005"+
		"\u00e4\u0000\u0000\u14c9\u14da\u0005\u015a\u0000\u0000\u14ca\u14da\u0005"+
		"\u018f\u0000\u0000\u14cb\u14da\u0005\u0190\u0000\u0000\u14cc\u14da\u0005"+
		"\u0191\u0000\u0000\u14cd\u14da\u0005\u018e\u0000\u0000\u14ce\u14da\u0005"+
		"\u018a\u0000\u0000\u14cf\u14da\u0005\u018d\u0000\u0000\u14d0\u14da\u0005"+
		"\u018c\u0000\u0000\u14d1\u14da\u0005\u018b\u0000\u0000\u14d2\u14da\u0005"+
		"\u01d1\u0000\u0000\u14d3\u14da\u0005x\u0000\u0000\u14d4\u14da\u0005\""+
		"\u0000\u0000\u14d5\u14da\u0005&\u0000\u0000\u14d6\u14da\u0005;\u0000\u0000"+
		"\u14d7\u14da\u0005\u00f4\u0000\u0000\u14d8\u14da\u0005\u00e6\u0000\u0000"+
		"\u14d9\u149d\u0001\u0000\u0000\u0000\u14d9\u149e\u0001\u0000\u0000\u0000"+
		"\u14d9\u149f\u0001\u0000\u0000\u0000\u14d9\u14a0\u0001\u0000\u0000\u0000"+
		"\u14d9\u14a1\u0001\u0000\u0000\u0000\u14d9\u14a2\u0001\u0000\u0000\u0000"+
		"\u14d9\u14a3\u0001\u0000\u0000\u0000\u14d9\u14a4\u0001\u0000\u0000\u0000"+
		"\u14d9\u14a5\u0001\u0000\u0000\u0000\u14d9\u14a6\u0001\u0000\u0000\u0000"+
		"\u14d9\u14a7\u0001\u0000\u0000\u0000\u14d9\u14a8\u0001\u0000\u0000\u0000"+
		"\u14d9\u14a9\u0001\u0000\u0000\u0000\u14d9\u14aa\u0001\u0000\u0000\u0000"+
		"\u14d9\u14ab\u0001\u0000\u0000\u0000\u14d9\u14ac\u0001\u0000\u0000\u0000"+
		"\u14d9\u14ad\u0001\u0000\u0000\u0000\u14d9\u14ae\u0001\u0000\u0000\u0000"+
		"\u14d9\u14af\u0001\u0000\u0000\u0000\u14d9\u14b3\u0001\u0000\u0000\u0000"+
		"\u14d9\u14b4\u0001\u0000\u0000\u0000\u14d9\u14b5\u0001\u0000\u0000\u0000"+
		"\u14d9\u14b6\u0001\u0000\u0000\u0000\u14d9\u14ba\u0001\u0000\u0000\u0000"+
		"\u14d9\u14bb\u0001\u0000\u0000\u0000\u14d9\u14bc\u0001\u0000\u0000\u0000"+
		"\u14d9\u14bd\u0001\u0000\u0000\u0000\u14d9\u14be\u0001\u0000\u0000\u0000"+
		"\u14d9\u14bf\u0001\u0000\u0000\u0000\u14d9\u14c0\u0001\u0000\u0000\u0000"+
		"\u14d9\u14c1\u0001\u0000\u0000\u0000\u14d9\u14c2\u0001\u0000\u0000\u0000"+
		"\u14d9\u14c3\u0001\u0000\u0000\u0000\u14d9\u14c4\u0001\u0000\u0000\u0000"+
		"\u14d9\u14c5\u0001\u0000\u0000\u0000\u14d9\u14c6\u0001\u0000\u0000\u0000"+
		"\u14d9\u14c7\u0001\u0000\u0000\u0000\u14d9\u14c8\u0001\u0000\u0000\u0000"+
		"\u14d9\u14c9\u0001\u0000\u0000\u0000\u14d9\u14ca\u0001\u0000\u0000\u0000"+
		"\u14d9\u14cb\u0001\u0000\u0000\u0000\u14d9\u14cc\u0001\u0000\u0000\u0000"+
		"\u14d9\u14cd\u0001\u0000\u0000\u0000\u14d9\u14ce\u0001\u0000\u0000\u0000"+
		"\u14d9\u14cf\u0001\u0000\u0000\u0000\u14d9\u14d0\u0001\u0000\u0000\u0000"+
		"\u14d9\u14d1\u0001\u0000\u0000\u0000\u14d9\u14d2\u0001\u0000\u0000\u0000"+
		"\u14d9\u14d3\u0001\u0000\u0000\u0000\u14d9\u14d4\u0001\u0000\u0000\u0000"+
		"\u14d9\u14d5\u0001\u0000\u0000\u0000\u14d9\u14d6\u0001\u0000\u0000\u0000"+
		"\u14d9\u14d7\u0001\u0000\u0000\u0000\u14d9\u14d8\u0001\u0000\u0000\u0000"+
		"\u14da\u02eb\u0001\u0000\u0000\u0000\u14db\u14df\u0005\u0206\u0000\u0000"+
		"\u14dc\u14dd\u0005\u0207\u0000\u0000\u14dd\u14df\u0005\u01f6\u0000\u0000"+
		"\u14de\u14db\u0001\u0000\u0000\u0000\u14de\u14dc\u0001\u0000\u0000\u0000"+
		"\u14df\u14e8\u0001\u0000\u0000\u0000\u14e0\u14e2\u0005\u00b3\u0000\u0000"+
		"\u14e1\u14e0\u0001\u0000\u0000\u0000\u14e1\u14e2\u0001\u0000\u0000\u0000"+
		"\u14e2\u14e6\u0001\u0000\u0000\u0000\u14e3\u14e7\u0005\u0206\u0000\u0000"+
		"\u14e4\u14e5\u0005\u0207\u0000\u0000\u14e5\u14e7\u0005\u01f6\u0000\u0000"+
		"\u14e6\u14e3\u0001\u0000\u0000\u0000\u14e6\u14e4\u0001\u0000\u0000\u0000"+
		"\u14e7\u14e9\u0001\u0000\u0000\u0000\u14e8\u14e1\u0001\u0000\u0000\u0000"+
		"\u14e8\u14e9\u0001\u0000\u0000\u0000\u14e9\u14ee\u0001\u0000\u0000\u0000"+
		"\u14ea\u14eb\u0005\u01f5\u0000\u0000\u14eb\u14ed\u0003\u02f0\u0178\u0000"+
		"\u14ec\u14ea\u0001\u0000\u0000\u0000\u14ed\u14f0\u0001\u0000\u0000\u0000"+
		"\u14ee\u14ec\u0001\u0000\u0000\u0000\u14ee\u14ef\u0001\u0000\u0000\u0000"+
		"\u14ef\u02ed\u0001\u0000\u0000\u0000\u14f0\u14ee\u0001\u0000\u0000\u0000"+
		"\u14f1\u14f6\u0003\u02f0\u0178\u0000\u14f2\u14f3\u0005\u01f5\u0000\u0000"+
		"\u14f3\u14f5\u0003\u02f0\u0178\u0000\u14f4\u14f2\u0001\u0000\u0000\u0000"+
		"\u14f5\u14f8\u0001\u0000\u0000\u0000\u14f6\u14f4\u0001\u0000\u0000\u0000"+
		"\u14f6\u14f7\u0001\u0000\u0000\u0000\u14f7\u02ef\u0001\u0000\u0000\u0000"+
		"\u14f8\u14f6\u0001\u0000\u0000\u0000\u14f9\u14fa\u0005\u0216\u0000\u0000"+
		"\u14fa\u14fc\u0003\u02d6\u016b\u0000\u14fb\u14f9\u0001\u0000\u0000\u0000"+
		"\u14fb\u14fc\u0001\u0000\u0000\u0000\u14fc\u14fd\u0001\u0000\u0000\u0000"+
		"\u14fd\u1502\u0003\u02fc\u017e\u0000\u14fe\u14ff\u0005\u01f5\u0000\u0000"+
		"\u14ff\u1501\u0003\u02fc\u017e\u0000\u1500\u14fe\u0001\u0000\u0000\u0000"+
		"\u1501\u1504\u0001\u0000\u0000\u0000\u1502\u1500\u0001\u0000\u0000\u0000"+
		"\u1502\u1503\u0001\u0000\u0000\u0000\u1503\u1506\u0001\u0000\u0000\u0000"+
		"\u1504\u1502\u0001\u0000\u0000\u0000\u1505\u1507\u0003\u02da\u016d\u0000"+
		"\u1506\u1505\u0001\u0000\u0000\u0000\u1506\u1507\u0001\u0000\u0000\u0000"+
		"\u1507\u02f1\u0001\u0000\u0000\u0000\u1508\u1509\u0005\u0216\u0000\u0000"+
		"\u1509\u150b\u0003\u02d6\u016b\u0000\u150a\u1508\u0001\u0000\u0000\u0000"+
		"\u150a\u150b\u0001\u0000\u0000\u0000\u150b\u150c\u0001\u0000\u0000\u0000"+
		"\u150c\u1511\u0003\u02fc\u017e\u0000\u150d\u150e\u0005\u01f5\u0000\u0000"+
		"\u150e\u1510\u0003\u02fc\u017e\u0000\u150f\u150d\u0001\u0000\u0000\u0000"+
		"\u1510\u1513\u0001\u0000\u0000\u0000\u1511\u150f\u0001\u0000\u0000\u0000"+
		"\u1511\u1512\u0001\u0000\u0000\u0000\u1512\u02f3\u0001\u0000\u0000\u0000"+
		"\u1513\u1511\u0001\u0000\u0000\u0000\u1514\u1517\u0005\u018a\u0000\u0000"+
		"\u1515\u1518\u0003\u02f8\u017c\u0000\u1516\u1518\u0003\u02ec\u0176\u0000"+
		"\u1517\u1515\u0001\u0000\u0000\u0000\u1517\u1516\u0001\u0000\u0000\u0000"+
		"\u1518\u151d\u0001\u0000\u0000\u0000\u1519\u151a\u0005\u0017\u0000\u0000"+
		"\u151a\u151b\u0005\u0189\u0000\u0000\u151b\u151c\u0005\u01d2\u0000\u0000"+
		"\u151c\u151e\u0003\u02f8\u017c\u0000\u151d\u1519\u0001\u0000\u0000\u0000"+
		"\u151d\u151e\u0001\u0000\u0000\u0000\u151e\u1553\u0001\u0000\u0000\u0000"+
		"\u151f\u1523\u0005\u00bf\u0000\u0000\u1520\u1524\u0003\u02f8\u017c\u0000"+
		"\u1521\u1524\u0003\u02ec\u0176\u0000\u1522\u1524\u0003\u02f0\u0178\u0000"+
		"\u1523\u1520\u0001\u0000\u0000\u0000\u1523\u1521\u0001\u0000\u0000\u0000"+
		"\u1523\u1522\u0001\u0000\u0000\u0000\u1524\u1525\u0001\u0000\u0000\u0000"+
		"\u1525\u1533\u0007I\u0000\u0000\u1526\u1529\u0005\u01fc\u0000\u0000\u1527"+
		"\u152a\u0005\u01f6\u0000\u0000\u1528\u152a\u0003\u02ec\u0176\u0000\u1529"+
		"\u1527\u0001\u0000\u0000\u0000\u1529\u1528\u0001\u0000\u0000\u0000\u152a"+
		"\u1530\u0001\u0000\u0000\u0000\u152b\u152e\u0005\u0202\u0000\u0000\u152c"+
		"\u152f\u0005\u01f6\u0000\u0000\u152d\u152f\u0003\u02ec\u0176\u0000\u152e"+
		"\u152c\u0001\u0000\u0000\u0000\u152e\u152d\u0001\u0000\u0000\u0000\u152f"+
		"\u1531\u0001\u0000\u0000\u0000\u1530\u152b\u0001\u0000\u0000\u0000\u1530"+
		"\u1531\u0001\u0000\u0000\u0000\u1531\u1532\u0001\u0000\u0000\u0000\u1532"+
		"\u1534\u0005\u01fd\u0000\u0000\u1533\u1526\u0001\u0000\u0000\u0000\u1533"+
		"\u1534\u0001\u0000\u0000\u0000\u1534\u1544\u0001\u0000\u0000\u0000\u1535"+
		"\u1542\u0005\u0192\u0000\u0000\u1536\u1543\u0005_\u0000\u0000\u1537\u1543"+
		"\u0005\u00a8\u0000\u0000\u1538\u1543\u0005\u00e4\u0000\u0000\u1539\u1540"+
		"\u0005\u015a\u0000\u0000\u153a\u153d\u0005\u01fc\u0000\u0000\u153b\u153e"+
		"\u0005\u01f6\u0000\u0000\u153c\u153e\u0003\u02ec\u0176\u0000\u153d\u153b"+
		"\u0001\u0000\u0000\u0000\u153d\u153c\u0001\u0000\u0000\u0000\u153e\u153f"+
		"\u0001\u0000\u0000\u0000\u153f\u1541\u0005\u01fd\u0000\u0000\u1540\u153a"+
		"\u0001\u0000\u0000\u0000\u1540\u1541\u0001\u0000\u0000\u0000\u1541\u1543"+
		"\u0001\u0000\u0000\u0000\u1542\u1536\u0001\u0000\u0000\u0000\u1542\u1537"+
		"\u0001\u0000\u0000\u0000\u1542\u1538\u0001\u0000\u0000\u0000\u1542\u1539"+
		"\u0001\u0000\u0000\u0000\u1543\u1545\u0001\u0000\u0000\u0000\u1544\u1535"+
		"\u0001\u0000\u0000\u0000\u1544\u1545\u0001\u0000\u0000\u0000\u1545\u1553"+
		"\u0001\u0000\u0000\u0000\u1546\u1553\u0003\u02f6\u017b\u0000\u1547\u1548"+
		"\u0005^\u0000\u0000\u1548\u1553\u0003\u02f8\u017c\u0000\u1549\u1553\u0003"+
		"\u02f8\u017c\u0000\u154a\u1553\u0005\u0105\u0000\u0000\u154b\u1553\u0005"+
		"\u019b\u0000\u0000\u154c\u1553\u0005\u0093\u0000\u0000\u154d\u1553\u0005"+
		"a\u0000\u0000\u154e\u1553\u0005\u0164\u0000\u0000\u154f\u1553\u0005\u00e5"+
		"\u0000\u0000\u1550\u1553\u0005\u00df\u0000\u0000\u1551\u1553\u0005i\u0000"+
		"\u0000\u1552\u1514\u0001\u0000\u0000\u0000\u1552\u151f\u0001\u0000\u0000"+
		"\u0000\u1552\u1546\u0001\u0000\u0000\u0000\u1552\u1547\u0001\u0000\u0000"+
		"\u0000\u1552\u1549\u0001\u0000\u0000\u0000\u1552\u154a\u0001\u0000\u0000"+
		"\u0000\u1552\u154b\u0001\u0000\u0000\u0000\u1552\u154c\u0001\u0000\u0000"+
		"\u0000\u1552\u154d\u0001\u0000\u0000\u0000\u1552\u154e\u0001\u0000\u0000"+
		"\u0000\u1552\u154f\u0001\u0000\u0000\u0000\u1552\u1550\u0001\u0000\u0000"+
		"\u0000\u1552\u1551\u0001\u0000\u0000\u0000\u1553\u02f5\u0001\u0000\u0000"+
		"\u0000\u1554\u1555\u0007J\u0000\u0000\u1555\u02f7\u0001\u0000\u0000\u0000"+
		"\u1556\u1557\u0007K\u0000\u0000\u1557\u02f9\u0001\u0000\u0000\u0000\u1558"+
		"\u1559\u0005\u0216\u0000\u0000\u1559\u155b\u0003\u02d6\u016b\u0000\u155a"+
		"\u1558\u0001\u0000\u0000\u0000\u155a\u155b\u0001\u0000\u0000\u0000\u155b"+
		"\u155c\u0001\u0000\u0000\u0000\u155c\u155d\u0003\u02fc\u017e\u0000\u155d"+
		"\u02fb\u0001\u0000\u0000\u0000\u155e\u1561\u0003\u0308\u0184\u0000\u155f"+
		"\u1561\u0005\u01f9\u0000\u0000\u1560\u155e\u0001\u0000\u0000\u0000\u1560"+
		"\u155f\u0001\u0000\u0000\u0000\u1561\u02fd\u0001\u0000\u0000\u0000\u1562"+
		"\u156a\u0005\u020c\u0000\u0000\u1563\u1564\u0005\u020a\u0000\u0000\u1564"+
		"\u156a\u0005\u0210\u0000\u0000\u1565\u1566\u0005\u020f\u0000\u0000\u1566"+
		"\u156a\u0005\u0213\u0000\u0000\u1567\u1568\u0005\u020d\u0000\u0000\u1568"+
		"\u156a\u0005\u0213\u0000\u0000\u1569\u1562\u0001\u0000\u0000\u0000\u1569"+
		"\u1563\u0001\u0000\u0000\u0000\u1569\u1565\u0001\u0000\u0000\u0000\u1569"+
		"\u1567\u0001\u0000\u0000\u0000\u156a\u02ff\u0001\u0000\u0000\u0000\u156b"+
		"\u156f\u0005\u020b\u0000\u0000\u156c\u156d\u0005\u0210\u0000\u0000\u156d"+
		"\u156f\u0005\u0213\u0000\u0000\u156e\u156b\u0001\u0000\u0000\u0000\u156e"+
		"\u156c\u0001\u0000\u0000\u0000\u156f\u0301\u0001\u0000\u0000\u0000\u1570"+
		"\u1574\u0005\u0209\u0000\u0000\u1571\u1572\u0005\u020a\u0000\u0000\u1572"+
		"\u1574\u0005\u0213\u0000\u0000\u1573\u1570\u0001\u0000\u0000\u0000\u1573"+
		"\u1571\u0001\u0000\u0000\u0000\u1574\u0303\u0001\u0000\u0000\u0000\u1575"+
		"\u1579\u0005\u0211\u0000\u0000\u1576\u1577\u0005\u0212\u0000\u0000\u1577"+
		"\u1579\u0005\u0212\u0000\u0000\u1578\u1575\u0001\u0000\u0000\u0000\u1578"+
		"\u1576\u0001\u0000\u0000\u0000\u1579\u0305\u0001\u0000\u0000\u0000\u157a"+
		"\u157b\u0005\u01fc\u0000\u0000\u157b\u157c\u0005\u0200\u0000\u0000\u157c"+
		"\u157d\u0005\u01fd\u0000\u0000\u157d\u0307\u0001\u0000\u0000\u0000\u157e"+
		"\u157f\u0007L\u0000\u0000\u157f\u0309\u0001\u0000\u0000\u0000\u02d3\u030d"+
		"\u0312\u031c\u0320\u0323\u0325\u0329\u0342\u0348\u0357\u035c\u0361\u0368"+
		"\u036a\u0376\u037b\u0387\u0389\u0390\u0395\u0397\u039d\u03ab\u03b0\u03b3"+
		"\u03b9\u03c2\u03d0\u03d8\u03e2\u03e5\u03ea\u03ef\u03f6\u03fb\u0406\u040b"+
		"\u040e\u0412\u0416\u041c\u0421\u042d\u0439\u0445\u044a\u044f\u0456\u0458"+
		"\u0464\u0469\u046c\u0472\u0478\u047a\u048c\u0491\u0496\u0498\u049f\u04a6"+
		"\u04a9\u04ac\u04af\u04ba\u04c6\u04ca\u04cd\u04d6\u04de\u04e6\u04e9\u04f0"+
		"\u04f4\u04fb\u0501\u052a\u0546\u054d\u0552\u055d\u0560\u056b\u0573\u0577"+
		"\u0583\u0586\u058c\u058f\u0594\u0599\u059d\u05a7\u05b1\u05b7\u05c2\u05c7"+
		"\u05cb\u05d3\u05db\u05e0\u05e3\u05e5\u05e8\u05f1\u05f6\u05fd\u0600\u0603"+
		"\u0607\u060a\u0612\u0617\u061c\u0623\u062d\u063d\u0643\u064d\u0657\u0660"+
		"\u0666\u0670\u0675\u067e\u0684\u0687\u068a\u069b\u06a0\u06ab\u06b1\u06b4"+
		"\u06bb\u06be\u06c5\u06ca\u06ce\u06d3\u06d8\u06e2\u06e9\u06f3\u06f8\u06ff"+
		"\u0706\u070a\u070d\u0710\u0721\u0726\u072f\u073d\u0744\u0754\u075d\u075f"+
		"\u0774\u0784\u078d\u0792\u0796\u0799\u07a3\u07af\u07b5\u07bd\u07c1\u07c4"+
		"\u07d3\u07d7\u07dc\u07df\u07ec\u07f0\u07fc\u0801\u0805\u0809\u080f\u0812"+
		"\u0815\u0823\u0833\u0839\u083d\u0843\u084f\u0858\u085a\u0860\u0864\u0867"+
		"\u086d\u0872\u0874\u087a\u0885\u0889\u088c\u0890\u0898\u08a1\u08ab\u08ad"+
		"\u08d0\u08d5\u08dc\u08e0\u08e4\u08e8\u08f4\u08f8\u0906\u090c\u0913\u0918"+
		"\u0922\u0928\u092a\u0933\u093d\u0942\u0951\u0955\u0958\u095c\u0961\u0965"+
		"\u096e\u0970\u0973\u097c\u097e\u0981\u0988\u098b\u098d\u0999\u09a1\u09a8"+
		"\u09ad\u09b5\u09bc\u09c0\u09c3\u09cf\u09d5\u09dd\u09e7\u09f2\u09f8\u09fa"+
		"\u09fc\u0a03\u0a06\u0a0d\u0a18\u0a1e\u0a22\u0a2c\u0a2f\u0a35\u0a40\u0a42"+
		"\u0a44\u0a47\u0a4b\u0a4e\u0a52\u0a56\u0a5b\u0a66\u0a6a\u0a72\u0a77\u0a79"+
		"\u0a82\u0a8c\u0a91\u0a97\u0a9b\u0a9e\u0aa6\u0aa9\u0aad\u0ab1\u0ab6\u0ab9"+
		"\u0abd\u0ac1\u0ac5\u0ad1\u0adf\u0ae4\u0ae8\u0af1\u0af4\u0af8\u0b00\u0b03"+
		"\u0b06\u0b0a\u0b0d\u0b10\u0b13\u0b16\u0b19\u0b1d\u0b27\u0b2e\u0b35\u0b3a"+
		"\u0b3f\u0b46\u0b4c\u0b56\u0b59\u0b5e\u0b62\u0b65\u0b68\u0b6c\u0b71\u0b75"+
		"\u0b77\u0b84\u0b8b\u0b99\u0b9c\u0ba6\u0baa\u0bb2\u0bbe\u0bc8\u0bcd\u0bd7"+
		"\u0bdf\u0be2\u0be8\u0bec\u0bf1\u0bfb\u0c00\u0c0d\u0c19\u0c1e\u0c28\u0c2d"+
		"\u0c2f\u0c34\u0c38\u0c3e\u0c42\u0c4f\u0c53\u0c5d\u0c60\u0c62\u0c67\u0c70"+
		"\u0c7d\u0c85\u0c8e\u0c92\u0c97\u0ca2\u0ca4\u0cb4\u0cb9\u0cbf\u0cc5\u0cd7"+
		"\u0cde\u0ce1\u0ce9\u0cf2\u0cf4\u0cf8\u0cfb\u0d00\u0d02\u0d06\u0d12\u0d1b"+
		"\u0d23\u0d28\u0d2c\u0d31\u0d34\u0d3c\u0d44\u0d4a\u0d4d\u0d50\u0d58\u0d62"+
		"\u0d6e\u0d75\u0d79\u0d7d\u0d80\u0d83\u0d88\u0d8d\u0d90\u0d93\u0d99\u0d9c"+
		"\u0da2\u0da5\u0da8\u0dad\u0db0\u0db8\u0dbe\u0dc8\u0dcd\u0dd3\u0dd9\u0de3"+
		"\u0de7\u0de9\u0dec\u0df8\u0dfc\u0dff\u0e13\u0e18\u0e1d\u0e24\u0e27\u0e30"+
		"\u0e37\u0e3c\u0e40\u0e48\u0e4e\u0e56\u0e59\u0e61\u0e69\u0e6c\u0e6f\u0e78"+
		"\u0e7e\u0e84\u0e86\u0e93\u0e95\u0e9e\u0ea0\u0ea4\u0eaa\u0eae\u0ec7\u0ed2"+
		"\u0ed7\u0eff\u0f03\u0f09\u0f17\u0f21\u0f27\u0f2d\u0f38\u0f3c\u0f43\u0f48"+
		"\u0f4c\u0f50\u0f55\u0f5b\u0f60\u0f64\u0f68\u0f6c\u0f6e\u0f79\u0f7e\u0f83"+
		"\u0f8c\u0f8e\u0f90\u0f93\u0fa4\u0fac\u0fb8\u0fc2\u0fca\u0fd3\u0fd6\u0fdd"+
		"\u0fe5\u0fec\u0ff0\u0ff7\u0ffb\u1000\u1004\u100c\u1010\u1017\u1020\u102e"+
		"\u103b\u1040\u1056\u105a\u105d\u1064\u1067\u106b\u106e\u1075\u1078\u107e"+
		"\u1081\u1085\u1088\u108f\u1094\u10a2\u10a8\u10ab\u10af\u10b7\u10c5\u10ca"+
		"\u10d3\u10df\u10e4\u10ee\u10f5\u10fd\u1105\u1109\u110c\u1111\u1116\u111b"+
		"\u1121\u1124\u1128\u1135\u1139\u1142\u1148\u1156\u1161\u1165\u1168\u1178"+
		"\u117e\u1188\u1190\u1193\u1196\u119f\u11a4\u11ad\u11b3\u11b8\u11bb\u11c0"+
		"\u11c5\u11c9\u11cf\u11d5\u11de\u11e3\u11eb\u11ef\u11f4\u11fa\u1201\u1206"+
		"\u120d\u1211\u1216\u121e\u1221\u1224\u1227\u122b\u1230\u1233\u123e\u1242"+
		"\u1244\u124f\u125a\u1263\u1266\u126a\u126d\u1271\u127e\u1283\u128b\u1292"+
		"\u1297\u129b\u12a0\u12a4\u12aa\u12ad\u12b4\u12c3\u12c6\u12c9\u12d3\u12d6"+
		"\u12d8\u12df\u12e4\u12e6\u12ec\u12f2\u12f4\u1302\u1304\u130b\u130f\u131c"+
		"\u1321\u1327\u132c\u1330\u1334\u133b\u1343\u134b\u1356\u1359\u135d\u1370"+
		"\u1375\u137a\u1381\u138e\u1398\u139d\u13a6\u13ae\u13b6\u13bc\u13c1\u13c6"+
		"\u13ca\u13cf\u13d2\u13d8\u13dc\u13e1\u13e8\u13f0\u13f6\u13fb\u1402\u140c"+
		"\u1410\u1416\u141b\u1420\u1422\u1427\u142b\u1430\u1437\u143c\u143e\u1440"+
		"\u144a\u144f\u1453\u1456\u145a\u1462\u1468\u146d\u1470\u1472\u1476\u147a"+
		"\u147e\u1486\u148e\u1490\u1496\u1499\u14b1\u14b8\u14d9\u14de\u14e1\u14e6"+
		"\u14e8\u14ee\u14f6\u14fb\u1502\u1506\u150a\u1511\u1517\u151d\u1523\u1529"+
		"\u152e\u1530\u1533\u153d\u1540\u1542\u1544\u1552\u155a\u1560\u1569\u156e"+
		"\u1573\u1578";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}